
input RegistrationData {
    name: String!
    email: String!
    password: String!
}

type PasswordAuthDisabled implements Error {
    path: [String!]
    message: String!
}

type EmailAlreadyExists implements Error {
    path: [String!]
    message: String!
}

union RegistrationErrors = PasswordAuthDisabled |
    EmailAlreadyExists

type RegistrationResult {
    errors: [RegistrationErrors!]
    user: User
}

extend type Mutation {
    """
    Register for Response using an email/password. This is used when password auth is enabled and the user
    does not wish to login/register with an OAuth 2.0 provider.

    If password auth is disabled the mutation will fail.
    """
    registerWithPassword(input: RegistrationData!): RegistrationResult!
}