# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - ./graphql/*.graphql
  - ./graphql/**/*.graphql

# Where should the generated serve code go?
exec:
  filename: ./internal/graphql/server/generated.go
  package: server

# Where should any generated models go?
model:
  filename: ./internal/graphql/types/generated.go
  package: types

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: ./server/resolvers
  package: resolvers
  filename_template: "{name}.go"

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/responserms/response/response"
  - "github.com/responserms/response/internal/ent"
  - "github.com/responserms/response/internal/structs"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.IntID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Time:
    model:
      - github.com/99designs/gqlgen/graphql.Time
  Any:
    model:
      - github.com/99designs/gqlgen/graphql.Any
  Node:
    model:
      - github.com/responserms/response/internal/ent.Noder