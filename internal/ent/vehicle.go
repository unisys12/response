// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
)

// Vehicle is the model entity for the Vehicle schema.
type Vehicle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Vin holds the value of the "vin" field.
	Vin string `json:"vin,omitempty"`
	// Style holds the value of the "style" field.
	Style string `json:"style,omitempty"`
	// ExtraFeatures holds the value of the "extra_features" field.
	ExtraFeatures time.Time `json:"extra_features,omitempty"`
	// PrivateNotes holds the value of the "private_notes" field.
	PrivateNotes string `json:"private_notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleQuery when eager-loading is set.
	Edges                        VehicleEdges `json:"edges"`
	vehicle_metadata             *int
	vehicle_class_vehicles       *int
	vehicle_color_vehicles_major *int
	vehicle_color_vehicles_minor *int
	vehicle_make_vehicles        *int
	vehicle_model_vehicles       *int
}

// VehicleEdges holds the relations/edges for other nodes in the graph.
type VehicleEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Registrations holds the value of the registrations edge.
	Registrations []*VehicleRegistration `json:"registrations,omitempty"`
	// Make holds the value of the make edge.
	Make *VehicleMake `json:"make,omitempty"`
	// Model holds the value of the model edge.
	Model *VehicleModel `json:"model,omitempty"`
	// MajorColor holds the value of the major_color edge.
	MajorColor *VehicleColor `json:"major_color,omitempty"`
	// MinorColor holds the value of the minor_color edge.
	MinorColor *VehicleColor `json:"minor_color,omitempty"`
	// Class holds the value of the class edge.
	Class *VehicleClass `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// RegistrationsOrErr returns the Registrations value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleEdges) RegistrationsOrErr() ([]*VehicleRegistration, error) {
	if e.loadedTypes[1] {
		return e.Registrations, nil
	}
	return nil, &NotLoadedError{edge: "registrations"}
}

// MakeOrErr returns the Make value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) MakeOrErr() (*VehicleMake, error) {
	if e.loadedTypes[2] {
		if e.Make == nil {
			// The edge make was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehiclemake.Label}
		}
		return e.Make, nil
	}
	return nil, &NotLoadedError{edge: "make"}
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) ModelOrErr() (*VehicleModel, error) {
	if e.loadedTypes[3] {
		if e.Model == nil {
			// The edge model was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehiclemodel.Label}
		}
		return e.Model, nil
	}
	return nil, &NotLoadedError{edge: "model"}
}

// MajorColorOrErr returns the MajorColor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) MajorColorOrErr() (*VehicleColor, error) {
	if e.loadedTypes[4] {
		if e.MajorColor == nil {
			// The edge major_color was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehiclecolor.Label}
		}
		return e.MajorColor, nil
	}
	return nil, &NotLoadedError{edge: "major_color"}
}

// MinorColorOrErr returns the MinorColor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) MinorColorOrErr() (*VehicleColor, error) {
	if e.loadedTypes[5] {
		if e.MinorColor == nil {
			// The edge minor_color was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehiclecolor.Label}
		}
		return e.MinorColor, nil
	}
	return nil, &NotLoadedError{edge: "minor_color"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleEdges) ClassOrErr() (*VehicleClass, error) {
	if e.loadedTypes[6] {
		if e.Class == nil {
			// The edge class was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehicleclass.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vehicle) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldID, vehicle.FieldCreatedBy, vehicle.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case vehicle.FieldCreatedWith, vehicle.FieldUpdatedWith, vehicle.FieldVin, vehicle.FieldStyle, vehicle.FieldPrivateNotes:
			values[i] = new(sql.NullString)
		case vehicle.FieldCreatedAt, vehicle.FieldUpdatedAt, vehicle.FieldExtraFeatures:
			values[i] = new(sql.NullTime)
		case vehicle.ForeignKeys[0]: // vehicle_metadata
			values[i] = new(sql.NullInt64)
		case vehicle.ForeignKeys[1]: // vehicle_class_vehicles
			values[i] = new(sql.NullInt64)
		case vehicle.ForeignKeys[2]: // vehicle_color_vehicles_major
			values[i] = new(sql.NullInt64)
		case vehicle.ForeignKeys[3]: // vehicle_color_vehicles_minor
			values[i] = new(sql.NullInt64)
		case vehicle.ForeignKeys[4]: // vehicle_make_vehicles
			values[i] = new(sql.NullInt64)
		case vehicle.ForeignKeys[5]: // vehicle_model_vehicles
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vehicle", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vehicle fields.
func (v *Vehicle) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehicle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vehicle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vehicle.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				v.CreatedBy = int(value.Int64)
			}
		case vehicle.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				v.CreatedWith = value.String
			}
		case vehicle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case vehicle.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				v.UpdatedBy = int(value.Int64)
			}
		case vehicle.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				v.UpdatedWith = value.String
			}
		case vehicle.FieldVin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vin", values[i])
			} else if value.Valid {
				v.Vin = value.String
			}
		case vehicle.FieldStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field style", values[i])
			} else if value.Valid {
				v.Style = value.String
			}
		case vehicle.FieldExtraFeatures:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field extra_features", values[i])
			} else if value.Valid {
				v.ExtraFeatures = value.Time
			}
		case vehicle.FieldPrivateNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_notes", values[i])
			} else if value.Valid {
				v.PrivateNotes = value.String
			}
		case vehicle.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_metadata", value)
			} else if value.Valid {
				v.vehicle_metadata = new(int)
				*v.vehicle_metadata = int(value.Int64)
			}
		case vehicle.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_class_vehicles", value)
			} else if value.Valid {
				v.vehicle_class_vehicles = new(int)
				*v.vehicle_class_vehicles = int(value.Int64)
			}
		case vehicle.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_color_vehicles_major", value)
			} else if value.Valid {
				v.vehicle_color_vehicles_major = new(int)
				*v.vehicle_color_vehicles_major = int(value.Int64)
			}
		case vehicle.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_color_vehicles_minor", value)
			} else if value.Valid {
				v.vehicle_color_vehicles_minor = new(int)
				*v.vehicle_color_vehicles_minor = int(value.Int64)
			}
		case vehicle.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_make_vehicles", value)
			} else if value.Valid {
				v.vehicle_make_vehicles = new(int)
				*v.vehicle_make_vehicles = int(value.Int64)
			}
		case vehicle.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_model_vehicles", value)
			} else if value.Valid {
				v.vehicle_model_vehicles = new(int)
				*v.vehicle_model_vehicles = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the Vehicle entity.
func (v *Vehicle) QueryMetadata() *MetadataQuery {
	return (&VehicleClient{config: v.config}).QueryMetadata(v)
}

// QueryRegistrations queries the "registrations" edge of the Vehicle entity.
func (v *Vehicle) QueryRegistrations() *VehicleRegistrationQuery {
	return (&VehicleClient{config: v.config}).QueryRegistrations(v)
}

// QueryMake queries the "make" edge of the Vehicle entity.
func (v *Vehicle) QueryMake() *VehicleMakeQuery {
	return (&VehicleClient{config: v.config}).QueryMake(v)
}

// QueryModel queries the "model" edge of the Vehicle entity.
func (v *Vehicle) QueryModel() *VehicleModelQuery {
	return (&VehicleClient{config: v.config}).QueryModel(v)
}

// QueryMajorColor queries the "major_color" edge of the Vehicle entity.
func (v *Vehicle) QueryMajorColor() *VehicleColorQuery {
	return (&VehicleClient{config: v.config}).QueryMajorColor(v)
}

// QueryMinorColor queries the "minor_color" edge of the Vehicle entity.
func (v *Vehicle) QueryMinorColor() *VehicleColorQuery {
	return (&VehicleClient{config: v.config}).QueryMinorColor(v)
}

// QueryClass queries the "class" edge of the Vehicle entity.
func (v *Vehicle) QueryClass() *VehicleClassQuery {
	return (&VehicleClient{config: v.config}).QueryClass(v)
}

// Update returns a builder for updating this Vehicle.
// Note that you need to call Vehicle.Unwrap() before calling this method if this Vehicle
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vehicle) Update() *VehicleUpdateOne {
	return (&VehicleClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vehicle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vehicle) Unwrap() *Vehicle {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vehicle is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vehicle) String() string {
	var builder strings.Builder
	builder.WriteString("Vehicle(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", v.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(v.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", v.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(v.UpdatedWith)
	builder.WriteString(", vin=")
	builder.WriteString(v.Vin)
	builder.WriteString(", style=")
	builder.WriteString(v.Style)
	builder.WriteString(", extra_features=")
	builder.WriteString(v.ExtraFeatures.Format(time.ANSIC))
	builder.WriteString(", private_notes=")
	builder.WriteString(v.PrivateNotes)
	builder.WriteByte(')')
	return builder.String()
}

// Vehicles is a parsable slice of Vehicle.
type Vehicles []*Vehicle

func (v Vehicles) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
