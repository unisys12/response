// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
)

// VehicleClassUpdate is the builder for updating VehicleClass entities.
type VehicleClassUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleClassMutation
}

// Where appends a list predicates to the VehicleClassUpdate builder.
func (vcu *VehicleClassUpdate) Where(ps ...predicate.VehicleClass) *VehicleClassUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetCreatedBy sets the "created_by" field.
func (vcu *VehicleClassUpdate) SetCreatedBy(i int) *VehicleClassUpdate {
	vcu.mutation.ResetCreatedBy()
	vcu.mutation.SetCreatedBy(i)
	return vcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableCreatedBy(i *int) *VehicleClassUpdate {
	if i != nil {
		vcu.SetCreatedBy(*i)
	}
	return vcu
}

// AddCreatedBy adds i to the "created_by" field.
func (vcu *VehicleClassUpdate) AddCreatedBy(i int) *VehicleClassUpdate {
	vcu.mutation.AddCreatedBy(i)
	return vcu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vcu *VehicleClassUpdate) ClearCreatedBy() *VehicleClassUpdate {
	vcu.mutation.ClearCreatedBy()
	return vcu
}

// SetCreatedWith sets the "created_with" field.
func (vcu *VehicleClassUpdate) SetCreatedWith(s string) *VehicleClassUpdate {
	vcu.mutation.SetCreatedWith(s)
	return vcu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableCreatedWith(s *string) *VehicleClassUpdate {
	if s != nil {
		vcu.SetCreatedWith(*s)
	}
	return vcu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vcu *VehicleClassUpdate) ClearCreatedWith() *VehicleClassUpdate {
	vcu.mutation.ClearCreatedWith()
	return vcu
}

// SetUpdatedAt sets the "updated_at" field.
func (vcu *VehicleClassUpdate) SetUpdatedAt(t time.Time) *VehicleClassUpdate {
	vcu.mutation.SetUpdatedAt(t)
	return vcu
}

// SetUpdatedBy sets the "updated_by" field.
func (vcu *VehicleClassUpdate) SetUpdatedBy(i int) *VehicleClassUpdate {
	vcu.mutation.ResetUpdatedBy()
	vcu.mutation.SetUpdatedBy(i)
	return vcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableUpdatedBy(i *int) *VehicleClassUpdate {
	if i != nil {
		vcu.SetUpdatedBy(*i)
	}
	return vcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vcu *VehicleClassUpdate) AddUpdatedBy(i int) *VehicleClassUpdate {
	vcu.mutation.AddUpdatedBy(i)
	return vcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vcu *VehicleClassUpdate) ClearUpdatedBy() *VehicleClassUpdate {
	vcu.mutation.ClearUpdatedBy()
	return vcu
}

// SetUpdatedWith sets the "updated_with" field.
func (vcu *VehicleClassUpdate) SetUpdatedWith(s string) *VehicleClassUpdate {
	vcu.mutation.SetUpdatedWith(s)
	return vcu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableUpdatedWith(s *string) *VehicleClassUpdate {
	if s != nil {
		vcu.SetUpdatedWith(*s)
	}
	return vcu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vcu *VehicleClassUpdate) ClearUpdatedWith() *VehicleClassUpdate {
	vcu.mutation.ClearUpdatedWith()
	return vcu
}

// SetShort sets the "short" field.
func (vcu *VehicleClassUpdate) SetShort(s string) *VehicleClassUpdate {
	vcu.mutation.SetShort(s)
	return vcu
}

// SetTitle sets the "title" field.
func (vcu *VehicleClassUpdate) SetTitle(s string) *VehicleClassUpdate {
	vcu.mutation.SetTitle(s)
	return vcu
}

// SetDescription sets the "description" field.
func (vcu *VehicleClassUpdate) SetDescription(s string) *VehicleClassUpdate {
	vcu.mutation.SetDescription(s)
	return vcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableDescription(s *string) *VehicleClassUpdate {
	if s != nil {
		vcu.SetDescription(*s)
	}
	return vcu
}

// ClearDescription clears the value of the "description" field.
func (vcu *VehicleClassUpdate) ClearDescription() *VehicleClassUpdate {
	vcu.mutation.ClearDescription()
	return vcu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vcu *VehicleClassUpdate) SetMetadataID(id int) *VehicleClassUpdate {
	vcu.mutation.SetMetadataID(id)
	return vcu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vcu *VehicleClassUpdate) SetNillableMetadataID(id *int) *VehicleClassUpdate {
	if id != nil {
		vcu = vcu.SetMetadataID(*id)
	}
	return vcu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vcu *VehicleClassUpdate) SetMetadata(m *Metadata) *VehicleClassUpdate {
	return vcu.SetMetadataID(m.ID)
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (vcu *VehicleClassUpdate) AddVehicleIDs(ids ...int) *VehicleClassUpdate {
	vcu.mutation.AddVehicleIDs(ids...)
	return vcu
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (vcu *VehicleClassUpdate) AddVehicles(v ...*Vehicle) *VehicleClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.AddVehicleIDs(ids...)
}

// Mutation returns the VehicleClassMutation object of the builder.
func (vcu *VehicleClassUpdate) Mutation() *VehicleClassMutation {
	return vcu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vcu *VehicleClassUpdate) ClearMetadata() *VehicleClassUpdate {
	vcu.mutation.ClearMetadata()
	return vcu
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (vcu *VehicleClassUpdate) ClearVehicles() *VehicleClassUpdate {
	vcu.mutation.ClearVehicles()
	return vcu
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (vcu *VehicleClassUpdate) RemoveVehicleIDs(ids ...int) *VehicleClassUpdate {
	vcu.mutation.RemoveVehicleIDs(ids...)
	return vcu
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (vcu *VehicleClassUpdate) RemoveVehicles(v ...*Vehicle) *VehicleClassUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.RemoveVehicleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VehicleClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := vcu.defaults(); err != nil {
		return 0, err
	}
	if len(vcu.hooks) == 0 {
		if err = vcu.check(); err != nil {
			return 0, err
		}
		affected, err = vcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vcu.check(); err != nil {
				return 0, err
			}
			vcu.mutation = mutation
			affected, err = vcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vcu.hooks) - 1; i >= 0; i-- {
			if vcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VehicleClassUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VehicleClassUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VehicleClassUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcu *VehicleClassUpdate) defaults() error {
	if _, ok := vcu.mutation.UpdatedAt(); !ok {
		if vehicleclass.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicleclass.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicleclass.UpdateDefaultUpdatedAt()
		vcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vcu *VehicleClassUpdate) check() error {
	if v, ok := vcu.mutation.Short(); ok {
		if err := vehicleclass.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vcu.mutation.Title(); ok {
		if err := vehicleclass.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vcu.mutation.Description(); ok {
		if err := vehicleclass.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vcu *VehicleClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicleclass.Table,
			Columns: vehicleclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleclass.FieldID,
			},
		},
	}
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if value, ok := vcu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if vcu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if value, ok := vcu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldCreatedWith,
		})
	}
	if vcu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldCreatedWith,
		})
	}
	if value, ok := vcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleclass.FieldUpdatedAt,
		})
	}
	if value, ok := vcu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if value, ok := vcu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if vcu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if value, ok := vcu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldUpdatedWith,
		})
	}
	if vcu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldUpdatedWith,
		})
	}
	if value, ok := vcu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldShort,
		})
	}
	if value, ok := vcu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldTitle,
		})
	}
	if value, ok := vcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldDescription,
		})
	}
	if vcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldDescription,
		})
	}
	if vcu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleclass.MetadataTable,
			Columns: []string{vehicleclass.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleclass.MetadataTable,
			Columns: []string{vehicleclass.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !vcu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleClassUpdateOne is the builder for updating a single VehicleClass entity.
type VehicleClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleClassMutation
}

// SetCreatedBy sets the "created_by" field.
func (vcuo *VehicleClassUpdateOne) SetCreatedBy(i int) *VehicleClassUpdateOne {
	vcuo.mutation.ResetCreatedBy()
	vcuo.mutation.SetCreatedBy(i)
	return vcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableCreatedBy(i *int) *VehicleClassUpdateOne {
	if i != nil {
		vcuo.SetCreatedBy(*i)
	}
	return vcuo
}

// AddCreatedBy adds i to the "created_by" field.
func (vcuo *VehicleClassUpdateOne) AddCreatedBy(i int) *VehicleClassUpdateOne {
	vcuo.mutation.AddCreatedBy(i)
	return vcuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vcuo *VehicleClassUpdateOne) ClearCreatedBy() *VehicleClassUpdateOne {
	vcuo.mutation.ClearCreatedBy()
	return vcuo
}

// SetCreatedWith sets the "created_with" field.
func (vcuo *VehicleClassUpdateOne) SetCreatedWith(s string) *VehicleClassUpdateOne {
	vcuo.mutation.SetCreatedWith(s)
	return vcuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableCreatedWith(s *string) *VehicleClassUpdateOne {
	if s != nil {
		vcuo.SetCreatedWith(*s)
	}
	return vcuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vcuo *VehicleClassUpdateOne) ClearCreatedWith() *VehicleClassUpdateOne {
	vcuo.mutation.ClearCreatedWith()
	return vcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vcuo *VehicleClassUpdateOne) SetUpdatedAt(t time.Time) *VehicleClassUpdateOne {
	vcuo.mutation.SetUpdatedAt(t)
	return vcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vcuo *VehicleClassUpdateOne) SetUpdatedBy(i int) *VehicleClassUpdateOne {
	vcuo.mutation.ResetUpdatedBy()
	vcuo.mutation.SetUpdatedBy(i)
	return vcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableUpdatedBy(i *int) *VehicleClassUpdateOne {
	if i != nil {
		vcuo.SetUpdatedBy(*i)
	}
	return vcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vcuo *VehicleClassUpdateOne) AddUpdatedBy(i int) *VehicleClassUpdateOne {
	vcuo.mutation.AddUpdatedBy(i)
	return vcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vcuo *VehicleClassUpdateOne) ClearUpdatedBy() *VehicleClassUpdateOne {
	vcuo.mutation.ClearUpdatedBy()
	return vcuo
}

// SetUpdatedWith sets the "updated_with" field.
func (vcuo *VehicleClassUpdateOne) SetUpdatedWith(s string) *VehicleClassUpdateOne {
	vcuo.mutation.SetUpdatedWith(s)
	return vcuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableUpdatedWith(s *string) *VehicleClassUpdateOne {
	if s != nil {
		vcuo.SetUpdatedWith(*s)
	}
	return vcuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vcuo *VehicleClassUpdateOne) ClearUpdatedWith() *VehicleClassUpdateOne {
	vcuo.mutation.ClearUpdatedWith()
	return vcuo
}

// SetShort sets the "short" field.
func (vcuo *VehicleClassUpdateOne) SetShort(s string) *VehicleClassUpdateOne {
	vcuo.mutation.SetShort(s)
	return vcuo
}

// SetTitle sets the "title" field.
func (vcuo *VehicleClassUpdateOne) SetTitle(s string) *VehicleClassUpdateOne {
	vcuo.mutation.SetTitle(s)
	return vcuo
}

// SetDescription sets the "description" field.
func (vcuo *VehicleClassUpdateOne) SetDescription(s string) *VehicleClassUpdateOne {
	vcuo.mutation.SetDescription(s)
	return vcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableDescription(s *string) *VehicleClassUpdateOne {
	if s != nil {
		vcuo.SetDescription(*s)
	}
	return vcuo
}

// ClearDescription clears the value of the "description" field.
func (vcuo *VehicleClassUpdateOne) ClearDescription() *VehicleClassUpdateOne {
	vcuo.mutation.ClearDescription()
	return vcuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vcuo *VehicleClassUpdateOne) SetMetadataID(id int) *VehicleClassUpdateOne {
	vcuo.mutation.SetMetadataID(id)
	return vcuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vcuo *VehicleClassUpdateOne) SetNillableMetadataID(id *int) *VehicleClassUpdateOne {
	if id != nil {
		vcuo = vcuo.SetMetadataID(*id)
	}
	return vcuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vcuo *VehicleClassUpdateOne) SetMetadata(m *Metadata) *VehicleClassUpdateOne {
	return vcuo.SetMetadataID(m.ID)
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (vcuo *VehicleClassUpdateOne) AddVehicleIDs(ids ...int) *VehicleClassUpdateOne {
	vcuo.mutation.AddVehicleIDs(ids...)
	return vcuo
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (vcuo *VehicleClassUpdateOne) AddVehicles(v ...*Vehicle) *VehicleClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.AddVehicleIDs(ids...)
}

// Mutation returns the VehicleClassMutation object of the builder.
func (vcuo *VehicleClassUpdateOne) Mutation() *VehicleClassMutation {
	return vcuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vcuo *VehicleClassUpdateOne) ClearMetadata() *VehicleClassUpdateOne {
	vcuo.mutation.ClearMetadata()
	return vcuo
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (vcuo *VehicleClassUpdateOne) ClearVehicles() *VehicleClassUpdateOne {
	vcuo.mutation.ClearVehicles()
	return vcuo
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (vcuo *VehicleClassUpdateOne) RemoveVehicleIDs(ids ...int) *VehicleClassUpdateOne {
	vcuo.mutation.RemoveVehicleIDs(ids...)
	return vcuo
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (vcuo *VehicleClassUpdateOne) RemoveVehicles(v ...*Vehicle) *VehicleClassUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.RemoveVehicleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VehicleClassUpdateOne) Select(field string, fields ...string) *VehicleClassUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VehicleClass entity.
func (vcuo *VehicleClassUpdateOne) Save(ctx context.Context) (*VehicleClass, error) {
	var (
		err  error
		node *VehicleClass
	)
	if err := vcuo.defaults(); err != nil {
		return nil, err
	}
	if len(vcuo.hooks) == 0 {
		if err = vcuo.check(); err != nil {
			return nil, err
		}
		node, err = vcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vcuo.check(); err != nil {
				return nil, err
			}
			vcuo.mutation = mutation
			node, err = vcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vcuo.hooks) - 1; i >= 0; i-- {
			if vcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VehicleClassUpdateOne) SaveX(ctx context.Context) *VehicleClass {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VehicleClassUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VehicleClassUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcuo *VehicleClassUpdateOne) defaults() error {
	if _, ok := vcuo.mutation.UpdatedAt(); !ok {
		if vehicleclass.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicleclass.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicleclass.UpdateDefaultUpdatedAt()
		vcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vcuo *VehicleClassUpdateOne) check() error {
	if v, ok := vcuo.mutation.Short(); ok {
		if err := vehicleclass.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vcuo.mutation.Title(); ok {
		if err := vehicleclass.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vcuo.mutation.Description(); ok {
		if err := vehicleclass.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vcuo *VehicleClassUpdateOne) sqlSave(ctx context.Context) (_node *VehicleClass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicleclass.Table,
			Columns: vehicleclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleclass.FieldID,
			},
		},
	}
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VehicleClass.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleclass.FieldID)
		for _, f := range fields {
			if !vehicleclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicleclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if value, ok := vcuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if vcuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleclass.FieldCreatedBy,
		})
	}
	if value, ok := vcuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldCreatedWith,
		})
	}
	if vcuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldCreatedWith,
		})
	}
	if value, ok := vcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleclass.FieldUpdatedAt,
		})
	}
	if value, ok := vcuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if value, ok := vcuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if vcuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleclass.FieldUpdatedBy,
		})
	}
	if value, ok := vcuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldUpdatedWith,
		})
	}
	if vcuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldUpdatedWith,
		})
	}
	if value, ok := vcuo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldShort,
		})
	}
	if value, ok := vcuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldTitle,
		})
	}
	if value, ok := vcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleclass.FieldDescription,
		})
	}
	if vcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleclass.FieldDescription,
		})
	}
	if vcuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleclass.MetadataTable,
			Columns: []string{vehicleclass.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleclass.MetadataTable,
			Columns: []string{vehicleclass.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !vcuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleClass{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
