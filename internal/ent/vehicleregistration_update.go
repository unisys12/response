// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// VehicleRegistrationUpdate is the builder for updating VehicleRegistration entities.
type VehicleRegistrationUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleRegistrationMutation
}

// Where appends a list predicates to the VehicleRegistrationUpdate builder.
func (vru *VehicleRegistrationUpdate) Where(ps ...predicate.VehicleRegistration) *VehicleRegistrationUpdate {
	vru.mutation.Where(ps...)
	return vru
}

// SetCreatedBy sets the "created_by" field.
func (vru *VehicleRegistrationUpdate) SetCreatedBy(i int) *VehicleRegistrationUpdate {
	vru.mutation.ResetCreatedBy()
	vru.mutation.SetCreatedBy(i)
	return vru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vru *VehicleRegistrationUpdate) SetNillableCreatedBy(i *int) *VehicleRegistrationUpdate {
	if i != nil {
		vru.SetCreatedBy(*i)
	}
	return vru
}

// AddCreatedBy adds i to the "created_by" field.
func (vru *VehicleRegistrationUpdate) AddCreatedBy(i int) *VehicleRegistrationUpdate {
	vru.mutation.AddCreatedBy(i)
	return vru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vru *VehicleRegistrationUpdate) ClearCreatedBy() *VehicleRegistrationUpdate {
	vru.mutation.ClearCreatedBy()
	return vru
}

// SetCreatedWith sets the "created_with" field.
func (vru *VehicleRegistrationUpdate) SetCreatedWith(s string) *VehicleRegistrationUpdate {
	vru.mutation.SetCreatedWith(s)
	return vru
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vru *VehicleRegistrationUpdate) SetNillableCreatedWith(s *string) *VehicleRegistrationUpdate {
	if s != nil {
		vru.SetCreatedWith(*s)
	}
	return vru
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vru *VehicleRegistrationUpdate) ClearCreatedWith() *VehicleRegistrationUpdate {
	vru.mutation.ClearCreatedWith()
	return vru
}

// SetUpdatedAt sets the "updated_at" field.
func (vru *VehicleRegistrationUpdate) SetUpdatedAt(t time.Time) *VehicleRegistrationUpdate {
	vru.mutation.SetUpdatedAt(t)
	return vru
}

// SetUpdatedBy sets the "updated_by" field.
func (vru *VehicleRegistrationUpdate) SetUpdatedBy(i int) *VehicleRegistrationUpdate {
	vru.mutation.ResetUpdatedBy()
	vru.mutation.SetUpdatedBy(i)
	return vru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vru *VehicleRegistrationUpdate) SetNillableUpdatedBy(i *int) *VehicleRegistrationUpdate {
	if i != nil {
		vru.SetUpdatedBy(*i)
	}
	return vru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vru *VehicleRegistrationUpdate) AddUpdatedBy(i int) *VehicleRegistrationUpdate {
	vru.mutation.AddUpdatedBy(i)
	return vru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vru *VehicleRegistrationUpdate) ClearUpdatedBy() *VehicleRegistrationUpdate {
	vru.mutation.ClearUpdatedBy()
	return vru
}

// SetUpdatedWith sets the "updated_with" field.
func (vru *VehicleRegistrationUpdate) SetUpdatedWith(s string) *VehicleRegistrationUpdate {
	vru.mutation.SetUpdatedWith(s)
	return vru
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vru *VehicleRegistrationUpdate) SetNillableUpdatedWith(s *string) *VehicleRegistrationUpdate {
	if s != nil {
		vru.SetUpdatedWith(*s)
	}
	return vru
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vru *VehicleRegistrationUpdate) ClearUpdatedWith() *VehicleRegistrationUpdate {
	vru.mutation.ClearUpdatedWith()
	return vru
}

// SetPlate sets the "plate" field.
func (vru *VehicleRegistrationUpdate) SetPlate(s string) *VehicleRegistrationUpdate {
	vru.mutation.SetPlate(s)
	return vru
}

// SetExpiredAt sets the "expired_at" field.
func (vru *VehicleRegistrationUpdate) SetExpiredAt(t time.Time) *VehicleRegistrationUpdate {
	vru.mutation.SetExpiredAt(t)
	return vru
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vru *VehicleRegistrationUpdate) SetMetadataID(id int) *VehicleRegistrationUpdate {
	vru.mutation.SetMetadataID(id)
	return vru
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vru *VehicleRegistrationUpdate) SetNillableMetadataID(id *int) *VehicleRegistrationUpdate {
	if id != nil {
		vru = vru.SetMetadataID(*id)
	}
	return vru
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vru *VehicleRegistrationUpdate) SetMetadata(m *Metadata) *VehicleRegistrationUpdate {
	return vru.SetMetadataID(m.ID)
}

// SetStateID sets the "state" edge to the State entity by ID.
func (vru *VehicleRegistrationUpdate) SetStateID(id int) *VehicleRegistrationUpdate {
	vru.mutation.SetStateID(id)
	return vru
}

// SetState sets the "state" edge to the State entity.
func (vru *VehicleRegistrationUpdate) SetState(s *State) *VehicleRegistrationUpdate {
	return vru.SetStateID(s.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (vru *VehicleRegistrationUpdate) SetPersonID(id int) *VehicleRegistrationUpdate {
	vru.mutation.SetPersonID(id)
	return vru
}

// SetPerson sets the "person" edge to the Person entity.
func (vru *VehicleRegistrationUpdate) SetPerson(p *Person) *VehicleRegistrationUpdate {
	return vru.SetPersonID(p.ID)
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (vru *VehicleRegistrationUpdate) SetVehicleID(id int) *VehicleRegistrationUpdate {
	vru.mutation.SetVehicleID(id)
	return vru
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (vru *VehicleRegistrationUpdate) SetVehicle(v *Vehicle) *VehicleRegistrationUpdate {
	return vru.SetVehicleID(v.ID)
}

// Mutation returns the VehicleRegistrationMutation object of the builder.
func (vru *VehicleRegistrationUpdate) Mutation() *VehicleRegistrationMutation {
	return vru.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vru *VehicleRegistrationUpdate) ClearMetadata() *VehicleRegistrationUpdate {
	vru.mutation.ClearMetadata()
	return vru
}

// ClearState clears the "state" edge to the State entity.
func (vru *VehicleRegistrationUpdate) ClearState() *VehicleRegistrationUpdate {
	vru.mutation.ClearState()
	return vru
}

// ClearPerson clears the "person" edge to the Person entity.
func (vru *VehicleRegistrationUpdate) ClearPerson() *VehicleRegistrationUpdate {
	vru.mutation.ClearPerson()
	return vru
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (vru *VehicleRegistrationUpdate) ClearVehicle() *VehicleRegistrationUpdate {
	vru.mutation.ClearVehicle()
	return vru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VehicleRegistrationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := vru.defaults(); err != nil {
		return 0, err
	}
	if len(vru.hooks) == 0 {
		if err = vru.check(); err != nil {
			return 0, err
		}
		affected, err = vru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleRegistrationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vru.check(); err != nil {
				return 0, err
			}
			vru.mutation = mutation
			affected, err = vru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vru.hooks) - 1; i >= 0; i-- {
			if vru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VehicleRegistrationUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VehicleRegistrationUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VehicleRegistrationUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vru *VehicleRegistrationUpdate) defaults() error {
	if _, ok := vru.mutation.UpdatedAt(); !ok {
		if vehicleregistration.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicleregistration.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicleregistration.UpdateDefaultUpdatedAt()
		vru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vru *VehicleRegistrationUpdate) check() error {
	if _, ok := vru.mutation.StateID(); vru.mutation.StateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"state\"")
	}
	if _, ok := vru.mutation.PersonID(); vru.mutation.PersonCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"person\"")
	}
	if _, ok := vru.mutation.VehicleID(); vru.mutation.VehicleCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vehicle\"")
	}
	return nil
}

func (vru *VehicleRegistrationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicleregistration.Table,
			Columns: vehicleregistration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleregistration.FieldID,
			},
		},
	}
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if value, ok := vru.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if vru.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if value, ok := vru.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldCreatedWith,
		})
	}
	if vru.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleregistration.FieldCreatedWith,
		})
	}
	if value, ok := vru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedAt,
		})
	}
	if value, ok := vru.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if value, ok := vru.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if vru.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if value, ok := vru.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedWith,
		})
	}
	if vru.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleregistration.FieldUpdatedWith,
		})
	}
	if value, ok := vru.mutation.Plate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldPlate,
		})
	}
	if value, ok := vru.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleregistration.FieldExpiredAt,
		})
	}
	if vru.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleregistration.MetadataTable,
			Columns: []string{vehicleregistration.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleregistration.MetadataTable,
			Columns: []string{vehicleregistration.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.StateTable,
			Columns: []string{vehicleregistration.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: state.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.StateTable,
			Columns: []string{vehicleregistration.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: state.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.PersonTable,
			Columns: []string{vehicleregistration.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.PersonTable,
			Columns: []string{vehicleregistration.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vru.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.VehicleTable,
			Columns: []string{vehicleregistration.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.VehicleTable,
			Columns: []string{vehicleregistration.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleregistration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleRegistrationUpdateOne is the builder for updating a single VehicleRegistration entity.
type VehicleRegistrationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleRegistrationMutation
}

// SetCreatedBy sets the "created_by" field.
func (vruo *VehicleRegistrationUpdateOne) SetCreatedBy(i int) *VehicleRegistrationUpdateOne {
	vruo.mutation.ResetCreatedBy()
	vruo.mutation.SetCreatedBy(i)
	return vruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vruo *VehicleRegistrationUpdateOne) SetNillableCreatedBy(i *int) *VehicleRegistrationUpdateOne {
	if i != nil {
		vruo.SetCreatedBy(*i)
	}
	return vruo
}

// AddCreatedBy adds i to the "created_by" field.
func (vruo *VehicleRegistrationUpdateOne) AddCreatedBy(i int) *VehicleRegistrationUpdateOne {
	vruo.mutation.AddCreatedBy(i)
	return vruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vruo *VehicleRegistrationUpdateOne) ClearCreatedBy() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearCreatedBy()
	return vruo
}

// SetCreatedWith sets the "created_with" field.
func (vruo *VehicleRegistrationUpdateOne) SetCreatedWith(s string) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetCreatedWith(s)
	return vruo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vruo *VehicleRegistrationUpdateOne) SetNillableCreatedWith(s *string) *VehicleRegistrationUpdateOne {
	if s != nil {
		vruo.SetCreatedWith(*s)
	}
	return vruo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vruo *VehicleRegistrationUpdateOne) ClearCreatedWith() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearCreatedWith()
	return vruo
}

// SetUpdatedAt sets the "updated_at" field.
func (vruo *VehicleRegistrationUpdateOne) SetUpdatedAt(t time.Time) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetUpdatedAt(t)
	return vruo
}

// SetUpdatedBy sets the "updated_by" field.
func (vruo *VehicleRegistrationUpdateOne) SetUpdatedBy(i int) *VehicleRegistrationUpdateOne {
	vruo.mutation.ResetUpdatedBy()
	vruo.mutation.SetUpdatedBy(i)
	return vruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vruo *VehicleRegistrationUpdateOne) SetNillableUpdatedBy(i *int) *VehicleRegistrationUpdateOne {
	if i != nil {
		vruo.SetUpdatedBy(*i)
	}
	return vruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vruo *VehicleRegistrationUpdateOne) AddUpdatedBy(i int) *VehicleRegistrationUpdateOne {
	vruo.mutation.AddUpdatedBy(i)
	return vruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vruo *VehicleRegistrationUpdateOne) ClearUpdatedBy() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearUpdatedBy()
	return vruo
}

// SetUpdatedWith sets the "updated_with" field.
func (vruo *VehicleRegistrationUpdateOne) SetUpdatedWith(s string) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetUpdatedWith(s)
	return vruo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vruo *VehicleRegistrationUpdateOne) SetNillableUpdatedWith(s *string) *VehicleRegistrationUpdateOne {
	if s != nil {
		vruo.SetUpdatedWith(*s)
	}
	return vruo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vruo *VehicleRegistrationUpdateOne) ClearUpdatedWith() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearUpdatedWith()
	return vruo
}

// SetPlate sets the "plate" field.
func (vruo *VehicleRegistrationUpdateOne) SetPlate(s string) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetPlate(s)
	return vruo
}

// SetExpiredAt sets the "expired_at" field.
func (vruo *VehicleRegistrationUpdateOne) SetExpiredAt(t time.Time) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetExpiredAt(t)
	return vruo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vruo *VehicleRegistrationUpdateOne) SetMetadataID(id int) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetMetadataID(id)
	return vruo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vruo *VehicleRegistrationUpdateOne) SetNillableMetadataID(id *int) *VehicleRegistrationUpdateOne {
	if id != nil {
		vruo = vruo.SetMetadataID(*id)
	}
	return vruo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vruo *VehicleRegistrationUpdateOne) SetMetadata(m *Metadata) *VehicleRegistrationUpdateOne {
	return vruo.SetMetadataID(m.ID)
}

// SetStateID sets the "state" edge to the State entity by ID.
func (vruo *VehicleRegistrationUpdateOne) SetStateID(id int) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetStateID(id)
	return vruo
}

// SetState sets the "state" edge to the State entity.
func (vruo *VehicleRegistrationUpdateOne) SetState(s *State) *VehicleRegistrationUpdateOne {
	return vruo.SetStateID(s.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (vruo *VehicleRegistrationUpdateOne) SetPersonID(id int) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetPersonID(id)
	return vruo
}

// SetPerson sets the "person" edge to the Person entity.
func (vruo *VehicleRegistrationUpdateOne) SetPerson(p *Person) *VehicleRegistrationUpdateOne {
	return vruo.SetPersonID(p.ID)
}

// SetVehicleID sets the "vehicle" edge to the Vehicle entity by ID.
func (vruo *VehicleRegistrationUpdateOne) SetVehicleID(id int) *VehicleRegistrationUpdateOne {
	vruo.mutation.SetVehicleID(id)
	return vruo
}

// SetVehicle sets the "vehicle" edge to the Vehicle entity.
func (vruo *VehicleRegistrationUpdateOne) SetVehicle(v *Vehicle) *VehicleRegistrationUpdateOne {
	return vruo.SetVehicleID(v.ID)
}

// Mutation returns the VehicleRegistrationMutation object of the builder.
func (vruo *VehicleRegistrationUpdateOne) Mutation() *VehicleRegistrationMutation {
	return vruo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vruo *VehicleRegistrationUpdateOne) ClearMetadata() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearMetadata()
	return vruo
}

// ClearState clears the "state" edge to the State entity.
func (vruo *VehicleRegistrationUpdateOne) ClearState() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearState()
	return vruo
}

// ClearPerson clears the "person" edge to the Person entity.
func (vruo *VehicleRegistrationUpdateOne) ClearPerson() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearPerson()
	return vruo
}

// ClearVehicle clears the "vehicle" edge to the Vehicle entity.
func (vruo *VehicleRegistrationUpdateOne) ClearVehicle() *VehicleRegistrationUpdateOne {
	vruo.mutation.ClearVehicle()
	return vruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VehicleRegistrationUpdateOne) Select(field string, fields ...string) *VehicleRegistrationUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VehicleRegistration entity.
func (vruo *VehicleRegistrationUpdateOne) Save(ctx context.Context) (*VehicleRegistration, error) {
	var (
		err  error
		node *VehicleRegistration
	)
	if err := vruo.defaults(); err != nil {
		return nil, err
	}
	if len(vruo.hooks) == 0 {
		if err = vruo.check(); err != nil {
			return nil, err
		}
		node, err = vruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleRegistrationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vruo.check(); err != nil {
				return nil, err
			}
			vruo.mutation = mutation
			node, err = vruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vruo.hooks) - 1; i >= 0; i-- {
			if vruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VehicleRegistrationUpdateOne) SaveX(ctx context.Context) *VehicleRegistration {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VehicleRegistrationUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VehicleRegistrationUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vruo *VehicleRegistrationUpdateOne) defaults() error {
	if _, ok := vruo.mutation.UpdatedAt(); !ok {
		if vehicleregistration.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicleregistration.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicleregistration.UpdateDefaultUpdatedAt()
		vruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vruo *VehicleRegistrationUpdateOne) check() error {
	if _, ok := vruo.mutation.StateID(); vruo.mutation.StateCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"state\"")
	}
	if _, ok := vruo.mutation.PersonID(); vruo.mutation.PersonCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"person\"")
	}
	if _, ok := vruo.mutation.VehicleID(); vruo.mutation.VehicleCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"vehicle\"")
	}
	return nil
}

func (vruo *VehicleRegistrationUpdateOne) sqlSave(ctx context.Context) (_node *VehicleRegistration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicleregistration.Table,
			Columns: vehicleregistration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleregistration.FieldID,
			},
		},
	}
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VehicleRegistration.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleregistration.FieldID)
		for _, f := range fields {
			if !vehicleregistration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicleregistration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if value, ok := vruo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if vruo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleregistration.FieldCreatedBy,
		})
	}
	if value, ok := vruo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldCreatedWith,
		})
	}
	if vruo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleregistration.FieldCreatedWith,
		})
	}
	if value, ok := vruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedAt,
		})
	}
	if value, ok := vruo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if value, ok := vruo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if vruo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicleregistration.FieldUpdatedBy,
		})
	}
	if value, ok := vruo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldUpdatedWith,
		})
	}
	if vruo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicleregistration.FieldUpdatedWith,
		})
	}
	if value, ok := vruo.mutation.Plate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicleregistration.FieldPlate,
		})
	}
	if value, ok := vruo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicleregistration.FieldExpiredAt,
		})
	}
	if vruo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleregistration.MetadataTable,
			Columns: []string{vehicleregistration.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleregistration.MetadataTable,
			Columns: []string{vehicleregistration.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.StateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.StateTable,
			Columns: []string{vehicleregistration.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: state.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.StateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.StateTable,
			Columns: []string{vehicleregistration.StateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: state.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.PersonTable,
			Columns: []string{vehicleregistration.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.PersonTable,
			Columns: []string{vehicleregistration.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vruo.mutation.VehicleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.VehicleTable,
			Columns: []string{vehicleregistration.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.VehicleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.VehicleTable,
			Columns: []string{vehicleregistration.VehicleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleRegistration{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleregistration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
