// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/setting"
	"github.com/responserms/response/internal/structs"
)

// SettingUpdate is the builder for updating Setting entities.
type SettingUpdate struct {
	config
	hooks    []Hook
	mutation *SettingMutation
}

// Where appends a list predicates to the SettingUpdate builder.
func (su *SettingUpdate) Where(ps ...predicate.Setting) *SettingUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SettingUpdate) SetCreatedBy(i int) *SettingUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCreatedBy(i *int) *SettingUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SettingUpdate) AddCreatedBy(i int) *SettingUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SettingUpdate) ClearCreatedBy() *SettingUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetCreatedWith sets the "created_with" field.
func (su *SettingUpdate) SetCreatedWith(s string) *SettingUpdate {
	su.mutation.SetCreatedWith(s)
	return su
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (su *SettingUpdate) SetNillableCreatedWith(s *string) *SettingUpdate {
	if s != nil {
		su.SetCreatedWith(*s)
	}
	return su
}

// ClearCreatedWith clears the value of the "created_with" field.
func (su *SettingUpdate) ClearCreatedWith() *SettingUpdate {
	su.mutation.ClearCreatedWith()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SettingUpdate) SetUpdatedAt(t time.Time) *SettingUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SettingUpdate) SetUpdatedBy(i int) *SettingUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SettingUpdate) SetNillableUpdatedBy(i *int) *SettingUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SettingUpdate) AddUpdatedBy(i int) *SettingUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SettingUpdate) ClearUpdatedBy() *SettingUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetUpdatedWith sets the "updated_with" field.
func (su *SettingUpdate) SetUpdatedWith(s string) *SettingUpdate {
	su.mutation.SetUpdatedWith(s)
	return su
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (su *SettingUpdate) SetNillableUpdatedWith(s *string) *SettingUpdate {
	if s != nil {
		su.SetUpdatedWith(*s)
	}
	return su
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (su *SettingUpdate) ClearUpdatedWith() *SettingUpdate {
	su.mutation.ClearUpdatedWith()
	return su
}

// SetKey sets the "key" field.
func (su *SettingUpdate) SetKey(s string) *SettingUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetData sets the "data" field.
func (su *SettingUpdate) SetData(sd structs.SettingData) *SettingUpdate {
	su.mutation.SetData(sd)
	return su
}

// SetNillableData sets the "data" field if the given value is not nil.
func (su *SettingUpdate) SetNillableData(sd *structs.SettingData) *SettingUpdate {
	if sd != nil {
		su.SetData(*sd)
	}
	return su
}

// ClearData clears the value of the "data" field.
func (su *SettingUpdate) ClearData() *SettingUpdate {
	su.mutation.ClearData()
	return su
}

// Mutation returns the SettingMutation object of the builder.
func (su *SettingUpdate) Mutation() *SettingMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SettingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SettingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SettingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SettingUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if setting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized setting.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := setting.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *SettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: setting.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldCreatedBy,
		})
	}
	if su.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: setting.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldCreatedWith,
		})
	}
	if su.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: setting.FieldCreatedWith,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: setting.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldUpdatedBy,
		})
	}
	if su.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: setting.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldUpdatedWith,
		})
	}
	if su.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: setting.FieldUpdatedWith,
		})
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldKey,
		})
	}
	if value, ok := su.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: setting.FieldData,
		})
	}
	if su.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: setting.FieldData,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SettingUpdateOne is the builder for updating a single Setting entity.
type SettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SettingUpdateOne) SetCreatedBy(i int) *SettingUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCreatedBy(i *int) *SettingUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SettingUpdateOne) AddCreatedBy(i int) *SettingUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SettingUpdateOne) ClearCreatedBy() *SettingUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetCreatedWith sets the "created_with" field.
func (suo *SettingUpdateOne) SetCreatedWith(s string) *SettingUpdateOne {
	suo.mutation.SetCreatedWith(s)
	return suo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableCreatedWith(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetCreatedWith(*s)
	}
	return suo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (suo *SettingUpdateOne) ClearCreatedWith() *SettingUpdateOne {
	suo.mutation.ClearCreatedWith()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SettingUpdateOne) SetUpdatedAt(t time.Time) *SettingUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SettingUpdateOne) SetUpdatedBy(i int) *SettingUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableUpdatedBy(i *int) *SettingUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SettingUpdateOne) AddUpdatedBy(i int) *SettingUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SettingUpdateOne) ClearUpdatedBy() *SettingUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetUpdatedWith sets the "updated_with" field.
func (suo *SettingUpdateOne) SetUpdatedWith(s string) *SettingUpdateOne {
	suo.mutation.SetUpdatedWith(s)
	return suo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableUpdatedWith(s *string) *SettingUpdateOne {
	if s != nil {
		suo.SetUpdatedWith(*s)
	}
	return suo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (suo *SettingUpdateOne) ClearUpdatedWith() *SettingUpdateOne {
	suo.mutation.ClearUpdatedWith()
	return suo
}

// SetKey sets the "key" field.
func (suo *SettingUpdateOne) SetKey(s string) *SettingUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetData sets the "data" field.
func (suo *SettingUpdateOne) SetData(sd structs.SettingData) *SettingUpdateOne {
	suo.mutation.SetData(sd)
	return suo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (suo *SettingUpdateOne) SetNillableData(sd *structs.SettingData) *SettingUpdateOne {
	if sd != nil {
		suo.SetData(*sd)
	}
	return suo
}

// ClearData clears the value of the "data" field.
func (suo *SettingUpdateOne) ClearData() *SettingUpdateOne {
	suo.mutation.ClearData()
	return suo
}

// Mutation returns the SettingMutation object of the builder.
func (suo *SettingUpdateOne) Mutation() *SettingMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SettingUpdateOne) Select(field string, fields ...string) *SettingUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Setting entity.
func (suo *SettingUpdateOne) Save(ctx context.Context) (*Setting, error) {
	var (
		err  error
		node *Setting
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SettingUpdateOne) SaveX(ctx context.Context) *Setting {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SettingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SettingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SettingUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if setting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized setting.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := setting.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *SettingUpdateOne) sqlSave(ctx context.Context) (_node *Setting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: setting.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Setting.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, setting.FieldID)
		for _, f := range fields {
			if !setting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != setting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldCreatedBy,
		})
	}
	if suo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: setting.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldCreatedWith,
		})
	}
	if suo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: setting.FieldCreatedWith,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: setting.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: setting.FieldUpdatedBy,
		})
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: setting.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldUpdatedWith,
		})
	}
	if suo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: setting.FieldUpdatedWith,
		})
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: setting.FieldKey,
		})
	}
	if value, ok := suo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: setting.FieldData,
		})
	}
	if suo.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: setting.FieldData,
		})
	}
	_node = &Setting{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
