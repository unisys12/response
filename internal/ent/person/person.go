// Code generated by entc, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedWith holds the string denoting the created_with field in the database.
	FieldCreatedWith = "created_with"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedWith holds the string denoting the updated_with field in the database.
	FieldUpdatedWith = "updated_with"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldSuffix holds the string denoting the suffix field in the database.
	FieldSuffix = "suffix"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldBirthplace holds the string denoting the birthplace field in the database.
	FieldBirthplace = "birthplace"
	// FieldDeceasedAt holds the string denoting the deceased_at field in the database.
	FieldDeceasedAt = "deceased_at"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeVehicleRegistrations holds the string denoting the vehicle_registrations edge name in mutations.
	EdgeVehicleRegistrations = "vehicle_registrations"
	// EdgeRace holds the string denoting the race edge name in mutations.
	EdgeRace = "race"
	// EdgeEthnicity holds the string denoting the ethnicity edge name in mutations.
	EdgeEthnicity = "ethnicity"
	// EdgeSex holds the string denoting the sex edge name in mutations.
	EdgeSex = "sex"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeDeathCertificate holds the string denoting the death_certificate edge name in mutations.
	EdgeDeathCertificate = "death_certificate"
	// EdgeCertifiedDeaths holds the string denoting the certified_deaths edge name in mutations.
	EdgeCertifiedDeaths = "certified_deaths"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "persons"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "person_metadata"
	// VehicleRegistrationsTable is the table that holds the vehicle_registrations relation/edge.
	VehicleRegistrationsTable = "vehicle_registrations"
	// VehicleRegistrationsInverseTable is the table name for the VehicleRegistration entity.
	// It exists in this package in order to avoid circular dependency with the "vehicleregistration" package.
	VehicleRegistrationsInverseTable = "vehicle_registrations"
	// VehicleRegistrationsColumn is the table column denoting the vehicle_registrations relation/edge.
	VehicleRegistrationsColumn = "person_vehicle_registrations"
	// RaceTable is the table that holds the race relation/edge.
	RaceTable = "persons"
	// RaceInverseTable is the table name for the Race entity.
	// It exists in this package in order to avoid circular dependency with the "race" package.
	RaceInverseTable = "races"
	// RaceColumn is the table column denoting the race relation/edge.
	RaceColumn = "race_people"
	// EthnicityTable is the table that holds the ethnicity relation/edge.
	EthnicityTable = "persons"
	// EthnicityInverseTable is the table name for the Ethnicity entity.
	// It exists in this package in order to avoid circular dependency with the "ethnicity" package.
	EthnicityInverseTable = "ethnicities"
	// EthnicityColumn is the table column denoting the ethnicity relation/edge.
	EthnicityColumn = "ethnicity_people"
	// SexTable is the table that holds the sex relation/edge.
	SexTable = "persons"
	// SexInverseTable is the table name for the Sex entity.
	// It exists in this package in order to avoid circular dependency with the "sex" package.
	SexInverseTable = "sexes"
	// SexColumn is the table column denoting the sex relation/edge.
	SexColumn = "sex_people"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "persons"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_people"
	// DeathCertificateTable is the table that holds the death_certificate relation/edge.
	DeathCertificateTable = "death_certificates"
	// DeathCertificateInverseTable is the table name for the DeathCertificate entity.
	// It exists in this package in order to avoid circular dependency with the "deathcertificate" package.
	DeathCertificateInverseTable = "death_certificates"
	// DeathCertificateColumn is the table column denoting the death_certificate relation/edge.
	DeathCertificateColumn = "person_death_certificate"
	// CertifiedDeathsTable is the table that holds the certified_deaths relation/edge.
	CertifiedDeathsTable = "death_certificates"
	// CertifiedDeathsInverseTable is the table name for the DeathCertificate entity.
	// It exists in this package in order to avoid circular dependency with the "deathcertificate" package.
	CertifiedDeathsInverseTable = "death_certificates"
	// CertifiedDeathsColumn is the table column denoting the certified_deaths relation/edge.
	CertifiedDeathsColumn = "person_certified_deaths"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldCreatedWith,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldUpdatedWith,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldSuffix,
	FieldDateOfBirth,
	FieldBirthplace,
	FieldDeceasedAt,
	FieldArchivedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "persons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ethnicity_people",
	"person_metadata",
	"race_people",
	"sex_people",
	"user_people",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/responserms/response/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
