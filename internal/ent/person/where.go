// Code generated by entc, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/responserms/response/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedWith applies equality check predicate on the "created_with" field. It's identical to CreatedWithEQ.
func CreatedWith(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedWith applies equality check predicate on the "updated_with" field. It's identical to UpdatedWithEQ.
func UpdatedWith(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// MiddleName applies equality check predicate on the "middle_name" field. It's identical to MiddleNameEQ.
func MiddleName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// Birthplace applies equality check predicate on the "birthplace" field. It's identical to BirthplaceEQ.
func Birthplace(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthplace), v))
	})
}

// DeceasedAt applies equality check predicate on the "deceased_at" field. It's identical to DeceasedAtEQ.
func DeceasedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeceasedAt), v))
	})
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchivedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedWithEQ applies the EQ predicate on the "created_with" field.
func CreatedWithEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithNEQ applies the NEQ predicate on the "created_with" field.
func CreatedWithNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIn applies the In predicate on the "created_with" field.
func CreatedWithIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithNotIn applies the NotIn predicate on the "created_with" field.
func CreatedWithNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithGT applies the GT predicate on the "created_with" field.
func CreatedWithGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithGTE applies the GTE predicate on the "created_with" field.
func CreatedWithGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLT applies the LT predicate on the "created_with" field.
func CreatedWithLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLTE applies the LTE predicate on the "created_with" field.
func CreatedWithLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContains applies the Contains predicate on the "created_with" field.
func CreatedWithContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasPrefix applies the HasPrefix predicate on the "created_with" field.
func CreatedWithHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasSuffix applies the HasSuffix predicate on the "created_with" field.
func CreatedWithHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIsNil applies the IsNil predicate on the "created_with" field.
func CreatedWithIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithNotNil applies the NotNil predicate on the "created_with" field.
func CreatedWithNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithEqualFold applies the EqualFold predicate on the "created_with" field.
func CreatedWithEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContainsFold applies the ContainsFold predicate on the "created_with" field.
func CreatedWithContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedWithEQ applies the EQ predicate on the "updated_with" field.
func UpdatedWithEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithNEQ applies the NEQ predicate on the "updated_with" field.
func UpdatedWithNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIn applies the In predicate on the "updated_with" field.
func UpdatedWithIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithNotIn applies the NotIn predicate on the "updated_with" field.
func UpdatedWithNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithGT applies the GT predicate on the "updated_with" field.
func UpdatedWithGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithGTE applies the GTE predicate on the "updated_with" field.
func UpdatedWithGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLT applies the LT predicate on the "updated_with" field.
func UpdatedWithLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLTE applies the LTE predicate on the "updated_with" field.
func UpdatedWithLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContains applies the Contains predicate on the "updated_with" field.
func UpdatedWithContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasPrefix applies the HasPrefix predicate on the "updated_with" field.
func UpdatedWithHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasSuffix applies the HasSuffix predicate on the "updated_with" field.
func UpdatedWithHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIsNil applies the IsNil predicate on the "updated_with" field.
func UpdatedWithIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithNotNil applies the NotNil predicate on the "updated_with" field.
func UpdatedWithNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithEqualFold applies the EqualFold predicate on the "updated_with" field.
func UpdatedWithEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContainsFold applies the ContainsFold predicate on the "updated_with" field.
func UpdatedWithContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedWith), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstName)))
	})
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstName)))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// MiddleNameEQ applies the EQ predicate on the "middle_name" field.
func MiddleNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameNEQ applies the NEQ predicate on the "middle_name" field.
func MiddleNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiddleName), v))
	})
}

// MiddleNameIn applies the In predicate on the "middle_name" field.
func MiddleNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameNotIn applies the NotIn predicate on the "middle_name" field.
func MiddleNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMiddleName), v...))
	})
}

// MiddleNameGT applies the GT predicate on the "middle_name" field.
func MiddleNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameGTE applies the GTE predicate on the "middle_name" field.
func MiddleNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLT applies the LT predicate on the "middle_name" field.
func MiddleNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiddleName), v))
	})
}

// MiddleNameLTE applies the LTE predicate on the "middle_name" field.
func MiddleNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContains applies the Contains predicate on the "middle_name" field.
func MiddleNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasPrefix applies the HasPrefix predicate on the "middle_name" field.
func MiddleNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameHasSuffix applies the HasSuffix predicate on the "middle_name" field.
func MiddleNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMiddleName), v))
	})
}

// MiddleNameIsNil applies the IsNil predicate on the "middle_name" field.
func MiddleNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMiddleName)))
	})
}

// MiddleNameNotNil applies the NotNil predicate on the "middle_name" field.
func MiddleNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMiddleName)))
	})
}

// MiddleNameEqualFold applies the EqualFold predicate on the "middle_name" field.
func MiddleNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMiddleName), v))
	})
}

// MiddleNameContainsFold applies the ContainsFold predicate on the "middle_name" field.
func MiddleNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMiddleName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastName)))
	})
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastName)))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuffix), v))
	})
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuffix), v...))
	})
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuffix), v...))
	})
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuffix), v))
	})
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuffix), v))
	})
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuffix), v))
	})
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuffix), v))
	})
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuffix), v))
	})
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuffix), v))
	})
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuffix), v))
	})
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuffix)))
	})
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuffix)))
	})
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuffix), v))
	})
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuffix), v))
	})
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateOfBirth), v...))
	})
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateOfBirth), v))
	})
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateOfBirth)))
	})
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateOfBirth)))
	})
}

// BirthplaceEQ applies the EQ predicate on the "birthplace" field.
func BirthplaceEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthplace), v))
	})
}

// BirthplaceNEQ applies the NEQ predicate on the "birthplace" field.
func BirthplaceNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthplace), v))
	})
}

// BirthplaceIn applies the In predicate on the "birthplace" field.
func BirthplaceIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthplace), v...))
	})
}

// BirthplaceNotIn applies the NotIn predicate on the "birthplace" field.
func BirthplaceNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthplace), v...))
	})
}

// BirthplaceGT applies the GT predicate on the "birthplace" field.
func BirthplaceGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthplace), v))
	})
}

// BirthplaceGTE applies the GTE predicate on the "birthplace" field.
func BirthplaceGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthplace), v))
	})
}

// BirthplaceLT applies the LT predicate on the "birthplace" field.
func BirthplaceLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthplace), v))
	})
}

// BirthplaceLTE applies the LTE predicate on the "birthplace" field.
func BirthplaceLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthplace), v))
	})
}

// BirthplaceContains applies the Contains predicate on the "birthplace" field.
func BirthplaceContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBirthplace), v))
	})
}

// BirthplaceHasPrefix applies the HasPrefix predicate on the "birthplace" field.
func BirthplaceHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBirthplace), v))
	})
}

// BirthplaceHasSuffix applies the HasSuffix predicate on the "birthplace" field.
func BirthplaceHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBirthplace), v))
	})
}

// BirthplaceIsNil applies the IsNil predicate on the "birthplace" field.
func BirthplaceIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthplace)))
	})
}

// BirthplaceNotNil applies the NotNil predicate on the "birthplace" field.
func BirthplaceNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthplace)))
	})
}

// BirthplaceEqualFold applies the EqualFold predicate on the "birthplace" field.
func BirthplaceEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBirthplace), v))
	})
}

// BirthplaceContainsFold applies the ContainsFold predicate on the "birthplace" field.
func BirthplaceContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBirthplace), v))
	})
}

// DeceasedAtEQ applies the EQ predicate on the "deceased_at" field.
func DeceasedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtNEQ applies the NEQ predicate on the "deceased_at" field.
func DeceasedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtIn applies the In predicate on the "deceased_at" field.
func DeceasedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeceasedAt), v...))
	})
}

// DeceasedAtNotIn applies the NotIn predicate on the "deceased_at" field.
func DeceasedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeceasedAt), v...))
	})
}

// DeceasedAtGT applies the GT predicate on the "deceased_at" field.
func DeceasedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtGTE applies the GTE predicate on the "deceased_at" field.
func DeceasedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtLT applies the LT predicate on the "deceased_at" field.
func DeceasedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtLTE applies the LTE predicate on the "deceased_at" field.
func DeceasedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeceasedAt), v))
	})
}

// DeceasedAtIsNil applies the IsNil predicate on the "deceased_at" field.
func DeceasedAtIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeceasedAt)))
	})
}

// DeceasedAtNotNil applies the NotNil predicate on the "deceased_at" field.
func DeceasedAtNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeceasedAt)))
	})
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArchivedAt), v...))
	})
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArchivedAt), v...))
	})
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArchivedAt), v))
	})
}

// ArchivedAtIsNil applies the IsNil predicate on the "archived_at" field.
func ArchivedAtIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArchivedAt)))
	})
}

// ArchivedAtNotNil applies the NotNil predicate on the "archived_at" field.
func ArchivedAtNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArchivedAt)))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVehicleRegistrations applies the HasEdge predicate on the "vehicle_registrations" edge.
func HasVehicleRegistrations() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehicleRegistrationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehicleRegistrationsTable, VehicleRegistrationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehicleRegistrationsWith applies the HasEdge predicate on the "vehicle_registrations" edge with a given conditions (other predicates).
func HasVehicleRegistrationsWith(preds ...predicate.VehicleRegistration) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehicleRegistrationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehicleRegistrationsTable, VehicleRegistrationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRace applies the HasEdge predicate on the "race" edge.
func HasRace() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RaceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RaceTable, RaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRaceWith applies the HasEdge predicate on the "race" edge with a given conditions (other predicates).
func HasRaceWith(preds ...predicate.Race) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RaceTable, RaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEthnicity applies the HasEdge predicate on the "ethnicity" edge.
func HasEthnicity() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EthnicityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EthnicityTable, EthnicityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEthnicityWith applies the HasEdge predicate on the "ethnicity" edge with a given conditions (other predicates).
func HasEthnicityWith(preds ...predicate.Ethnicity) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EthnicityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EthnicityTable, EthnicityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSex applies the HasEdge predicate on the "sex" edge.
func HasSex() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SexTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SexTable, SexColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSexWith applies the HasEdge predicate on the "sex" edge with a given conditions (other predicates).
func HasSexWith(preds ...predicate.Sex) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SexInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SexTable, SexColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeathCertificate applies the HasEdge predicate on the "death_certificate" edge.
func HasDeathCertificate() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeathCertificateTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeathCertificateTable, DeathCertificateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeathCertificateWith applies the HasEdge predicate on the "death_certificate" edge with a given conditions (other predicates).
func HasDeathCertificateWith(preds ...predicate.DeathCertificate) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeathCertificateInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DeathCertificateTable, DeathCertificateColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertifiedDeaths applies the HasEdge predicate on the "certified_deaths" edge.
func HasCertifiedDeaths() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifiedDeathsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CertifiedDeathsTable, CertifiedDeathsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifiedDeathsWith applies the HasEdge predicate on the "certified_deaths" edge with a given conditions (other predicates).
func HasCertifiedDeathsWith(preds ...predicate.DeathCertificate) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifiedDeathsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CertifiedDeathsTable, CertifiedDeathsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		p(s.Not())
	})
}
