// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// VehicleCreate is the builder for creating a Vehicle entity.
type VehicleCreate struct {
	config
	mutation *VehicleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vc *VehicleCreate) SetCreatedAt(t time.Time) *VehicleCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCreatedAt(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetCreatedBy sets the "created_by" field.
func (vc *VehicleCreate) SetCreatedBy(i int) *VehicleCreate {
	vc.mutation.SetCreatedBy(i)
	return vc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCreatedBy(i *int) *VehicleCreate {
	if i != nil {
		vc.SetCreatedBy(*i)
	}
	return vc
}

// SetCreatedWith sets the "created_with" field.
func (vc *VehicleCreate) SetCreatedWith(s string) *VehicleCreate {
	vc.mutation.SetCreatedWith(s)
	return vc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableCreatedWith(s *string) *VehicleCreate {
	if s != nil {
		vc.SetCreatedWith(*s)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VehicleCreate) SetUpdatedAt(t time.Time) *VehicleCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableUpdatedAt(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetUpdatedBy sets the "updated_by" field.
func (vc *VehicleCreate) SetUpdatedBy(i int) *VehicleCreate {
	vc.mutation.SetUpdatedBy(i)
	return vc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableUpdatedBy(i *int) *VehicleCreate {
	if i != nil {
		vc.SetUpdatedBy(*i)
	}
	return vc
}

// SetUpdatedWith sets the "updated_with" field.
func (vc *VehicleCreate) SetUpdatedWith(s string) *VehicleCreate {
	vc.mutation.SetUpdatedWith(s)
	return vc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableUpdatedWith(s *string) *VehicleCreate {
	if s != nil {
		vc.SetUpdatedWith(*s)
	}
	return vc
}

// SetVin sets the "vin" field.
func (vc *VehicleCreate) SetVin(s string) *VehicleCreate {
	vc.mutation.SetVin(s)
	return vc
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableVin(s *string) *VehicleCreate {
	if s != nil {
		vc.SetVin(*s)
	}
	return vc
}

// SetStyle sets the "style" field.
func (vc *VehicleCreate) SetStyle(s string) *VehicleCreate {
	vc.mutation.SetStyle(s)
	return vc
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableStyle(s *string) *VehicleCreate {
	if s != nil {
		vc.SetStyle(*s)
	}
	return vc
}

// SetExtraFeatures sets the "extra_features" field.
func (vc *VehicleCreate) SetExtraFeatures(t time.Time) *VehicleCreate {
	vc.mutation.SetExtraFeatures(t)
	return vc
}

// SetNillableExtraFeatures sets the "extra_features" field if the given value is not nil.
func (vc *VehicleCreate) SetNillableExtraFeatures(t *time.Time) *VehicleCreate {
	if t != nil {
		vc.SetExtraFeatures(*t)
	}
	return vc
}

// SetPrivateNotes sets the "private_notes" field.
func (vc *VehicleCreate) SetPrivateNotes(s string) *VehicleCreate {
	vc.mutation.SetPrivateNotes(s)
	return vc
}

// SetNillablePrivateNotes sets the "private_notes" field if the given value is not nil.
func (vc *VehicleCreate) SetNillablePrivateNotes(s *string) *VehicleCreate {
	if s != nil {
		vc.SetPrivateNotes(*s)
	}
	return vc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vc *VehicleCreate) SetMetadataID(id int) *VehicleCreate {
	vc.mutation.SetMetadataID(id)
	return vc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableMetadataID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetMetadataID(*id)
	}
	return vc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vc *VehicleCreate) SetMetadata(m *Metadata) *VehicleCreate {
	return vc.SetMetadataID(m.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the VehicleRegistration entity by IDs.
func (vc *VehicleCreate) AddRegistrationIDs(ids ...int) *VehicleCreate {
	vc.mutation.AddRegistrationIDs(ids...)
	return vc
}

// AddRegistrations adds the "registrations" edges to the VehicleRegistration entity.
func (vc *VehicleCreate) AddRegistrations(v ...*VehicleRegistration) *VehicleCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddRegistrationIDs(ids...)
}

// SetMakeID sets the "make" edge to the VehicleMake entity by ID.
func (vc *VehicleCreate) SetMakeID(id int) *VehicleCreate {
	vc.mutation.SetMakeID(id)
	return vc
}

// SetNillableMakeID sets the "make" edge to the VehicleMake entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableMakeID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetMakeID(*id)
	}
	return vc
}

// SetMake sets the "make" edge to the VehicleMake entity.
func (vc *VehicleCreate) SetMake(v *VehicleMake) *VehicleCreate {
	return vc.SetMakeID(v.ID)
}

// SetModelID sets the "model" edge to the VehicleModel entity by ID.
func (vc *VehicleCreate) SetModelID(id int) *VehicleCreate {
	vc.mutation.SetModelID(id)
	return vc
}

// SetNillableModelID sets the "model" edge to the VehicleModel entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableModelID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetModelID(*id)
	}
	return vc
}

// SetModel sets the "model" edge to the VehicleModel entity.
func (vc *VehicleCreate) SetModel(v *VehicleModel) *VehicleCreate {
	return vc.SetModelID(v.ID)
}

// SetMajorColorID sets the "major_color" edge to the VehicleColor entity by ID.
func (vc *VehicleCreate) SetMajorColorID(id int) *VehicleCreate {
	vc.mutation.SetMajorColorID(id)
	return vc
}

// SetNillableMajorColorID sets the "major_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableMajorColorID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetMajorColorID(*id)
	}
	return vc
}

// SetMajorColor sets the "major_color" edge to the VehicleColor entity.
func (vc *VehicleCreate) SetMajorColor(v *VehicleColor) *VehicleCreate {
	return vc.SetMajorColorID(v.ID)
}

// SetMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID.
func (vc *VehicleCreate) SetMinorColorID(id int) *VehicleCreate {
	vc.mutation.SetMinorColorID(id)
	return vc
}

// SetNillableMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableMinorColorID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetMinorColorID(*id)
	}
	return vc
}

// SetMinorColor sets the "minor_color" edge to the VehicleColor entity.
func (vc *VehicleCreate) SetMinorColor(v *VehicleColor) *VehicleCreate {
	return vc.SetMinorColorID(v.ID)
}

// SetClassID sets the "class" edge to the VehicleClass entity by ID.
func (vc *VehicleCreate) SetClassID(id int) *VehicleCreate {
	vc.mutation.SetClassID(id)
	return vc
}

// SetNillableClassID sets the "class" edge to the VehicleClass entity by ID if the given value is not nil.
func (vc *VehicleCreate) SetNillableClassID(id *int) *VehicleCreate {
	if id != nil {
		vc = vc.SetClassID(*id)
	}
	return vc
}

// SetClass sets the "class" edge to the VehicleClass entity.
func (vc *VehicleCreate) SetClass(v *VehicleClass) *VehicleCreate {
	return vc.SetClassID(v.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vc *VehicleCreate) Mutation() *VehicleMutation {
	return vc.mutation
}

// Save creates the Vehicle in the database.
func (vc *VehicleCreate) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VehicleCreate) SaveX(ctx context.Context) *Vehicle {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VehicleCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VehicleCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VehicleCreate) defaults() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		if vehicle.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicle.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := vehicle.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		if vehicle.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicle.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicle.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VehicleCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (vc *VehicleCreate) sqlSave(ctx context.Context) (*Vehicle, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VehicleCreate) createSpec() (*Vehicle, *sqlgraph.CreateSpec) {
	var (
		_node = &Vehicle{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehicle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		}
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := vc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := vc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := vc.mutation.Vin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldVin,
		})
		_node.Vin = value
	}
	if value, ok := vc.mutation.Style(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldStyle,
		})
		_node.Style = value
	}
	if value, ok := vc.mutation.ExtraFeatures(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldExtraFeatures,
		})
		_node.ExtraFeatures = value
	}
	if value, ok := vc.mutation.PrivateNotes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldPrivateNotes,
		})
		_node.PrivateNotes = value
	}
	if nodes := vc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.MakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemake.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_make_vehicles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_model_vehicles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.MajorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_color_vehicles_major = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.MinorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_color_vehicles_minor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_class_vehicles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vehicle.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vc *VehicleCreate) OnConflict(opts ...sql.ConflictOption) *VehicleUpsertOne {
	vc.conflict = opts
	return &VehicleUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vehicle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vc *VehicleCreate) OnConflictColumns(columns ...string) *VehicleUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VehicleUpsertOne{
		create: vc,
	}
}

type (
	// VehicleUpsertOne is the builder for "upsert"-ing
	//  one Vehicle node.
	VehicleUpsertOne struct {
		create *VehicleCreate
	}

	// VehicleUpsert is the "OnConflict" setter.
	VehicleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *VehicleUpsert) SetCreatedAt(v time.Time) *VehicleUpsert {
	u.Set(vehicle.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateCreatedAt() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleUpsert) SetCreatedBy(v int) *VehicleUpsert {
	u.Set(vehicle.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateCreatedBy() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleUpsert) ClearCreatedBy() *VehicleUpsert {
	u.SetNull(vehicle.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleUpsert) SetCreatedWith(v string) *VehicleUpsert {
	u.Set(vehicle.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateCreatedWith() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleUpsert) ClearCreatedWith() *VehicleUpsert {
	u.SetNull(vehicle.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleUpsert) SetUpdatedAt(v time.Time) *VehicleUpsert {
	u.Set(vehicle.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateUpdatedAt() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleUpsert) SetUpdatedBy(v int) *VehicleUpsert {
	u.Set(vehicle.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateUpdatedBy() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleUpsert) ClearUpdatedBy() *VehicleUpsert {
	u.SetNull(vehicle.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleUpsert) SetUpdatedWith(v string) *VehicleUpsert {
	u.Set(vehicle.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateUpdatedWith() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleUpsert) ClearUpdatedWith() *VehicleUpsert {
	u.SetNull(vehicle.FieldUpdatedWith)
	return u
}

// SetVin sets the "vin" field.
func (u *VehicleUpsert) SetVin(v string) *VehicleUpsert {
	u.Set(vehicle.FieldVin, v)
	return u
}

// UpdateVin sets the "vin" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateVin() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldVin)
	return u
}

// ClearVin clears the value of the "vin" field.
func (u *VehicleUpsert) ClearVin() *VehicleUpsert {
	u.SetNull(vehicle.FieldVin)
	return u
}

// SetStyle sets the "style" field.
func (u *VehicleUpsert) SetStyle(v string) *VehicleUpsert {
	u.Set(vehicle.FieldStyle, v)
	return u
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateStyle() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldStyle)
	return u
}

// ClearStyle clears the value of the "style" field.
func (u *VehicleUpsert) ClearStyle() *VehicleUpsert {
	u.SetNull(vehicle.FieldStyle)
	return u
}

// SetExtraFeatures sets the "extra_features" field.
func (u *VehicleUpsert) SetExtraFeatures(v time.Time) *VehicleUpsert {
	u.Set(vehicle.FieldExtraFeatures, v)
	return u
}

// UpdateExtraFeatures sets the "extra_features" field to the value that was provided on create.
func (u *VehicleUpsert) UpdateExtraFeatures() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldExtraFeatures)
	return u
}

// ClearExtraFeatures clears the value of the "extra_features" field.
func (u *VehicleUpsert) ClearExtraFeatures() *VehicleUpsert {
	u.SetNull(vehicle.FieldExtraFeatures)
	return u
}

// SetPrivateNotes sets the "private_notes" field.
func (u *VehicleUpsert) SetPrivateNotes(v string) *VehicleUpsert {
	u.Set(vehicle.FieldPrivateNotes, v)
	return u
}

// UpdatePrivateNotes sets the "private_notes" field to the value that was provided on create.
func (u *VehicleUpsert) UpdatePrivateNotes() *VehicleUpsert {
	u.SetExcluded(vehicle.FieldPrivateNotes)
	return u
}

// ClearPrivateNotes clears the value of the "private_notes" field.
func (u *VehicleUpsert) ClearPrivateNotes() *VehicleUpsert {
	u.SetNull(vehicle.FieldPrivateNotes)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vehicle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleUpsertOne) UpdateNewValues() *VehicleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Vehicle.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VehicleUpsertOne) Ignore() *VehicleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleUpsertOne) DoNothing() *VehicleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleCreate.OnConflict
// documentation for more info.
func (u *VehicleUpsertOne) Update(set func(*VehicleUpsert)) *VehicleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleUpsertOne) SetCreatedAt(v time.Time) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateCreatedAt() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleUpsertOne) SetCreatedBy(v int) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateCreatedBy() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleUpsertOne) ClearCreatedBy() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleUpsertOne) SetCreatedWith(v string) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateCreatedWith() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleUpsertOne) ClearCreatedWith() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleUpsertOne) SetUpdatedAt(v time.Time) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateUpdatedAt() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleUpsertOne) SetUpdatedBy(v int) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateUpdatedBy() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleUpsertOne) ClearUpdatedBy() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleUpsertOne) SetUpdatedWith(v string) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateUpdatedWith() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleUpsertOne) ClearUpdatedWith() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetVin sets the "vin" field.
func (u *VehicleUpsertOne) SetVin(v string) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetVin(v)
	})
}

// UpdateVin sets the "vin" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateVin() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateVin()
	})
}

// ClearVin clears the value of the "vin" field.
func (u *VehicleUpsertOne) ClearVin() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearVin()
	})
}

// SetStyle sets the "style" field.
func (u *VehicleUpsertOne) SetStyle(v string) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetStyle(v)
	})
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateStyle() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateStyle()
	})
}

// ClearStyle clears the value of the "style" field.
func (u *VehicleUpsertOne) ClearStyle() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearStyle()
	})
}

// SetExtraFeatures sets the "extra_features" field.
func (u *VehicleUpsertOne) SetExtraFeatures(v time.Time) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetExtraFeatures(v)
	})
}

// UpdateExtraFeatures sets the "extra_features" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdateExtraFeatures() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateExtraFeatures()
	})
}

// ClearExtraFeatures clears the value of the "extra_features" field.
func (u *VehicleUpsertOne) ClearExtraFeatures() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearExtraFeatures()
	})
}

// SetPrivateNotes sets the "private_notes" field.
func (u *VehicleUpsertOne) SetPrivateNotes(v string) *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.SetPrivateNotes(v)
	})
}

// UpdatePrivateNotes sets the "private_notes" field to the value that was provided on create.
func (u *VehicleUpsertOne) UpdatePrivateNotes() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdatePrivateNotes()
	})
}

// ClearPrivateNotes clears the value of the "private_notes" field.
func (u *VehicleUpsertOne) ClearPrivateNotes() *VehicleUpsertOne {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearPrivateNotes()
	})
}

// Exec executes the query.
func (u *VehicleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VehicleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VehicleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VehicleCreateBulk is the builder for creating many Vehicle entities in bulk.
type VehicleCreateBulk struct {
	config
	builders []*VehicleCreate
	conflict []sql.ConflictOption
}

// Save creates the Vehicle entities in the database.
func (vcb *VehicleCreateBulk) Save(ctx context.Context) ([]*Vehicle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vehicle, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VehicleCreateBulk) SaveX(ctx context.Context) []*Vehicle {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VehicleCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VehicleCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vehicle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vcb *VehicleCreateBulk) OnConflict(opts ...sql.ConflictOption) *VehicleUpsertBulk {
	vcb.conflict = opts
	return &VehicleUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vehicle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vcb *VehicleCreateBulk) OnConflictColumns(columns ...string) *VehicleUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VehicleUpsertBulk{
		create: vcb,
	}
}

// VehicleUpsertBulk is the builder for "upsert"-ing
// a bulk of Vehicle nodes.
type VehicleUpsertBulk struct {
	create *VehicleCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vehicle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleUpsertBulk) UpdateNewValues() *VehicleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vehicle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *VehicleUpsertBulk) Ignore() *VehicleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleUpsertBulk) DoNothing() *VehicleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleCreateBulk.OnConflict
// documentation for more info.
func (u *VehicleUpsertBulk) Update(set func(*VehicleUpsert)) *VehicleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleUpsertBulk) SetCreatedAt(v time.Time) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateCreatedAt() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleUpsertBulk) SetCreatedBy(v int) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateCreatedBy() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleUpsertBulk) ClearCreatedBy() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleUpsertBulk) SetCreatedWith(v string) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateCreatedWith() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleUpsertBulk) ClearCreatedWith() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleUpsertBulk) SetUpdatedAt(v time.Time) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateUpdatedAt() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleUpsertBulk) SetUpdatedBy(v int) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateUpdatedBy() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleUpsertBulk) ClearUpdatedBy() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleUpsertBulk) SetUpdatedWith(v string) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateUpdatedWith() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleUpsertBulk) ClearUpdatedWith() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetVin sets the "vin" field.
func (u *VehicleUpsertBulk) SetVin(v string) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetVin(v)
	})
}

// UpdateVin sets the "vin" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateVin() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateVin()
	})
}

// ClearVin clears the value of the "vin" field.
func (u *VehicleUpsertBulk) ClearVin() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearVin()
	})
}

// SetStyle sets the "style" field.
func (u *VehicleUpsertBulk) SetStyle(v string) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetStyle(v)
	})
}

// UpdateStyle sets the "style" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateStyle() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateStyle()
	})
}

// ClearStyle clears the value of the "style" field.
func (u *VehicleUpsertBulk) ClearStyle() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearStyle()
	})
}

// SetExtraFeatures sets the "extra_features" field.
func (u *VehicleUpsertBulk) SetExtraFeatures(v time.Time) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetExtraFeatures(v)
	})
}

// UpdateExtraFeatures sets the "extra_features" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdateExtraFeatures() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdateExtraFeatures()
	})
}

// ClearExtraFeatures clears the value of the "extra_features" field.
func (u *VehicleUpsertBulk) ClearExtraFeatures() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearExtraFeatures()
	})
}

// SetPrivateNotes sets the "private_notes" field.
func (u *VehicleUpsertBulk) SetPrivateNotes(v string) *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.SetPrivateNotes(v)
	})
}

// UpdatePrivateNotes sets the "private_notes" field to the value that was provided on create.
func (u *VehicleUpsertBulk) UpdatePrivateNotes() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.UpdatePrivateNotes()
	})
}

// ClearPrivateNotes clears the value of the "private_notes" field.
func (u *VehicleUpsertBulk) ClearPrivateNotes() *VehicleUpsertBulk {
	return u.Update(func(s *VehicleUpsert) {
		s.ClearPrivateNotes()
	})
}

// Exec executes the query.
func (u *VehicleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VehicleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
