// Code generated by entc, DO NOT EDIT.

package deathcertificate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/responserms/response/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedWith applies equality check predicate on the "created_with" field. It's identical to CreatedWithEQ.
func CreatedWith(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedWith applies equality check predicate on the "updated_with" field. It's identical to UpdatedWithEQ.
func UpdatedWith(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// Cause applies equality check predicate on the "cause" field. It's identical to CauseEQ.
func Cause(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCause), v))
	})
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CertifiedAt applies equality check predicate on the "certified_at" field. It's identical to CertifiedAtEQ.
func CertifiedAt(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCertifiedAt), v))
	})
}

// CertifierComments applies equality check predicate on the "certifier_comments" field. It's identical to CertifierCommentsEQ.
func CertifierComments(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCertifierComments), v))
	})
}

// RequiresCertification applies equality check predicate on the "requires_certification" field. It's identical to RequiresCertificationEQ.
func RequiresCertification(v bool) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiresCertification), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedWithEQ applies the EQ predicate on the "created_with" field.
func CreatedWithEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithNEQ applies the NEQ predicate on the "created_with" field.
func CreatedWithNEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIn applies the In predicate on the "created_with" field.
func CreatedWithIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithNotIn applies the NotIn predicate on the "created_with" field.
func CreatedWithNotIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithGT applies the GT predicate on the "created_with" field.
func CreatedWithGT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithGTE applies the GTE predicate on the "created_with" field.
func CreatedWithGTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLT applies the LT predicate on the "created_with" field.
func CreatedWithLT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLTE applies the LTE predicate on the "created_with" field.
func CreatedWithLTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContains applies the Contains predicate on the "created_with" field.
func CreatedWithContains(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasPrefix applies the HasPrefix predicate on the "created_with" field.
func CreatedWithHasPrefix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasSuffix applies the HasSuffix predicate on the "created_with" field.
func CreatedWithHasSuffix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIsNil applies the IsNil predicate on the "created_with" field.
func CreatedWithIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithNotNil applies the NotNil predicate on the "created_with" field.
func CreatedWithNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithEqualFold applies the EqualFold predicate on the "created_with" field.
func CreatedWithEqualFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContainsFold applies the ContainsFold predicate on the "created_with" field.
func CreatedWithContainsFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedWithEQ applies the EQ predicate on the "updated_with" field.
func UpdatedWithEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithNEQ applies the NEQ predicate on the "updated_with" field.
func UpdatedWithNEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIn applies the In predicate on the "updated_with" field.
func UpdatedWithIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithNotIn applies the NotIn predicate on the "updated_with" field.
func UpdatedWithNotIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithGT applies the GT predicate on the "updated_with" field.
func UpdatedWithGT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithGTE applies the GTE predicate on the "updated_with" field.
func UpdatedWithGTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLT applies the LT predicate on the "updated_with" field.
func UpdatedWithLT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLTE applies the LTE predicate on the "updated_with" field.
func UpdatedWithLTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContains applies the Contains predicate on the "updated_with" field.
func UpdatedWithContains(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasPrefix applies the HasPrefix predicate on the "updated_with" field.
func UpdatedWithHasPrefix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasSuffix applies the HasSuffix predicate on the "updated_with" field.
func UpdatedWithHasSuffix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIsNil applies the IsNil predicate on the "updated_with" field.
func UpdatedWithIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithNotNil applies the NotNil predicate on the "updated_with" field.
func UpdatedWithNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithEqualFold applies the EqualFold predicate on the "updated_with" field.
func UpdatedWithEqualFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContainsFold applies the ContainsFold predicate on the "updated_with" field.
func UpdatedWithContainsFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedWith), v))
	})
}

// CauseEQ applies the EQ predicate on the "cause" field.
func CauseEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCause), v))
	})
}

// CauseNEQ applies the NEQ predicate on the "cause" field.
func CauseNEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCause), v))
	})
}

// CauseIn applies the In predicate on the "cause" field.
func CauseIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCause), v...))
	})
}

// CauseNotIn applies the NotIn predicate on the "cause" field.
func CauseNotIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCause), v...))
	})
}

// CauseGT applies the GT predicate on the "cause" field.
func CauseGT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCause), v))
	})
}

// CauseGTE applies the GTE predicate on the "cause" field.
func CauseGTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCause), v))
	})
}

// CauseLT applies the LT predicate on the "cause" field.
func CauseLT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCause), v))
	})
}

// CauseLTE applies the LTE predicate on the "cause" field.
func CauseLTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCause), v))
	})
}

// CauseContains applies the Contains predicate on the "cause" field.
func CauseContains(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCause), v))
	})
}

// CauseHasPrefix applies the HasPrefix predicate on the "cause" field.
func CauseHasPrefix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCause), v))
	})
}

// CauseHasSuffix applies the HasSuffix predicate on the "cause" field.
func CauseHasSuffix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCause), v))
	})
}

// CauseEqualFold applies the EqualFold predicate on the "cause" field.
func CauseEqualFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCause), v))
	})
}

// CauseContainsFold applies the ContainsFold predicate on the "cause" field.
func CauseContainsFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCause), v))
	})
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComments), v))
	})
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComments), v))
	})
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComments), v...))
	})
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComments), v...))
	})
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComments), v))
	})
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComments), v))
	})
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComments), v))
	})
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComments), v))
	})
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComments), v))
	})
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComments), v))
	})
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComments), v))
	})
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComments)))
	})
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComments)))
	})
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComments), v))
	})
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComments), v))
	})
}

// CertifiedAtEQ applies the EQ predicate on the "certified_at" field.
func CertifiedAtEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtNEQ applies the NEQ predicate on the "certified_at" field.
func CertifiedAtNEQ(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtIn applies the In predicate on the "certified_at" field.
func CertifiedAtIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCertifiedAt), v...))
	})
}

// CertifiedAtNotIn applies the NotIn predicate on the "certified_at" field.
func CertifiedAtNotIn(vs ...time.Time) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCertifiedAt), v...))
	})
}

// CertifiedAtGT applies the GT predicate on the "certified_at" field.
func CertifiedAtGT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtGTE applies the GTE predicate on the "certified_at" field.
func CertifiedAtGTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtLT applies the LT predicate on the "certified_at" field.
func CertifiedAtLT(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtLTE applies the LTE predicate on the "certified_at" field.
func CertifiedAtLTE(v time.Time) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCertifiedAt), v))
	})
}

// CertifiedAtIsNil applies the IsNil predicate on the "certified_at" field.
func CertifiedAtIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCertifiedAt)))
	})
}

// CertifiedAtNotNil applies the NotNil predicate on the "certified_at" field.
func CertifiedAtNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCertifiedAt)))
	})
}

// CertifierCommentsEQ applies the EQ predicate on the "certifier_comments" field.
func CertifierCommentsEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsNEQ applies the NEQ predicate on the "certifier_comments" field.
func CertifierCommentsNEQ(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsIn applies the In predicate on the "certifier_comments" field.
func CertifierCommentsIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCertifierComments), v...))
	})
}

// CertifierCommentsNotIn applies the NotIn predicate on the "certifier_comments" field.
func CertifierCommentsNotIn(vs ...string) predicate.DeathCertificate {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeathCertificate(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCertifierComments), v...))
	})
}

// CertifierCommentsGT applies the GT predicate on the "certifier_comments" field.
func CertifierCommentsGT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsGTE applies the GTE predicate on the "certifier_comments" field.
func CertifierCommentsGTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsLT applies the LT predicate on the "certifier_comments" field.
func CertifierCommentsLT(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsLTE applies the LTE predicate on the "certifier_comments" field.
func CertifierCommentsLTE(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsContains applies the Contains predicate on the "certifier_comments" field.
func CertifierCommentsContains(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsHasPrefix applies the HasPrefix predicate on the "certifier_comments" field.
func CertifierCommentsHasPrefix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsHasSuffix applies the HasSuffix predicate on the "certifier_comments" field.
func CertifierCommentsHasSuffix(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsIsNil applies the IsNil predicate on the "certifier_comments" field.
func CertifierCommentsIsNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCertifierComments)))
	})
}

// CertifierCommentsNotNil applies the NotNil predicate on the "certifier_comments" field.
func CertifierCommentsNotNil() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCertifierComments)))
	})
}

// CertifierCommentsEqualFold applies the EqualFold predicate on the "certifier_comments" field.
func CertifierCommentsEqualFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCertifierComments), v))
	})
}

// CertifierCommentsContainsFold applies the ContainsFold predicate on the "certifier_comments" field.
func CertifierCommentsContainsFold(v string) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCertifierComments), v))
	})
}

// RequiresCertificationEQ applies the EQ predicate on the "requires_certification" field.
func RequiresCertificationEQ(v bool) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequiresCertification), v))
	})
}

// RequiresCertificationNEQ applies the NEQ predicate on the "requires_certification" field.
func RequiresCertificationNEQ(v bool) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequiresCertification), v))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDecedent applies the HasEdge predicate on the "decedent" edge.
func HasDecedent() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DecedentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DecedentTable, DecedentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDecedentWith applies the HasEdge predicate on the "decedent" edge with a given conditions (other predicates).
func HasDecedentWith(preds ...predicate.Person) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DecedentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DecedentTable, DecedentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManner applies the HasEdge predicate on the "manner" edge.
func HasManner() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MannerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MannerTable, MannerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMannerWith applies the HasEdge predicate on the "manner" edge with a given conditions (other predicates).
func HasMannerWith(preds ...predicate.DeathManner) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MannerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MannerTable, MannerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlaceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.DeathPlace) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlaceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertifier applies the HasEdge predicate on the "certifier" edge.
func HasCertifier() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifierTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CertifierTable, CertifierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifierWith applies the HasEdge predicate on the "certifier" edge with a given conditions (other predicates).
func HasCertifierWith(preds ...predicate.DeathCertifier) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifierInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CertifierTable, CertifierColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertifiedBy applies the HasEdge predicate on the "certified_by" edge.
func HasCertifiedBy() predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifiedByTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CertifiedByTable, CertifiedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertifiedByWith applies the HasEdge predicate on the "certified_by" edge with a given conditions (other predicates).
func HasCertifiedByWith(preds ...predicate.Person) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CertifiedByInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CertifiedByTable, CertifiedByColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeathCertificate) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeathCertificate) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeathCertificate) predicate.DeathCertificate {
	return predicate.DeathCertificate(func(s *sql.Selector) {
		p(s.Not())
	})
}
