// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehiclemake"
)

// VehicleMakeCreate is the builder for creating a VehicleMake entity.
type VehicleMakeCreate struct {
	config
	mutation *VehicleMakeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vmc *VehicleMakeCreate) SetCreatedAt(t time.Time) *VehicleMakeCreate {
	vmc.mutation.SetCreatedAt(t)
	return vmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableCreatedAt(t *time.Time) *VehicleMakeCreate {
	if t != nil {
		vmc.SetCreatedAt(*t)
	}
	return vmc
}

// SetCreatedBy sets the "created_by" field.
func (vmc *VehicleMakeCreate) SetCreatedBy(i int) *VehicleMakeCreate {
	vmc.mutation.SetCreatedBy(i)
	return vmc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableCreatedBy(i *int) *VehicleMakeCreate {
	if i != nil {
		vmc.SetCreatedBy(*i)
	}
	return vmc
}

// SetCreatedWith sets the "created_with" field.
func (vmc *VehicleMakeCreate) SetCreatedWith(s string) *VehicleMakeCreate {
	vmc.mutation.SetCreatedWith(s)
	return vmc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableCreatedWith(s *string) *VehicleMakeCreate {
	if s != nil {
		vmc.SetCreatedWith(*s)
	}
	return vmc
}

// SetUpdatedAt sets the "updated_at" field.
func (vmc *VehicleMakeCreate) SetUpdatedAt(t time.Time) *VehicleMakeCreate {
	vmc.mutation.SetUpdatedAt(t)
	return vmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableUpdatedAt(t *time.Time) *VehicleMakeCreate {
	if t != nil {
		vmc.SetUpdatedAt(*t)
	}
	return vmc
}

// SetUpdatedBy sets the "updated_by" field.
func (vmc *VehicleMakeCreate) SetUpdatedBy(i int) *VehicleMakeCreate {
	vmc.mutation.SetUpdatedBy(i)
	return vmc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableUpdatedBy(i *int) *VehicleMakeCreate {
	if i != nil {
		vmc.SetUpdatedBy(*i)
	}
	return vmc
}

// SetUpdatedWith sets the "updated_with" field.
func (vmc *VehicleMakeCreate) SetUpdatedWith(s string) *VehicleMakeCreate {
	vmc.mutation.SetUpdatedWith(s)
	return vmc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableUpdatedWith(s *string) *VehicleMakeCreate {
	if s != nil {
		vmc.SetUpdatedWith(*s)
	}
	return vmc
}

// SetShort sets the "short" field.
func (vmc *VehicleMakeCreate) SetShort(s string) *VehicleMakeCreate {
	vmc.mutation.SetShort(s)
	return vmc
}

// SetTitle sets the "title" field.
func (vmc *VehicleMakeCreate) SetTitle(s string) *VehicleMakeCreate {
	vmc.mutation.SetTitle(s)
	return vmc
}

// SetDescription sets the "description" field.
func (vmc *VehicleMakeCreate) SetDescription(s string) *VehicleMakeCreate {
	vmc.mutation.SetDescription(s)
	return vmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vmc *VehicleMakeCreate) SetNillableDescription(s *string) *VehicleMakeCreate {
	if s != nil {
		vmc.SetDescription(*s)
	}
	return vmc
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (vmc *VehicleMakeCreate) AddVehicleIDs(ids ...int) *VehicleMakeCreate {
	vmc.mutation.AddVehicleIDs(ids...)
	return vmc
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (vmc *VehicleMakeCreate) AddVehicles(v ...*Vehicle) *VehicleMakeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmc.AddVehicleIDs(ids...)
}

// Mutation returns the VehicleMakeMutation object of the builder.
func (vmc *VehicleMakeCreate) Mutation() *VehicleMakeMutation {
	return vmc.mutation
}

// Save creates the VehicleMake in the database.
func (vmc *VehicleMakeCreate) Save(ctx context.Context) (*VehicleMake, error) {
	var (
		err  error
		node *VehicleMake
	)
	if err := vmc.defaults(); err != nil {
		return nil, err
	}
	if len(vmc.hooks) == 0 {
		if err = vmc.check(); err != nil {
			return nil, err
		}
		node, err = vmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMakeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vmc.check(); err != nil {
				return nil, err
			}
			vmc.mutation = mutation
			if node, err = vmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vmc.hooks) - 1; i >= 0; i-- {
			if vmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VehicleMakeCreate) SaveX(ctx context.Context) *VehicleMake {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VehicleMakeCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VehicleMakeCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmc *VehicleMakeCreate) defaults() error {
	if _, ok := vmc.mutation.CreatedAt(); !ok {
		if vehiclemake.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclemake.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclemake.DefaultCreatedAt()
		vmc.mutation.SetCreatedAt(v)
	}
	if _, ok := vmc.mutation.UpdatedAt(); !ok {
		if vehiclemake.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclemake.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclemake.DefaultUpdatedAt()
		vmc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VehicleMakeCreate) check() error {
	if _, ok := vmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := vmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := vmc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "short"`)}
	}
	if v, ok := vmc.mutation.Short(); ok {
		if err := vehiclemake.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "short": %w`, err)}
		}
	}
	if _, ok := vmc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := vmc.mutation.Title(); ok {
		if err := vehiclemake.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if v, ok := vmc.mutation.Description(); ok {
		if err := vehiclemake.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "description": %w`, err)}
		}
	}
	return nil
}

func (vmc *VehicleMakeCreate) sqlSave(ctx context.Context) (*VehicleMake, error) {
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vmc *VehicleMakeCreate) createSpec() (*VehicleMake, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleMake{config: vmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehiclemake.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclemake.FieldID,
			},
		}
	)
	_spec.OnConflict = vmc.conflict
	if value, ok := vmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclemake.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vmc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := vmc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := vmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclemake.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vmc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := vmc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := vmc.mutation.Short(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldShort,
		})
		_node.Short = value
	}
	if value, ok := vmc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := vmc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := vmc.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleMake.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleMakeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vmc *VehicleMakeCreate) OnConflict(opts ...sql.ConflictOption) *VehicleMakeUpsertOne {
	vmc.conflict = opts
	return &VehicleMakeUpsertOne{
		create: vmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleMake.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vmc *VehicleMakeCreate) OnConflictColumns(columns ...string) *VehicleMakeUpsertOne {
	vmc.conflict = append(vmc.conflict, sql.ConflictColumns(columns...))
	return &VehicleMakeUpsertOne{
		create: vmc,
	}
}

type (
	// VehicleMakeUpsertOne is the builder for "upsert"-ing
	//  one VehicleMake node.
	VehicleMakeUpsertOne struct {
		create *VehicleMakeCreate
	}

	// VehicleMakeUpsert is the "OnConflict" setter.
	VehicleMakeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *VehicleMakeUpsert) SetCreatedAt(v time.Time) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateCreatedAt() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleMakeUpsert) SetCreatedBy(v int) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateCreatedBy() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleMakeUpsert) ClearCreatedBy() *VehicleMakeUpsert {
	u.SetNull(vehiclemake.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleMakeUpsert) SetCreatedWith(v string) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateCreatedWith() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleMakeUpsert) ClearCreatedWith() *VehicleMakeUpsert {
	u.SetNull(vehiclemake.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleMakeUpsert) SetUpdatedAt(v time.Time) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateUpdatedAt() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleMakeUpsert) SetUpdatedBy(v int) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateUpdatedBy() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleMakeUpsert) ClearUpdatedBy() *VehicleMakeUpsert {
	u.SetNull(vehiclemake.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleMakeUpsert) SetUpdatedWith(v string) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateUpdatedWith() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleMakeUpsert) ClearUpdatedWith() *VehicleMakeUpsert {
	u.SetNull(vehiclemake.FieldUpdatedWith)
	return u
}

// SetShort sets the "short" field.
func (u *VehicleMakeUpsert) SetShort(v string) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateShort() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldShort)
	return u
}

// SetTitle sets the "title" field.
func (u *VehicleMakeUpsert) SetTitle(v string) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateTitle() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *VehicleMakeUpsert) SetDescription(v string) *VehicleMakeUpsert {
	u.Set(vehiclemake.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleMakeUpsert) UpdateDescription() *VehicleMakeUpsert {
	u.SetExcluded(vehiclemake.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleMakeUpsert) ClearDescription() *VehicleMakeUpsert {
	u.SetNull(vehiclemake.FieldDescription)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VehicleMake.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleMakeUpsertOne) UpdateNewValues() *VehicleMakeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.VehicleMake.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VehicleMakeUpsertOne) Ignore() *VehicleMakeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleMakeUpsertOne) DoNothing() *VehicleMakeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleMakeCreate.OnConflict
// documentation for more info.
func (u *VehicleMakeUpsertOne) Update(set func(*VehicleMakeUpsert)) *VehicleMakeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleMakeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleMakeUpsertOne) SetCreatedAt(v time.Time) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateCreatedAt() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleMakeUpsertOne) SetCreatedBy(v int) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateCreatedBy() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleMakeUpsertOne) ClearCreatedBy() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleMakeUpsertOne) SetCreatedWith(v string) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateCreatedWith() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleMakeUpsertOne) ClearCreatedWith() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleMakeUpsertOne) SetUpdatedAt(v time.Time) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateUpdatedAt() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleMakeUpsertOne) SetUpdatedBy(v int) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateUpdatedBy() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleMakeUpsertOne) ClearUpdatedBy() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleMakeUpsertOne) SetUpdatedWith(v string) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateUpdatedWith() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleMakeUpsertOne) ClearUpdatedWith() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *VehicleMakeUpsertOne) SetShort(v string) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateShort() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *VehicleMakeUpsertOne) SetTitle(v string) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateTitle() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VehicleMakeUpsertOne) SetDescription(v string) *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleMakeUpsertOne) UpdateDescription() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleMakeUpsertOne) ClearDescription() *VehicleMakeUpsertOne {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VehicleMakeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleMakeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleMakeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VehicleMakeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VehicleMakeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VehicleMakeCreateBulk is the builder for creating many VehicleMake entities in bulk.
type VehicleMakeCreateBulk struct {
	config
	builders []*VehicleMakeCreate
	conflict []sql.ConflictOption
}

// Save creates the VehicleMake entities in the database.
func (vmcb *VehicleMakeCreateBulk) Save(ctx context.Context) ([]*VehicleMake, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VehicleMake, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleMakeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VehicleMakeCreateBulk) SaveX(ctx context.Context) []*VehicleMake {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VehicleMakeCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VehicleMakeCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleMake.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleMakeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vmcb *VehicleMakeCreateBulk) OnConflict(opts ...sql.ConflictOption) *VehicleMakeUpsertBulk {
	vmcb.conflict = opts
	return &VehicleMakeUpsertBulk{
		create: vmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleMake.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vmcb *VehicleMakeCreateBulk) OnConflictColumns(columns ...string) *VehicleMakeUpsertBulk {
	vmcb.conflict = append(vmcb.conflict, sql.ConflictColumns(columns...))
	return &VehicleMakeUpsertBulk{
		create: vmcb,
	}
}

// VehicleMakeUpsertBulk is the builder for "upsert"-ing
// a bulk of VehicleMake nodes.
type VehicleMakeUpsertBulk struct {
	create *VehicleMakeCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VehicleMake.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleMakeUpsertBulk) UpdateNewValues() *VehicleMakeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleMake.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *VehicleMakeUpsertBulk) Ignore() *VehicleMakeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleMakeUpsertBulk) DoNothing() *VehicleMakeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleMakeCreateBulk.OnConflict
// documentation for more info.
func (u *VehicleMakeUpsertBulk) Update(set func(*VehicleMakeUpsert)) *VehicleMakeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleMakeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleMakeUpsertBulk) SetCreatedAt(v time.Time) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateCreatedAt() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleMakeUpsertBulk) SetCreatedBy(v int) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateCreatedBy() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleMakeUpsertBulk) ClearCreatedBy() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleMakeUpsertBulk) SetCreatedWith(v string) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateCreatedWith() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleMakeUpsertBulk) ClearCreatedWith() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleMakeUpsertBulk) SetUpdatedAt(v time.Time) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateUpdatedAt() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleMakeUpsertBulk) SetUpdatedBy(v int) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateUpdatedBy() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleMakeUpsertBulk) ClearUpdatedBy() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleMakeUpsertBulk) SetUpdatedWith(v string) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateUpdatedWith() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleMakeUpsertBulk) ClearUpdatedWith() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *VehicleMakeUpsertBulk) SetShort(v string) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateShort() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *VehicleMakeUpsertBulk) SetTitle(v string) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateTitle() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VehicleMakeUpsertBulk) SetDescription(v string) *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleMakeUpsertBulk) UpdateDescription() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleMakeUpsertBulk) ClearDescription() *VehicleMakeUpsertBulk {
	return u.Update(func(s *VehicleMakeUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VehicleMakeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VehicleMakeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleMakeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleMakeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
