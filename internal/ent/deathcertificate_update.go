// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
)

// DeathCertificateUpdate is the builder for updating DeathCertificate entities.
type DeathCertificateUpdate struct {
	config
	hooks    []Hook
	mutation *DeathCertificateMutation
}

// Where appends a list predicates to the DeathCertificateUpdate builder.
func (dcu *DeathCertificateUpdate) Where(ps ...predicate.DeathCertificate) *DeathCertificateUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetCreatedBy sets the "created_by" field.
func (dcu *DeathCertificateUpdate) SetCreatedBy(i int) *DeathCertificateUpdate {
	dcu.mutation.ResetCreatedBy()
	dcu.mutation.SetCreatedBy(i)
	return dcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCreatedBy(i *int) *DeathCertificateUpdate {
	if i != nil {
		dcu.SetCreatedBy(*i)
	}
	return dcu
}

// AddCreatedBy adds i to the "created_by" field.
func (dcu *DeathCertificateUpdate) AddCreatedBy(i int) *DeathCertificateUpdate {
	dcu.mutation.AddCreatedBy(i)
	return dcu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dcu *DeathCertificateUpdate) ClearCreatedBy() *DeathCertificateUpdate {
	dcu.mutation.ClearCreatedBy()
	return dcu
}

// SetCreatedWith sets the "created_with" field.
func (dcu *DeathCertificateUpdate) SetCreatedWith(s string) *DeathCertificateUpdate {
	dcu.mutation.SetCreatedWith(s)
	return dcu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCreatedWith(s *string) *DeathCertificateUpdate {
	if s != nil {
		dcu.SetCreatedWith(*s)
	}
	return dcu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dcu *DeathCertificateUpdate) ClearCreatedWith() *DeathCertificateUpdate {
	dcu.mutation.ClearCreatedWith()
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DeathCertificateUpdate) SetUpdatedAt(t time.Time) *DeathCertificateUpdate {
	dcu.mutation.SetUpdatedAt(t)
	return dcu
}

// SetUpdatedBy sets the "updated_by" field.
func (dcu *DeathCertificateUpdate) SetUpdatedBy(i int) *DeathCertificateUpdate {
	dcu.mutation.ResetUpdatedBy()
	dcu.mutation.SetUpdatedBy(i)
	return dcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableUpdatedBy(i *int) *DeathCertificateUpdate {
	if i != nil {
		dcu.SetUpdatedBy(*i)
	}
	return dcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dcu *DeathCertificateUpdate) AddUpdatedBy(i int) *DeathCertificateUpdate {
	dcu.mutation.AddUpdatedBy(i)
	return dcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dcu *DeathCertificateUpdate) ClearUpdatedBy() *DeathCertificateUpdate {
	dcu.mutation.ClearUpdatedBy()
	return dcu
}

// SetUpdatedWith sets the "updated_with" field.
func (dcu *DeathCertificateUpdate) SetUpdatedWith(s string) *DeathCertificateUpdate {
	dcu.mutation.SetUpdatedWith(s)
	return dcu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableUpdatedWith(s *string) *DeathCertificateUpdate {
	if s != nil {
		dcu.SetUpdatedWith(*s)
	}
	return dcu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dcu *DeathCertificateUpdate) ClearUpdatedWith() *DeathCertificateUpdate {
	dcu.mutation.ClearUpdatedWith()
	return dcu
}

// SetCause sets the "cause" field.
func (dcu *DeathCertificateUpdate) SetCause(s string) *DeathCertificateUpdate {
	dcu.mutation.SetCause(s)
	return dcu
}

// SetComments sets the "comments" field.
func (dcu *DeathCertificateUpdate) SetComments(s string) *DeathCertificateUpdate {
	dcu.mutation.SetComments(s)
	return dcu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableComments(s *string) *DeathCertificateUpdate {
	if s != nil {
		dcu.SetComments(*s)
	}
	return dcu
}

// ClearComments clears the value of the "comments" field.
func (dcu *DeathCertificateUpdate) ClearComments() *DeathCertificateUpdate {
	dcu.mutation.ClearComments()
	return dcu
}

// SetCertifiedAt sets the "certified_at" field.
func (dcu *DeathCertificateUpdate) SetCertifiedAt(t time.Time) *DeathCertificateUpdate {
	dcu.mutation.SetCertifiedAt(t)
	return dcu
}

// SetNillableCertifiedAt sets the "certified_at" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCertifiedAt(t *time.Time) *DeathCertificateUpdate {
	if t != nil {
		dcu.SetCertifiedAt(*t)
	}
	return dcu
}

// ClearCertifiedAt clears the value of the "certified_at" field.
func (dcu *DeathCertificateUpdate) ClearCertifiedAt() *DeathCertificateUpdate {
	dcu.mutation.ClearCertifiedAt()
	return dcu
}

// SetCertifierComments sets the "certifier_comments" field.
func (dcu *DeathCertificateUpdate) SetCertifierComments(s string) *DeathCertificateUpdate {
	dcu.mutation.SetCertifierComments(s)
	return dcu
}

// SetNillableCertifierComments sets the "certifier_comments" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCertifierComments(s *string) *DeathCertificateUpdate {
	if s != nil {
		dcu.SetCertifierComments(*s)
	}
	return dcu
}

// ClearCertifierComments clears the value of the "certifier_comments" field.
func (dcu *DeathCertificateUpdate) ClearCertifierComments() *DeathCertificateUpdate {
	dcu.mutation.ClearCertifierComments()
	return dcu
}

// SetRequiresCertification sets the "requires_certification" field.
func (dcu *DeathCertificateUpdate) SetRequiresCertification(b bool) *DeathCertificateUpdate {
	dcu.mutation.SetRequiresCertification(b)
	return dcu
}

// SetNillableRequiresCertification sets the "requires_certification" field if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableRequiresCertification(b *bool) *DeathCertificateUpdate {
	if b != nil {
		dcu.SetRequiresCertification(*b)
	}
	return dcu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dcu *DeathCertificateUpdate) SetMetadataID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetMetadataID(id)
	return dcu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableMetadataID(id *int) *DeathCertificateUpdate {
	if id != nil {
		dcu = dcu.SetMetadataID(*id)
	}
	return dcu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dcu *DeathCertificateUpdate) SetMetadata(m *Metadata) *DeathCertificateUpdate {
	return dcu.SetMetadataID(m.ID)
}

// SetDecedentID sets the "decedent" edge to the Person entity by ID.
func (dcu *DeathCertificateUpdate) SetDecedentID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetDecedentID(id)
	return dcu
}

// SetDecedent sets the "decedent" edge to the Person entity.
func (dcu *DeathCertificateUpdate) SetDecedent(p *Person) *DeathCertificateUpdate {
	return dcu.SetDecedentID(p.ID)
}

// SetMannerID sets the "manner" edge to the DeathManner entity by ID.
func (dcu *DeathCertificateUpdate) SetMannerID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetMannerID(id)
	return dcu
}

// SetNillableMannerID sets the "manner" edge to the DeathManner entity by ID if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableMannerID(id *int) *DeathCertificateUpdate {
	if id != nil {
		dcu = dcu.SetMannerID(*id)
	}
	return dcu
}

// SetManner sets the "manner" edge to the DeathManner entity.
func (dcu *DeathCertificateUpdate) SetManner(d *DeathManner) *DeathCertificateUpdate {
	return dcu.SetMannerID(d.ID)
}

// SetPlaceID sets the "place" edge to the DeathPlace entity by ID.
func (dcu *DeathCertificateUpdate) SetPlaceID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetPlaceID(id)
	return dcu
}

// SetNillablePlaceID sets the "place" edge to the DeathPlace entity by ID if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillablePlaceID(id *int) *DeathCertificateUpdate {
	if id != nil {
		dcu = dcu.SetPlaceID(*id)
	}
	return dcu
}

// SetPlace sets the "place" edge to the DeathPlace entity.
func (dcu *DeathCertificateUpdate) SetPlace(d *DeathPlace) *DeathCertificateUpdate {
	return dcu.SetPlaceID(d.ID)
}

// SetCertifierID sets the "certifier" edge to the DeathCertifier entity by ID.
func (dcu *DeathCertificateUpdate) SetCertifierID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetCertifierID(id)
	return dcu
}

// SetNillableCertifierID sets the "certifier" edge to the DeathCertifier entity by ID if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCertifierID(id *int) *DeathCertificateUpdate {
	if id != nil {
		dcu = dcu.SetCertifierID(*id)
	}
	return dcu
}

// SetCertifier sets the "certifier" edge to the DeathCertifier entity.
func (dcu *DeathCertificateUpdate) SetCertifier(d *DeathCertifier) *DeathCertificateUpdate {
	return dcu.SetCertifierID(d.ID)
}

// SetCertifiedByID sets the "certified_by" edge to the Person entity by ID.
func (dcu *DeathCertificateUpdate) SetCertifiedByID(id int) *DeathCertificateUpdate {
	dcu.mutation.SetCertifiedByID(id)
	return dcu
}

// SetNillableCertifiedByID sets the "certified_by" edge to the Person entity by ID if the given value is not nil.
func (dcu *DeathCertificateUpdate) SetNillableCertifiedByID(id *int) *DeathCertificateUpdate {
	if id != nil {
		dcu = dcu.SetCertifiedByID(*id)
	}
	return dcu
}

// SetCertifiedBy sets the "certified_by" edge to the Person entity.
func (dcu *DeathCertificateUpdate) SetCertifiedBy(p *Person) *DeathCertificateUpdate {
	return dcu.SetCertifiedByID(p.ID)
}

// Mutation returns the DeathCertificateMutation object of the builder.
func (dcu *DeathCertificateUpdate) Mutation() *DeathCertificateMutation {
	return dcu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dcu *DeathCertificateUpdate) ClearMetadata() *DeathCertificateUpdate {
	dcu.mutation.ClearMetadata()
	return dcu
}

// ClearDecedent clears the "decedent" edge to the Person entity.
func (dcu *DeathCertificateUpdate) ClearDecedent() *DeathCertificateUpdate {
	dcu.mutation.ClearDecedent()
	return dcu
}

// ClearManner clears the "manner" edge to the DeathManner entity.
func (dcu *DeathCertificateUpdate) ClearManner() *DeathCertificateUpdate {
	dcu.mutation.ClearManner()
	return dcu
}

// ClearPlace clears the "place" edge to the DeathPlace entity.
func (dcu *DeathCertificateUpdate) ClearPlace() *DeathCertificateUpdate {
	dcu.mutation.ClearPlace()
	return dcu
}

// ClearCertifier clears the "certifier" edge to the DeathCertifier entity.
func (dcu *DeathCertificateUpdate) ClearCertifier() *DeathCertificateUpdate {
	dcu.mutation.ClearCertifier()
	return dcu
}

// ClearCertifiedBy clears the "certified_by" edge to the Person entity.
func (dcu *DeathCertificateUpdate) ClearCertifiedBy() *DeathCertificateUpdate {
	dcu.mutation.ClearCertifiedBy()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeathCertificateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dcu.defaults(); err != nil {
		return 0, err
	}
	if len(dcu.hooks) == 0 {
		if err = dcu.check(); err != nil {
			return 0, err
		}
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcu.check(); err != nil {
				return 0, err
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			if dcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeathCertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeathCertificateUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeathCertificateUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DeathCertificateUpdate) defaults() error {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		if deathcertificate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertificate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertificate.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DeathCertificateUpdate) check() error {
	if _, ok := dcu.mutation.DecedentID(); dcu.mutation.DecedentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"decedent\"")
	}
	return nil
}

func (dcu *DeathCertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathcertificate.Table,
			Columns: deathcertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertificate.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if value, ok := dcu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if dcu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if value, ok := dcu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCreatedWith,
		})
	}
	if dcu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldCreatedWith,
		})
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldUpdatedAt,
		})
	}
	if value, ok := dcu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if value, ok := dcu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if dcu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if value, ok := dcu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldUpdatedWith,
		})
	}
	if dcu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldUpdatedWith,
		})
	}
	if value, ok := dcu.mutation.Cause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCause,
		})
	}
	if value, ok := dcu.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldComments,
		})
	}
	if dcu.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldComments,
		})
	}
	if value, ok := dcu.mutation.CertifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldCertifiedAt,
		})
	}
	if dcu.mutation.CertifiedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deathcertificate.FieldCertifiedAt,
		})
	}
	if value, ok := dcu.mutation.CertifierComments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCertifierComments,
		})
	}
	if dcu.mutation.CertifierCommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldCertifierComments,
		})
	}
	if value, ok := dcu.mutation.RequiresCertification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: deathcertificate.FieldRequiresCertification,
		})
	}
	if dcu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.DecedentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DecedentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.MannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathmanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.MannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathmanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathplace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.CertifierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertifier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CertifierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertifier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.CertifiedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.CertifiedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathcertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeathCertificateUpdateOne is the builder for updating a single DeathCertificate entity.
type DeathCertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeathCertificateMutation
}

// SetCreatedBy sets the "created_by" field.
func (dcuo *DeathCertificateUpdateOne) SetCreatedBy(i int) *DeathCertificateUpdateOne {
	dcuo.mutation.ResetCreatedBy()
	dcuo.mutation.SetCreatedBy(i)
	return dcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCreatedBy(i *int) *DeathCertificateUpdateOne {
	if i != nil {
		dcuo.SetCreatedBy(*i)
	}
	return dcuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dcuo *DeathCertificateUpdateOne) AddCreatedBy(i int) *DeathCertificateUpdateOne {
	dcuo.mutation.AddCreatedBy(i)
	return dcuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dcuo *DeathCertificateUpdateOne) ClearCreatedBy() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCreatedBy()
	return dcuo
}

// SetCreatedWith sets the "created_with" field.
func (dcuo *DeathCertificateUpdateOne) SetCreatedWith(s string) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCreatedWith(s)
	return dcuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCreatedWith(s *string) *DeathCertificateUpdateOne {
	if s != nil {
		dcuo.SetCreatedWith(*s)
	}
	return dcuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dcuo *DeathCertificateUpdateOne) ClearCreatedWith() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCreatedWith()
	return dcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DeathCertificateUpdateOne) SetUpdatedAt(t time.Time) *DeathCertificateUpdateOne {
	dcuo.mutation.SetUpdatedAt(t)
	return dcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dcuo *DeathCertificateUpdateOne) SetUpdatedBy(i int) *DeathCertificateUpdateOne {
	dcuo.mutation.ResetUpdatedBy()
	dcuo.mutation.SetUpdatedBy(i)
	return dcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableUpdatedBy(i *int) *DeathCertificateUpdateOne {
	if i != nil {
		dcuo.SetUpdatedBy(*i)
	}
	return dcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dcuo *DeathCertificateUpdateOne) AddUpdatedBy(i int) *DeathCertificateUpdateOne {
	dcuo.mutation.AddUpdatedBy(i)
	return dcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dcuo *DeathCertificateUpdateOne) ClearUpdatedBy() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearUpdatedBy()
	return dcuo
}

// SetUpdatedWith sets the "updated_with" field.
func (dcuo *DeathCertificateUpdateOne) SetUpdatedWith(s string) *DeathCertificateUpdateOne {
	dcuo.mutation.SetUpdatedWith(s)
	return dcuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableUpdatedWith(s *string) *DeathCertificateUpdateOne {
	if s != nil {
		dcuo.SetUpdatedWith(*s)
	}
	return dcuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dcuo *DeathCertificateUpdateOne) ClearUpdatedWith() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearUpdatedWith()
	return dcuo
}

// SetCause sets the "cause" field.
func (dcuo *DeathCertificateUpdateOne) SetCause(s string) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCause(s)
	return dcuo
}

// SetComments sets the "comments" field.
func (dcuo *DeathCertificateUpdateOne) SetComments(s string) *DeathCertificateUpdateOne {
	dcuo.mutation.SetComments(s)
	return dcuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableComments(s *string) *DeathCertificateUpdateOne {
	if s != nil {
		dcuo.SetComments(*s)
	}
	return dcuo
}

// ClearComments clears the value of the "comments" field.
func (dcuo *DeathCertificateUpdateOne) ClearComments() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearComments()
	return dcuo
}

// SetCertifiedAt sets the "certified_at" field.
func (dcuo *DeathCertificateUpdateOne) SetCertifiedAt(t time.Time) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCertifiedAt(t)
	return dcuo
}

// SetNillableCertifiedAt sets the "certified_at" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCertifiedAt(t *time.Time) *DeathCertificateUpdateOne {
	if t != nil {
		dcuo.SetCertifiedAt(*t)
	}
	return dcuo
}

// ClearCertifiedAt clears the value of the "certified_at" field.
func (dcuo *DeathCertificateUpdateOne) ClearCertifiedAt() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCertifiedAt()
	return dcuo
}

// SetCertifierComments sets the "certifier_comments" field.
func (dcuo *DeathCertificateUpdateOne) SetCertifierComments(s string) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCertifierComments(s)
	return dcuo
}

// SetNillableCertifierComments sets the "certifier_comments" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCertifierComments(s *string) *DeathCertificateUpdateOne {
	if s != nil {
		dcuo.SetCertifierComments(*s)
	}
	return dcuo
}

// ClearCertifierComments clears the value of the "certifier_comments" field.
func (dcuo *DeathCertificateUpdateOne) ClearCertifierComments() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCertifierComments()
	return dcuo
}

// SetRequiresCertification sets the "requires_certification" field.
func (dcuo *DeathCertificateUpdateOne) SetRequiresCertification(b bool) *DeathCertificateUpdateOne {
	dcuo.mutation.SetRequiresCertification(b)
	return dcuo
}

// SetNillableRequiresCertification sets the "requires_certification" field if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableRequiresCertification(b *bool) *DeathCertificateUpdateOne {
	if b != nil {
		dcuo.SetRequiresCertification(*b)
	}
	return dcuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetMetadataID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetMetadataID(id)
	return dcuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableMetadataID(id *int) *DeathCertificateUpdateOne {
	if id != nil {
		dcuo = dcuo.SetMetadataID(*id)
	}
	return dcuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dcuo *DeathCertificateUpdateOne) SetMetadata(m *Metadata) *DeathCertificateUpdateOne {
	return dcuo.SetMetadataID(m.ID)
}

// SetDecedentID sets the "decedent" edge to the Person entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetDecedentID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetDecedentID(id)
	return dcuo
}

// SetDecedent sets the "decedent" edge to the Person entity.
func (dcuo *DeathCertificateUpdateOne) SetDecedent(p *Person) *DeathCertificateUpdateOne {
	return dcuo.SetDecedentID(p.ID)
}

// SetMannerID sets the "manner" edge to the DeathManner entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetMannerID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetMannerID(id)
	return dcuo
}

// SetNillableMannerID sets the "manner" edge to the DeathManner entity by ID if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableMannerID(id *int) *DeathCertificateUpdateOne {
	if id != nil {
		dcuo = dcuo.SetMannerID(*id)
	}
	return dcuo
}

// SetManner sets the "manner" edge to the DeathManner entity.
func (dcuo *DeathCertificateUpdateOne) SetManner(d *DeathManner) *DeathCertificateUpdateOne {
	return dcuo.SetMannerID(d.ID)
}

// SetPlaceID sets the "place" edge to the DeathPlace entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetPlaceID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetPlaceID(id)
	return dcuo
}

// SetNillablePlaceID sets the "place" edge to the DeathPlace entity by ID if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillablePlaceID(id *int) *DeathCertificateUpdateOne {
	if id != nil {
		dcuo = dcuo.SetPlaceID(*id)
	}
	return dcuo
}

// SetPlace sets the "place" edge to the DeathPlace entity.
func (dcuo *DeathCertificateUpdateOne) SetPlace(d *DeathPlace) *DeathCertificateUpdateOne {
	return dcuo.SetPlaceID(d.ID)
}

// SetCertifierID sets the "certifier" edge to the DeathCertifier entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetCertifierID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCertifierID(id)
	return dcuo
}

// SetNillableCertifierID sets the "certifier" edge to the DeathCertifier entity by ID if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCertifierID(id *int) *DeathCertificateUpdateOne {
	if id != nil {
		dcuo = dcuo.SetCertifierID(*id)
	}
	return dcuo
}

// SetCertifier sets the "certifier" edge to the DeathCertifier entity.
func (dcuo *DeathCertificateUpdateOne) SetCertifier(d *DeathCertifier) *DeathCertificateUpdateOne {
	return dcuo.SetCertifierID(d.ID)
}

// SetCertifiedByID sets the "certified_by" edge to the Person entity by ID.
func (dcuo *DeathCertificateUpdateOne) SetCertifiedByID(id int) *DeathCertificateUpdateOne {
	dcuo.mutation.SetCertifiedByID(id)
	return dcuo
}

// SetNillableCertifiedByID sets the "certified_by" edge to the Person entity by ID if the given value is not nil.
func (dcuo *DeathCertificateUpdateOne) SetNillableCertifiedByID(id *int) *DeathCertificateUpdateOne {
	if id != nil {
		dcuo = dcuo.SetCertifiedByID(*id)
	}
	return dcuo
}

// SetCertifiedBy sets the "certified_by" edge to the Person entity.
func (dcuo *DeathCertificateUpdateOne) SetCertifiedBy(p *Person) *DeathCertificateUpdateOne {
	return dcuo.SetCertifiedByID(p.ID)
}

// Mutation returns the DeathCertificateMutation object of the builder.
func (dcuo *DeathCertificateUpdateOne) Mutation() *DeathCertificateMutation {
	return dcuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dcuo *DeathCertificateUpdateOne) ClearMetadata() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearMetadata()
	return dcuo
}

// ClearDecedent clears the "decedent" edge to the Person entity.
func (dcuo *DeathCertificateUpdateOne) ClearDecedent() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearDecedent()
	return dcuo
}

// ClearManner clears the "manner" edge to the DeathManner entity.
func (dcuo *DeathCertificateUpdateOne) ClearManner() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearManner()
	return dcuo
}

// ClearPlace clears the "place" edge to the DeathPlace entity.
func (dcuo *DeathCertificateUpdateOne) ClearPlace() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearPlace()
	return dcuo
}

// ClearCertifier clears the "certifier" edge to the DeathCertifier entity.
func (dcuo *DeathCertificateUpdateOne) ClearCertifier() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCertifier()
	return dcuo
}

// ClearCertifiedBy clears the "certified_by" edge to the Person entity.
func (dcuo *DeathCertificateUpdateOne) ClearCertifiedBy() *DeathCertificateUpdateOne {
	dcuo.mutation.ClearCertifiedBy()
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeathCertificateUpdateOne) Select(field string, fields ...string) *DeathCertificateUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeathCertificate entity.
func (dcuo *DeathCertificateUpdateOne) Save(ctx context.Context) (*DeathCertificate, error) {
	var (
		err  error
		node *DeathCertificate
	)
	if err := dcuo.defaults(); err != nil {
		return nil, err
	}
	if len(dcuo.hooks) == 0 {
		if err = dcuo.check(); err != nil {
			return nil, err
		}
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcuo.check(); err != nil {
				return nil, err
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			if dcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeathCertificateUpdateOne) SaveX(ctx context.Context) *DeathCertificate {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeathCertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeathCertificateUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DeathCertificateUpdateOne) defaults() error {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		if deathcertificate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertificate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertificate.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DeathCertificateUpdateOne) check() error {
	if _, ok := dcuo.mutation.DecedentID(); dcuo.mutation.DecedentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"decedent\"")
	}
	return nil
}

func (dcuo *DeathCertificateUpdateOne) sqlSave(ctx context.Context) (_node *DeathCertificate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathcertificate.Table,
			Columns: deathcertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertificate.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeathCertificate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deathcertificate.FieldID)
		for _, f := range fields {
			if !deathcertificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deathcertificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if value, ok := dcuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if dcuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathcertificate.FieldCreatedBy,
		})
	}
	if value, ok := dcuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCreatedWith,
		})
	}
	if dcuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldCreatedWith,
		})
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldUpdatedAt,
		})
	}
	if value, ok := dcuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if value, ok := dcuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if dcuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathcertificate.FieldUpdatedBy,
		})
	}
	if value, ok := dcuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldUpdatedWith,
		})
	}
	if dcuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldUpdatedWith,
		})
	}
	if value, ok := dcuo.mutation.Cause(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCause,
		})
	}
	if value, ok := dcuo.mutation.Comments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldComments,
		})
	}
	if dcuo.mutation.CommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldComments,
		})
	}
	if value, ok := dcuo.mutation.CertifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldCertifiedAt,
		})
	}
	if dcuo.mutation.CertifiedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deathcertificate.FieldCertifiedAt,
		})
	}
	if value, ok := dcuo.mutation.CertifierComments(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCertifierComments,
		})
	}
	if dcuo.mutation.CertifierCommentsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathcertificate.FieldCertifierComments,
		})
	}
	if value, ok := dcuo.mutation.RequiresCertification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: deathcertificate.FieldRequiresCertification,
		})
	}
	if dcuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.DecedentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DecedentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.MannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathmanner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.MannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathmanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathplace.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.CertifierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertifier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CertifierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertifier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.CertifiedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.CertifiedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeathCertificate{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathcertificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
