// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (dc *DeathCertificate) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := dc.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertificate) Decedent(ctx context.Context) (*Person, error) {
	result, err := dc.Edges.DecedentOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryDecedent().Only(ctx)
	}
	return result, err
}

func (dc *DeathCertificate) Manner(ctx context.Context) (*DeathManner, error) {
	result, err := dc.Edges.MannerOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryManner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertificate) Place(ctx context.Context) (*DeathPlace, error) {
	result, err := dc.Edges.PlaceOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryPlace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertificate) Certifier(ctx context.Context) (*DeathCertifier, error) {
	result, err := dc.Edges.CertifierOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryCertifier().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertificate) CertifiedBy(ctx context.Context) (*Person, error) {
	result, err := dc.Edges.CertifiedByOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryCertifiedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertifier) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := dc.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dc *DeathCertifier) DeathCertificates(ctx context.Context) ([]*DeathCertificate, error) {
	result, err := dc.Edges.DeathCertificatesOrErr()
	if IsNotLoaded(err) {
		result, err = dc.QueryDeathCertificates().All(ctx)
	}
	return result, err
}

func (dm *DeathManner) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := dm.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = dm.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dm *DeathManner) DeathCertificates(ctx context.Context) ([]*DeathCertificate, error) {
	result, err := dm.Edges.DeathCertificatesOrErr()
	if IsNotLoaded(err) {
		result, err = dm.QueryDeathCertificates().All(ctx)
	}
	return result, err
}

func (dp *DeathPlace) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := dp.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = dp.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dp *DeathPlace) DeathCertificates(ctx context.Context) ([]*DeathCertificate, error) {
	result, err := dp.Edges.DeathCertificatesOrErr()
	if IsNotLoaded(err) {
		result, err = dp.QueryDeathCertificates().All(ctx)
	}
	return result, err
}

func (e *Ethnicity) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := e.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Ethnicity) People(ctx context.Context) ([]*Person, error) {
	result, err := e.Edges.PeopleOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryPeople().All(ctx)
	}
	return result, err
}

func (gs *GameServer) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := gs.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = gs.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gs *GameServer) Players(ctx context.Context) ([]*Player, error) {
	result, err := gs.Edges.PlayersOrErr()
	if IsNotLoaded(err) {
		result, err = gs.QueryPlayers().All(ctx)
	}
	return result, err
}

func (oc *OAuthConnection) User(ctx context.Context) (*User, error) {
	result, err := oc.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = oc.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := pe.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) VehicleRegistrations(ctx context.Context) ([]*VehicleRegistration, error) {
	result, err := pe.Edges.VehicleRegistrationsOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryVehicleRegistrations().All(ctx)
	}
	return result, err
}

func (pe *Person) Race(ctx context.Context) (*Race, error) {
	result, err := pe.Edges.RaceOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryRace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) Ethnicity(ctx context.Context) (*Ethnicity, error) {
	result, err := pe.Edges.EthnicityOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryEthnicity().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) Sex(ctx context.Context) (*Sex, error) {
	result, err := pe.Edges.SexOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QuerySex().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) User(ctx context.Context) (*User, error) {
	result, err := pe.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) DeathCertificate(ctx context.Context) (*DeathCertificate, error) {
	result, err := pe.Edges.DeathCertificateOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryDeathCertificate().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Person) CertifiedDeaths(ctx context.Context) ([]*DeathCertificate, error) {
	result, err := pe.Edges.CertifiedDeathsOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryCertifiedDeaths().All(ctx)
	}
	return result, err
}

func (pl *Player) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := pl.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Player) Servers(ctx context.Context) ([]*GameServer, error) {
	result, err := pl.Edges.ServersOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryServers().All(ctx)
	}
	return result, err
}

func (pl *Player) Identifiers(ctx context.Context) ([]*PlayerIdentifier, error) {
	result, err := pl.Edges.IdentifiersOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryIdentifiers().All(ctx)
	}
	return result, err
}

func (pi *PlayerIdentifier) Player(ctx context.Context) (*Player, error) {
	result, err := pi.Edges.PlayerOrErr()
	if IsNotLoaded(err) {
		result, err = pi.QueryPlayer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Race) People(ctx context.Context) ([]*Person, error) {
	result, err := r.Edges.PeopleOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryPeople().All(ctx)
	}
	return result, err
}

func (s *Sex) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := s.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Sex) People(ctx context.Context) ([]*Person, error) {
	result, err := s.Edges.PeopleOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryPeople().All(ctx)
	}
	return result, err
}

func (s *State) VehicleRegistrations(ctx context.Context) ([]*VehicleRegistration, error) {
	result, err := s.Edges.VehicleRegistrationsOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryVehicleRegistrations().All(ctx)
	}
	return result, err
}

func (u *User) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := u.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) OauthConnections(ctx context.Context) ([]*OAuthConnection, error) {
	result, err := u.Edges.OauthConnectionsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryOauthConnections().All(ctx)
	}
	return result, err
}

func (u *User) People(ctx context.Context) ([]*Person, error) {
	result, err := u.Edges.PeopleOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryPeople().All(ctx)
	}
	return result, err
}

func (v *Vehicle) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := v.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (v *Vehicle) Registrations(ctx context.Context) ([]*VehicleRegistration, error) {
	result, err := v.Edges.RegistrationsOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryRegistrations().All(ctx)
	}
	return result, err
}

func (v *Vehicle) Make(ctx context.Context) (*VehicleMake, error) {
	result, err := v.Edges.MakeOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryMake().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (v *Vehicle) Model(ctx context.Context) (*VehicleModel, error) {
	result, err := v.Edges.ModelOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryModel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (v *Vehicle) MajorColor(ctx context.Context) (*VehicleColor, error) {
	result, err := v.Edges.MajorColorOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryMajorColor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (v *Vehicle) MinorColor(ctx context.Context) (*VehicleColor, error) {
	result, err := v.Edges.MinorColorOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryMinorColor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (v *Vehicle) Class(ctx context.Context) (*VehicleClass, error) {
	result, err := v.Edges.ClassOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryClass().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vc *VehicleClass) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := vc.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = vc.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vc *VehicleClass) Vehicles(ctx context.Context) ([]*Vehicle, error) {
	result, err := vc.Edges.VehiclesOrErr()
	if IsNotLoaded(err) {
		result, err = vc.QueryVehicles().All(ctx)
	}
	return result, err
}

func (vc *VehicleColor) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := vc.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = vc.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vc *VehicleColor) VehiclesMajor(ctx context.Context) ([]*Vehicle, error) {
	result, err := vc.Edges.VehiclesMajorOrErr()
	if IsNotLoaded(err) {
		result, err = vc.QueryVehiclesMajor().All(ctx)
	}
	return result, err
}

func (vc *VehicleColor) VehiclesMinor(ctx context.Context) ([]*Vehicle, error) {
	result, err := vc.Edges.VehiclesMinorOrErr()
	if IsNotLoaded(err) {
		result, err = vc.QueryVehiclesMinor().All(ctx)
	}
	return result, err
}

func (vm *VehicleMake) Vehicles(ctx context.Context) ([]*Vehicle, error) {
	result, err := vm.Edges.VehiclesOrErr()
	if IsNotLoaded(err) {
		result, err = vm.QueryVehicles().All(ctx)
	}
	return result, err
}

func (vm *VehicleModel) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := vm.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = vm.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vm *VehicleModel) Vehicles(ctx context.Context) ([]*Vehicle, error) {
	result, err := vm.Edges.VehiclesOrErr()
	if IsNotLoaded(err) {
		result, err = vm.QueryVehicles().All(ctx)
	}
	return result, err
}

func (vr *VehicleRegistration) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := vr.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryMetadata().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vr *VehicleRegistration) State(ctx context.Context) (*State, error) {
	result, err := vr.Edges.StateOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryState().Only(ctx)
	}
	return result, err
}

func (vr *VehicleRegistration) Person(ctx context.Context) (*Person, error) {
	result, err := vr.Edges.PersonOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryPerson().Only(ctx)
	}
	return result, err
}

func (vr *VehicleRegistration) Vehicle(ctx context.Context) (*Vehicle, error) {
	result, err := vr.Edges.VehicleOrErr()
	if IsNotLoaded(err) {
		result, err = vr.QueryVehicle().Only(ctx)
	}
	return result, err
}
