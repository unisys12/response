// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehiclecolor"
)

// VehicleColorUpdate is the builder for updating VehicleColor entities.
type VehicleColorUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleColorMutation
}

// Where appends a list predicates to the VehicleColorUpdate builder.
func (vcu *VehicleColorUpdate) Where(ps ...predicate.VehicleColor) *VehicleColorUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetCreatedBy sets the "created_by" field.
func (vcu *VehicleColorUpdate) SetCreatedBy(i int) *VehicleColorUpdate {
	vcu.mutation.ResetCreatedBy()
	vcu.mutation.SetCreatedBy(i)
	return vcu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableCreatedBy(i *int) *VehicleColorUpdate {
	if i != nil {
		vcu.SetCreatedBy(*i)
	}
	return vcu
}

// AddCreatedBy adds i to the "created_by" field.
func (vcu *VehicleColorUpdate) AddCreatedBy(i int) *VehicleColorUpdate {
	vcu.mutation.AddCreatedBy(i)
	return vcu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vcu *VehicleColorUpdate) ClearCreatedBy() *VehicleColorUpdate {
	vcu.mutation.ClearCreatedBy()
	return vcu
}

// SetCreatedWith sets the "created_with" field.
func (vcu *VehicleColorUpdate) SetCreatedWith(s string) *VehicleColorUpdate {
	vcu.mutation.SetCreatedWith(s)
	return vcu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableCreatedWith(s *string) *VehicleColorUpdate {
	if s != nil {
		vcu.SetCreatedWith(*s)
	}
	return vcu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vcu *VehicleColorUpdate) ClearCreatedWith() *VehicleColorUpdate {
	vcu.mutation.ClearCreatedWith()
	return vcu
}

// SetUpdatedAt sets the "updated_at" field.
func (vcu *VehicleColorUpdate) SetUpdatedAt(t time.Time) *VehicleColorUpdate {
	vcu.mutation.SetUpdatedAt(t)
	return vcu
}

// SetUpdatedBy sets the "updated_by" field.
func (vcu *VehicleColorUpdate) SetUpdatedBy(i int) *VehicleColorUpdate {
	vcu.mutation.ResetUpdatedBy()
	vcu.mutation.SetUpdatedBy(i)
	return vcu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableUpdatedBy(i *int) *VehicleColorUpdate {
	if i != nil {
		vcu.SetUpdatedBy(*i)
	}
	return vcu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vcu *VehicleColorUpdate) AddUpdatedBy(i int) *VehicleColorUpdate {
	vcu.mutation.AddUpdatedBy(i)
	return vcu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vcu *VehicleColorUpdate) ClearUpdatedBy() *VehicleColorUpdate {
	vcu.mutation.ClearUpdatedBy()
	return vcu
}

// SetUpdatedWith sets the "updated_with" field.
func (vcu *VehicleColorUpdate) SetUpdatedWith(s string) *VehicleColorUpdate {
	vcu.mutation.SetUpdatedWith(s)
	return vcu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableUpdatedWith(s *string) *VehicleColorUpdate {
	if s != nil {
		vcu.SetUpdatedWith(*s)
	}
	return vcu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vcu *VehicleColorUpdate) ClearUpdatedWith() *VehicleColorUpdate {
	vcu.mutation.ClearUpdatedWith()
	return vcu
}

// SetShort sets the "short" field.
func (vcu *VehicleColorUpdate) SetShort(s string) *VehicleColorUpdate {
	vcu.mutation.SetShort(s)
	return vcu
}

// SetTitle sets the "title" field.
func (vcu *VehicleColorUpdate) SetTitle(s string) *VehicleColorUpdate {
	vcu.mutation.SetTitle(s)
	return vcu
}

// SetDescription sets the "description" field.
func (vcu *VehicleColorUpdate) SetDescription(s string) *VehicleColorUpdate {
	vcu.mutation.SetDescription(s)
	return vcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableDescription(s *string) *VehicleColorUpdate {
	if s != nil {
		vcu.SetDescription(*s)
	}
	return vcu
}

// ClearDescription clears the value of the "description" field.
func (vcu *VehicleColorUpdate) ClearDescription() *VehicleColorUpdate {
	vcu.mutation.ClearDescription()
	return vcu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vcu *VehicleColorUpdate) SetMetadataID(id int) *VehicleColorUpdate {
	vcu.mutation.SetMetadataID(id)
	return vcu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vcu *VehicleColorUpdate) SetNillableMetadataID(id *int) *VehicleColorUpdate {
	if id != nil {
		vcu = vcu.SetMetadataID(*id)
	}
	return vcu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vcu *VehicleColorUpdate) SetMetadata(m *Metadata) *VehicleColorUpdate {
	return vcu.SetMetadataID(m.ID)
}

// AddVehiclesMajorIDs adds the "vehicles_major" edge to the Vehicle entity by IDs.
func (vcu *VehicleColorUpdate) AddVehiclesMajorIDs(ids ...int) *VehicleColorUpdate {
	vcu.mutation.AddVehiclesMajorIDs(ids...)
	return vcu
}

// AddVehiclesMajor adds the "vehicles_major" edges to the Vehicle entity.
func (vcu *VehicleColorUpdate) AddVehiclesMajor(v ...*Vehicle) *VehicleColorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.AddVehiclesMajorIDs(ids...)
}

// AddVehiclesMinorIDs adds the "vehicles_minor" edge to the Vehicle entity by IDs.
func (vcu *VehicleColorUpdate) AddVehiclesMinorIDs(ids ...int) *VehicleColorUpdate {
	vcu.mutation.AddVehiclesMinorIDs(ids...)
	return vcu
}

// AddVehiclesMinor adds the "vehicles_minor" edges to the Vehicle entity.
func (vcu *VehicleColorUpdate) AddVehiclesMinor(v ...*Vehicle) *VehicleColorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.AddVehiclesMinorIDs(ids...)
}

// Mutation returns the VehicleColorMutation object of the builder.
func (vcu *VehicleColorUpdate) Mutation() *VehicleColorMutation {
	return vcu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vcu *VehicleColorUpdate) ClearMetadata() *VehicleColorUpdate {
	vcu.mutation.ClearMetadata()
	return vcu
}

// ClearVehiclesMajor clears all "vehicles_major" edges to the Vehicle entity.
func (vcu *VehicleColorUpdate) ClearVehiclesMajor() *VehicleColorUpdate {
	vcu.mutation.ClearVehiclesMajor()
	return vcu
}

// RemoveVehiclesMajorIDs removes the "vehicles_major" edge to Vehicle entities by IDs.
func (vcu *VehicleColorUpdate) RemoveVehiclesMajorIDs(ids ...int) *VehicleColorUpdate {
	vcu.mutation.RemoveVehiclesMajorIDs(ids...)
	return vcu
}

// RemoveVehiclesMajor removes "vehicles_major" edges to Vehicle entities.
func (vcu *VehicleColorUpdate) RemoveVehiclesMajor(v ...*Vehicle) *VehicleColorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.RemoveVehiclesMajorIDs(ids...)
}

// ClearVehiclesMinor clears all "vehicles_minor" edges to the Vehicle entity.
func (vcu *VehicleColorUpdate) ClearVehiclesMinor() *VehicleColorUpdate {
	vcu.mutation.ClearVehiclesMinor()
	return vcu
}

// RemoveVehiclesMinorIDs removes the "vehicles_minor" edge to Vehicle entities by IDs.
func (vcu *VehicleColorUpdate) RemoveVehiclesMinorIDs(ids ...int) *VehicleColorUpdate {
	vcu.mutation.RemoveVehiclesMinorIDs(ids...)
	return vcu
}

// RemoveVehiclesMinor removes "vehicles_minor" edges to Vehicle entities.
func (vcu *VehicleColorUpdate) RemoveVehiclesMinor(v ...*Vehicle) *VehicleColorUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcu.RemoveVehiclesMinorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VehicleColorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := vcu.defaults(); err != nil {
		return 0, err
	}
	if len(vcu.hooks) == 0 {
		if err = vcu.check(); err != nil {
			return 0, err
		}
		affected, err = vcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vcu.check(); err != nil {
				return 0, err
			}
			vcu.mutation = mutation
			affected, err = vcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vcu.hooks) - 1; i >= 0; i-- {
			if vcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VehicleColorUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VehicleColorUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VehicleColorUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcu *VehicleColorUpdate) defaults() error {
	if _, ok := vcu.mutation.UpdatedAt(); !ok {
		if vehiclecolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclecolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclecolor.UpdateDefaultUpdatedAt()
		vcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vcu *VehicleColorUpdate) check() error {
	if v, ok := vcu.mutation.Short(); ok {
		if err := vehiclecolor.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vcu.mutation.Title(); ok {
		if err := vehiclecolor.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vcu.mutation.Description(); ok {
		if err := vehiclecolor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vcu *VehicleColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclecolor.Table,
			Columns: vehiclecolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclecolor.FieldID,
			},
		},
	}
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if value, ok := vcu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if vcu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if value, ok := vcu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldCreatedWith,
		})
	}
	if vcu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldCreatedWith,
		})
	}
	if value, ok := vcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedAt,
		})
	}
	if value, ok := vcu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if value, ok := vcu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if vcu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if value, ok := vcu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedWith,
		})
	}
	if vcu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldUpdatedWith,
		})
	}
	if value, ok := vcu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldShort,
		})
	}
	if value, ok := vcu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldTitle,
		})
	}
	if value, ok := vcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldDescription,
		})
	}
	if vcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldDescription,
		})
	}
	if vcu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcu.mutation.VehiclesMajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.RemovedVehiclesMajorIDs(); len(nodes) > 0 && !vcu.mutation.VehiclesMajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.VehiclesMajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcu.mutation.VehiclesMinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.RemovedVehiclesMinorIDs(); len(nodes) > 0 && !vcu.mutation.VehiclesMinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.VehiclesMinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclecolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleColorUpdateOne is the builder for updating a single VehicleColor entity.
type VehicleColorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleColorMutation
}

// SetCreatedBy sets the "created_by" field.
func (vcuo *VehicleColorUpdateOne) SetCreatedBy(i int) *VehicleColorUpdateOne {
	vcuo.mutation.ResetCreatedBy()
	vcuo.mutation.SetCreatedBy(i)
	return vcuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableCreatedBy(i *int) *VehicleColorUpdateOne {
	if i != nil {
		vcuo.SetCreatedBy(*i)
	}
	return vcuo
}

// AddCreatedBy adds i to the "created_by" field.
func (vcuo *VehicleColorUpdateOne) AddCreatedBy(i int) *VehicleColorUpdateOne {
	vcuo.mutation.AddCreatedBy(i)
	return vcuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vcuo *VehicleColorUpdateOne) ClearCreatedBy() *VehicleColorUpdateOne {
	vcuo.mutation.ClearCreatedBy()
	return vcuo
}

// SetCreatedWith sets the "created_with" field.
func (vcuo *VehicleColorUpdateOne) SetCreatedWith(s string) *VehicleColorUpdateOne {
	vcuo.mutation.SetCreatedWith(s)
	return vcuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableCreatedWith(s *string) *VehicleColorUpdateOne {
	if s != nil {
		vcuo.SetCreatedWith(*s)
	}
	return vcuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vcuo *VehicleColorUpdateOne) ClearCreatedWith() *VehicleColorUpdateOne {
	vcuo.mutation.ClearCreatedWith()
	return vcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vcuo *VehicleColorUpdateOne) SetUpdatedAt(t time.Time) *VehicleColorUpdateOne {
	vcuo.mutation.SetUpdatedAt(t)
	return vcuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vcuo *VehicleColorUpdateOne) SetUpdatedBy(i int) *VehicleColorUpdateOne {
	vcuo.mutation.ResetUpdatedBy()
	vcuo.mutation.SetUpdatedBy(i)
	return vcuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableUpdatedBy(i *int) *VehicleColorUpdateOne {
	if i != nil {
		vcuo.SetUpdatedBy(*i)
	}
	return vcuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vcuo *VehicleColorUpdateOne) AddUpdatedBy(i int) *VehicleColorUpdateOne {
	vcuo.mutation.AddUpdatedBy(i)
	return vcuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vcuo *VehicleColorUpdateOne) ClearUpdatedBy() *VehicleColorUpdateOne {
	vcuo.mutation.ClearUpdatedBy()
	return vcuo
}

// SetUpdatedWith sets the "updated_with" field.
func (vcuo *VehicleColorUpdateOne) SetUpdatedWith(s string) *VehicleColorUpdateOne {
	vcuo.mutation.SetUpdatedWith(s)
	return vcuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableUpdatedWith(s *string) *VehicleColorUpdateOne {
	if s != nil {
		vcuo.SetUpdatedWith(*s)
	}
	return vcuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vcuo *VehicleColorUpdateOne) ClearUpdatedWith() *VehicleColorUpdateOne {
	vcuo.mutation.ClearUpdatedWith()
	return vcuo
}

// SetShort sets the "short" field.
func (vcuo *VehicleColorUpdateOne) SetShort(s string) *VehicleColorUpdateOne {
	vcuo.mutation.SetShort(s)
	return vcuo
}

// SetTitle sets the "title" field.
func (vcuo *VehicleColorUpdateOne) SetTitle(s string) *VehicleColorUpdateOne {
	vcuo.mutation.SetTitle(s)
	return vcuo
}

// SetDescription sets the "description" field.
func (vcuo *VehicleColorUpdateOne) SetDescription(s string) *VehicleColorUpdateOne {
	vcuo.mutation.SetDescription(s)
	return vcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableDescription(s *string) *VehicleColorUpdateOne {
	if s != nil {
		vcuo.SetDescription(*s)
	}
	return vcuo
}

// ClearDescription clears the value of the "description" field.
func (vcuo *VehicleColorUpdateOne) ClearDescription() *VehicleColorUpdateOne {
	vcuo.mutation.ClearDescription()
	return vcuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vcuo *VehicleColorUpdateOne) SetMetadataID(id int) *VehicleColorUpdateOne {
	vcuo.mutation.SetMetadataID(id)
	return vcuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vcuo *VehicleColorUpdateOne) SetNillableMetadataID(id *int) *VehicleColorUpdateOne {
	if id != nil {
		vcuo = vcuo.SetMetadataID(*id)
	}
	return vcuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vcuo *VehicleColorUpdateOne) SetMetadata(m *Metadata) *VehicleColorUpdateOne {
	return vcuo.SetMetadataID(m.ID)
}

// AddVehiclesMajorIDs adds the "vehicles_major" edge to the Vehicle entity by IDs.
func (vcuo *VehicleColorUpdateOne) AddVehiclesMajorIDs(ids ...int) *VehicleColorUpdateOne {
	vcuo.mutation.AddVehiclesMajorIDs(ids...)
	return vcuo
}

// AddVehiclesMajor adds the "vehicles_major" edges to the Vehicle entity.
func (vcuo *VehicleColorUpdateOne) AddVehiclesMajor(v ...*Vehicle) *VehicleColorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.AddVehiclesMajorIDs(ids...)
}

// AddVehiclesMinorIDs adds the "vehicles_minor" edge to the Vehicle entity by IDs.
func (vcuo *VehicleColorUpdateOne) AddVehiclesMinorIDs(ids ...int) *VehicleColorUpdateOne {
	vcuo.mutation.AddVehiclesMinorIDs(ids...)
	return vcuo
}

// AddVehiclesMinor adds the "vehicles_minor" edges to the Vehicle entity.
func (vcuo *VehicleColorUpdateOne) AddVehiclesMinor(v ...*Vehicle) *VehicleColorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.AddVehiclesMinorIDs(ids...)
}

// Mutation returns the VehicleColorMutation object of the builder.
func (vcuo *VehicleColorUpdateOne) Mutation() *VehicleColorMutation {
	return vcuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vcuo *VehicleColorUpdateOne) ClearMetadata() *VehicleColorUpdateOne {
	vcuo.mutation.ClearMetadata()
	return vcuo
}

// ClearVehiclesMajor clears all "vehicles_major" edges to the Vehicle entity.
func (vcuo *VehicleColorUpdateOne) ClearVehiclesMajor() *VehicleColorUpdateOne {
	vcuo.mutation.ClearVehiclesMajor()
	return vcuo
}

// RemoveVehiclesMajorIDs removes the "vehicles_major" edge to Vehicle entities by IDs.
func (vcuo *VehicleColorUpdateOne) RemoveVehiclesMajorIDs(ids ...int) *VehicleColorUpdateOne {
	vcuo.mutation.RemoveVehiclesMajorIDs(ids...)
	return vcuo
}

// RemoveVehiclesMajor removes "vehicles_major" edges to Vehicle entities.
func (vcuo *VehicleColorUpdateOne) RemoveVehiclesMajor(v ...*Vehicle) *VehicleColorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.RemoveVehiclesMajorIDs(ids...)
}

// ClearVehiclesMinor clears all "vehicles_minor" edges to the Vehicle entity.
func (vcuo *VehicleColorUpdateOne) ClearVehiclesMinor() *VehicleColorUpdateOne {
	vcuo.mutation.ClearVehiclesMinor()
	return vcuo
}

// RemoveVehiclesMinorIDs removes the "vehicles_minor" edge to Vehicle entities by IDs.
func (vcuo *VehicleColorUpdateOne) RemoveVehiclesMinorIDs(ids ...int) *VehicleColorUpdateOne {
	vcuo.mutation.RemoveVehiclesMinorIDs(ids...)
	return vcuo
}

// RemoveVehiclesMinor removes "vehicles_minor" edges to Vehicle entities.
func (vcuo *VehicleColorUpdateOne) RemoveVehiclesMinor(v ...*Vehicle) *VehicleColorUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcuo.RemoveVehiclesMinorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VehicleColorUpdateOne) Select(field string, fields ...string) *VehicleColorUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VehicleColor entity.
func (vcuo *VehicleColorUpdateOne) Save(ctx context.Context) (*VehicleColor, error) {
	var (
		err  error
		node *VehicleColor
	)
	if err := vcuo.defaults(); err != nil {
		return nil, err
	}
	if len(vcuo.hooks) == 0 {
		if err = vcuo.check(); err != nil {
			return nil, err
		}
		node, err = vcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vcuo.check(); err != nil {
				return nil, err
			}
			vcuo.mutation = mutation
			node, err = vcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vcuo.hooks) - 1; i >= 0; i-- {
			if vcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VehicleColorUpdateOne) SaveX(ctx context.Context) *VehicleColor {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VehicleColorUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VehicleColorUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcuo *VehicleColorUpdateOne) defaults() error {
	if _, ok := vcuo.mutation.UpdatedAt(); !ok {
		if vehiclecolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclecolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclecolor.UpdateDefaultUpdatedAt()
		vcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vcuo *VehicleColorUpdateOne) check() error {
	if v, ok := vcuo.mutation.Short(); ok {
		if err := vehiclecolor.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vcuo.mutation.Title(); ok {
		if err := vehiclecolor.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vcuo.mutation.Description(); ok {
		if err := vehiclecolor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vcuo *VehicleColorUpdateOne) sqlSave(ctx context.Context) (_node *VehicleColor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclecolor.Table,
			Columns: vehiclecolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclecolor.FieldID,
			},
		},
	}
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VehicleColor.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehiclecolor.FieldID)
		for _, f := range fields {
			if !vehiclecolor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehiclecolor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if value, ok := vcuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if vcuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclecolor.FieldCreatedBy,
		})
	}
	if value, ok := vcuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldCreatedWith,
		})
	}
	if vcuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldCreatedWith,
		})
	}
	if value, ok := vcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedAt,
		})
	}
	if value, ok := vcuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if value, ok := vcuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if vcuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclecolor.FieldUpdatedBy,
		})
	}
	if value, ok := vcuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedWith,
		})
	}
	if vcuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldUpdatedWith,
		})
	}
	if value, ok := vcuo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldShort,
		})
	}
	if value, ok := vcuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldTitle,
		})
	}
	if value, ok := vcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldDescription,
		})
	}
	if vcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclecolor.FieldDescription,
		})
	}
	if vcuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcuo.mutation.VehiclesMajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.RemovedVehiclesMajorIDs(); len(nodes) > 0 && !vcuo.mutation.VehiclesMajorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.VehiclesMajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vcuo.mutation.VehiclesMinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.RemovedVehiclesMinorIDs(); len(nodes) > 0 && !vcuo.mutation.VehiclesMinorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.VehiclesMinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleColor{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclecolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
