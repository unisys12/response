// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/player"
	"github.com/responserms/response/internal/ent/predicate"
)

// GameServerUpdate is the builder for updating GameServer entities.
type GameServerUpdate struct {
	config
	hooks    []Hook
	mutation *GameServerMutation
}

// Where appends a list predicates to the GameServerUpdate builder.
func (gsu *GameServerUpdate) Where(ps ...predicate.GameServer) *GameServerUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetCreatedBy sets the "created_by" field.
func (gsu *GameServerUpdate) SetCreatedBy(i int) *GameServerUpdate {
	gsu.mutation.ResetCreatedBy()
	gsu.mutation.SetCreatedBy(i)
	return gsu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableCreatedBy(i *int) *GameServerUpdate {
	if i != nil {
		gsu.SetCreatedBy(*i)
	}
	return gsu
}

// AddCreatedBy adds i to the "created_by" field.
func (gsu *GameServerUpdate) AddCreatedBy(i int) *GameServerUpdate {
	gsu.mutation.AddCreatedBy(i)
	return gsu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gsu *GameServerUpdate) ClearCreatedBy() *GameServerUpdate {
	gsu.mutation.ClearCreatedBy()
	return gsu
}

// SetCreatedWith sets the "created_with" field.
func (gsu *GameServerUpdate) SetCreatedWith(s string) *GameServerUpdate {
	gsu.mutation.SetCreatedWith(s)
	return gsu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableCreatedWith(s *string) *GameServerUpdate {
	if s != nil {
		gsu.SetCreatedWith(*s)
	}
	return gsu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (gsu *GameServerUpdate) ClearCreatedWith() *GameServerUpdate {
	gsu.mutation.ClearCreatedWith()
	return gsu
}

// SetUpdatedAt sets the "updated_at" field.
func (gsu *GameServerUpdate) SetUpdatedAt(t time.Time) *GameServerUpdate {
	gsu.mutation.SetUpdatedAt(t)
	return gsu
}

// SetUpdatedBy sets the "updated_by" field.
func (gsu *GameServerUpdate) SetUpdatedBy(i int) *GameServerUpdate {
	gsu.mutation.ResetUpdatedBy()
	gsu.mutation.SetUpdatedBy(i)
	return gsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableUpdatedBy(i *int) *GameServerUpdate {
	if i != nil {
		gsu.SetUpdatedBy(*i)
	}
	return gsu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (gsu *GameServerUpdate) AddUpdatedBy(i int) *GameServerUpdate {
	gsu.mutation.AddUpdatedBy(i)
	return gsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gsu *GameServerUpdate) ClearUpdatedBy() *GameServerUpdate {
	gsu.mutation.ClearUpdatedBy()
	return gsu
}

// SetUpdatedWith sets the "updated_with" field.
func (gsu *GameServerUpdate) SetUpdatedWith(s string) *GameServerUpdate {
	gsu.mutation.SetUpdatedWith(s)
	return gsu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableUpdatedWith(s *string) *GameServerUpdate {
	if s != nil {
		gsu.SetUpdatedWith(*s)
	}
	return gsu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (gsu *GameServerUpdate) ClearUpdatedWith() *GameServerUpdate {
	gsu.mutation.ClearUpdatedWith()
	return gsu
}

// SetName sets the "name" field.
func (gsu *GameServerUpdate) SetName(s string) *GameServerUpdate {
	gsu.mutation.SetName(s)
	return gsu
}

// SetDescription sets the "description" field.
func (gsu *GameServerUpdate) SetDescription(s string) *GameServerUpdate {
	gsu.mutation.SetDescription(s)
	return gsu
}

// SetSecret sets the "secret" field.
func (gsu *GameServerUpdate) SetSecret(s string) *GameServerUpdate {
	gsu.mutation.SetSecret(s)
	return gsu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableSecret(s *string) *GameServerUpdate {
	if s != nil {
		gsu.SetSecret(*s)
	}
	return gsu
}

// ClearSecret clears the value of the "secret" field.
func (gsu *GameServerUpdate) ClearSecret() *GameServerUpdate {
	gsu.mutation.ClearSecret()
	return gsu
}

// SetIPAddress sets the "ip_address" field.
func (gsu *GameServerUpdate) SetIPAddress(s string) *GameServerUpdate {
	gsu.mutation.SetIPAddress(s)
	return gsu
}

// SetMonitoring sets the "monitoring" field.
func (gsu *GameServerUpdate) SetMonitoring(b bool) *GameServerUpdate {
	gsu.mutation.SetMonitoring(b)
	return gsu
}

// SetNillableMonitoring sets the "monitoring" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableMonitoring(b *bool) *GameServerUpdate {
	if b != nil {
		gsu.SetMonitoring(*b)
	}
	return gsu
}

// ClearMonitoring clears the value of the "monitoring" field.
func (gsu *GameServerUpdate) ClearMonitoring() *GameServerUpdate {
	gsu.mutation.ClearMonitoring()
	return gsu
}

// SetDisabledAt sets the "disabled_at" field.
func (gsu *GameServerUpdate) SetDisabledAt(t time.Time) *GameServerUpdate {
	gsu.mutation.SetDisabledAt(t)
	return gsu
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableDisabledAt(t *time.Time) *GameServerUpdate {
	if t != nil {
		gsu.SetDisabledAt(*t)
	}
	return gsu
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (gsu *GameServerUpdate) ClearDisabledAt() *GameServerUpdate {
	gsu.mutation.ClearDisabledAt()
	return gsu
}

// SetLastContactAt sets the "last_contact_at" field.
func (gsu *GameServerUpdate) SetLastContactAt(t time.Time) *GameServerUpdate {
	gsu.mutation.SetLastContactAt(t)
	return gsu
}

// SetNillableLastContactAt sets the "last_contact_at" field if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableLastContactAt(t *time.Time) *GameServerUpdate {
	if t != nil {
		gsu.SetLastContactAt(*t)
	}
	return gsu
}

// ClearLastContactAt clears the value of the "last_contact_at" field.
func (gsu *GameServerUpdate) ClearLastContactAt() *GameServerUpdate {
	gsu.mutation.ClearLastContactAt()
	return gsu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (gsu *GameServerUpdate) SetMetadataID(id int) *GameServerUpdate {
	gsu.mutation.SetMetadataID(id)
	return gsu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (gsu *GameServerUpdate) SetNillableMetadataID(id *int) *GameServerUpdate {
	if id != nil {
		gsu = gsu.SetMetadataID(*id)
	}
	return gsu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (gsu *GameServerUpdate) SetMetadata(m *Metadata) *GameServerUpdate {
	return gsu.SetMetadataID(m.ID)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (gsu *GameServerUpdate) AddPlayerIDs(ids ...int) *GameServerUpdate {
	gsu.mutation.AddPlayerIDs(ids...)
	return gsu
}

// AddPlayers adds the "players" edges to the Player entity.
func (gsu *GameServerUpdate) AddPlayers(p ...*Player) *GameServerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsu.AddPlayerIDs(ids...)
}

// Mutation returns the GameServerMutation object of the builder.
func (gsu *GameServerUpdate) Mutation() *GameServerMutation {
	return gsu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (gsu *GameServerUpdate) ClearMetadata() *GameServerUpdate {
	gsu.mutation.ClearMetadata()
	return gsu
}

// ClearPlayers clears all "players" edges to the Player entity.
func (gsu *GameServerUpdate) ClearPlayers() *GameServerUpdate {
	gsu.mutation.ClearPlayers()
	return gsu
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (gsu *GameServerUpdate) RemovePlayerIDs(ids ...int) *GameServerUpdate {
	gsu.mutation.RemovePlayerIDs(ids...)
	return gsu
}

// RemovePlayers removes "players" edges to Player entities.
func (gsu *GameServerUpdate) RemovePlayers(p ...*Player) *GameServerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsu.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GameServerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gsu.defaults(); err != nil {
		return 0, err
	}
	if len(gsu.hooks) == 0 {
		if err = gsu.check(); err != nil {
			return 0, err
		}
		affected, err = gsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsu.check(); err != nil {
				return 0, err
			}
			gsu.mutation = mutation
			affected, err = gsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsu.hooks) - 1; i >= 0; i-- {
			if gsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GameServerUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GameServerUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GameServerUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsu *GameServerUpdate) defaults() error {
	if _, ok := gsu.mutation.UpdatedAt(); !ok {
		if gameserver.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gameserver.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gameserver.UpdateDefaultUpdatedAt()
		gsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsu *GameServerUpdate) check() error {
	if v, ok := gsu.mutation.Name(); ok {
		if err := gameserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gsu *GameServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameserver.Table,
			Columns: gameserver.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameserver.FieldID,
			},
		},
	}
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if value, ok := gsu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if gsu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if value, ok := gsu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldCreatedWith,
		})
	}
	if gsu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldCreatedWith,
		})
	}
	if value, ok := gsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldUpdatedAt,
		})
	}
	if value, ok := gsu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if value, ok := gsu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if gsu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if value, ok := gsu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldUpdatedWith,
		})
	}
	if gsu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldUpdatedWith,
		})
	}
	if value, ok := gsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldName,
		})
	}
	if value, ok := gsu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldDescription,
		})
	}
	if value, ok := gsu.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldSecret,
		})
	}
	if gsu.mutation.SecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldSecret,
		})
	}
	if value, ok := gsu.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldIPAddress,
		})
	}
	if value, ok := gsu.mutation.Monitoring(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: gameserver.FieldMonitoring,
		})
	}
	if gsu.mutation.MonitoringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: gameserver.FieldMonitoring,
		})
	}
	if value, ok := gsu.mutation.DisabledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldDisabledAt,
		})
	}
	if gsu.mutation.DisabledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: gameserver.FieldDisabledAt,
		})
	}
	if value, ok := gsu.mutation.LastContactAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldLastContactAt,
		})
	}
	if gsu.mutation.LastContactAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: gameserver.FieldLastContactAt,
		})
	}
	if gsu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !gsu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsu.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GameServerUpdateOne is the builder for updating a single GameServer entity.
type GameServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameServerMutation
}

// SetCreatedBy sets the "created_by" field.
func (gsuo *GameServerUpdateOne) SetCreatedBy(i int) *GameServerUpdateOne {
	gsuo.mutation.ResetCreatedBy()
	gsuo.mutation.SetCreatedBy(i)
	return gsuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableCreatedBy(i *int) *GameServerUpdateOne {
	if i != nil {
		gsuo.SetCreatedBy(*i)
	}
	return gsuo
}

// AddCreatedBy adds i to the "created_by" field.
func (gsuo *GameServerUpdateOne) AddCreatedBy(i int) *GameServerUpdateOne {
	gsuo.mutation.AddCreatedBy(i)
	return gsuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (gsuo *GameServerUpdateOne) ClearCreatedBy() *GameServerUpdateOne {
	gsuo.mutation.ClearCreatedBy()
	return gsuo
}

// SetCreatedWith sets the "created_with" field.
func (gsuo *GameServerUpdateOne) SetCreatedWith(s string) *GameServerUpdateOne {
	gsuo.mutation.SetCreatedWith(s)
	return gsuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableCreatedWith(s *string) *GameServerUpdateOne {
	if s != nil {
		gsuo.SetCreatedWith(*s)
	}
	return gsuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (gsuo *GameServerUpdateOne) ClearCreatedWith() *GameServerUpdateOne {
	gsuo.mutation.ClearCreatedWith()
	return gsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gsuo *GameServerUpdateOne) SetUpdatedAt(t time.Time) *GameServerUpdateOne {
	gsuo.mutation.SetUpdatedAt(t)
	return gsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (gsuo *GameServerUpdateOne) SetUpdatedBy(i int) *GameServerUpdateOne {
	gsuo.mutation.ResetUpdatedBy()
	gsuo.mutation.SetUpdatedBy(i)
	return gsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableUpdatedBy(i *int) *GameServerUpdateOne {
	if i != nil {
		gsuo.SetUpdatedBy(*i)
	}
	return gsuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (gsuo *GameServerUpdateOne) AddUpdatedBy(i int) *GameServerUpdateOne {
	gsuo.mutation.AddUpdatedBy(i)
	return gsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gsuo *GameServerUpdateOne) ClearUpdatedBy() *GameServerUpdateOne {
	gsuo.mutation.ClearUpdatedBy()
	return gsuo
}

// SetUpdatedWith sets the "updated_with" field.
func (gsuo *GameServerUpdateOne) SetUpdatedWith(s string) *GameServerUpdateOne {
	gsuo.mutation.SetUpdatedWith(s)
	return gsuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableUpdatedWith(s *string) *GameServerUpdateOne {
	if s != nil {
		gsuo.SetUpdatedWith(*s)
	}
	return gsuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (gsuo *GameServerUpdateOne) ClearUpdatedWith() *GameServerUpdateOne {
	gsuo.mutation.ClearUpdatedWith()
	return gsuo
}

// SetName sets the "name" field.
func (gsuo *GameServerUpdateOne) SetName(s string) *GameServerUpdateOne {
	gsuo.mutation.SetName(s)
	return gsuo
}

// SetDescription sets the "description" field.
func (gsuo *GameServerUpdateOne) SetDescription(s string) *GameServerUpdateOne {
	gsuo.mutation.SetDescription(s)
	return gsuo
}

// SetSecret sets the "secret" field.
func (gsuo *GameServerUpdateOne) SetSecret(s string) *GameServerUpdateOne {
	gsuo.mutation.SetSecret(s)
	return gsuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableSecret(s *string) *GameServerUpdateOne {
	if s != nil {
		gsuo.SetSecret(*s)
	}
	return gsuo
}

// ClearSecret clears the value of the "secret" field.
func (gsuo *GameServerUpdateOne) ClearSecret() *GameServerUpdateOne {
	gsuo.mutation.ClearSecret()
	return gsuo
}

// SetIPAddress sets the "ip_address" field.
func (gsuo *GameServerUpdateOne) SetIPAddress(s string) *GameServerUpdateOne {
	gsuo.mutation.SetIPAddress(s)
	return gsuo
}

// SetMonitoring sets the "monitoring" field.
func (gsuo *GameServerUpdateOne) SetMonitoring(b bool) *GameServerUpdateOne {
	gsuo.mutation.SetMonitoring(b)
	return gsuo
}

// SetNillableMonitoring sets the "monitoring" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableMonitoring(b *bool) *GameServerUpdateOne {
	if b != nil {
		gsuo.SetMonitoring(*b)
	}
	return gsuo
}

// ClearMonitoring clears the value of the "monitoring" field.
func (gsuo *GameServerUpdateOne) ClearMonitoring() *GameServerUpdateOne {
	gsuo.mutation.ClearMonitoring()
	return gsuo
}

// SetDisabledAt sets the "disabled_at" field.
func (gsuo *GameServerUpdateOne) SetDisabledAt(t time.Time) *GameServerUpdateOne {
	gsuo.mutation.SetDisabledAt(t)
	return gsuo
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableDisabledAt(t *time.Time) *GameServerUpdateOne {
	if t != nil {
		gsuo.SetDisabledAt(*t)
	}
	return gsuo
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (gsuo *GameServerUpdateOne) ClearDisabledAt() *GameServerUpdateOne {
	gsuo.mutation.ClearDisabledAt()
	return gsuo
}

// SetLastContactAt sets the "last_contact_at" field.
func (gsuo *GameServerUpdateOne) SetLastContactAt(t time.Time) *GameServerUpdateOne {
	gsuo.mutation.SetLastContactAt(t)
	return gsuo
}

// SetNillableLastContactAt sets the "last_contact_at" field if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableLastContactAt(t *time.Time) *GameServerUpdateOne {
	if t != nil {
		gsuo.SetLastContactAt(*t)
	}
	return gsuo
}

// ClearLastContactAt clears the value of the "last_contact_at" field.
func (gsuo *GameServerUpdateOne) ClearLastContactAt() *GameServerUpdateOne {
	gsuo.mutation.ClearLastContactAt()
	return gsuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (gsuo *GameServerUpdateOne) SetMetadataID(id int) *GameServerUpdateOne {
	gsuo.mutation.SetMetadataID(id)
	return gsuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (gsuo *GameServerUpdateOne) SetNillableMetadataID(id *int) *GameServerUpdateOne {
	if id != nil {
		gsuo = gsuo.SetMetadataID(*id)
	}
	return gsuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (gsuo *GameServerUpdateOne) SetMetadata(m *Metadata) *GameServerUpdateOne {
	return gsuo.SetMetadataID(m.ID)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (gsuo *GameServerUpdateOne) AddPlayerIDs(ids ...int) *GameServerUpdateOne {
	gsuo.mutation.AddPlayerIDs(ids...)
	return gsuo
}

// AddPlayers adds the "players" edges to the Player entity.
func (gsuo *GameServerUpdateOne) AddPlayers(p ...*Player) *GameServerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsuo.AddPlayerIDs(ids...)
}

// Mutation returns the GameServerMutation object of the builder.
func (gsuo *GameServerUpdateOne) Mutation() *GameServerMutation {
	return gsuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (gsuo *GameServerUpdateOne) ClearMetadata() *GameServerUpdateOne {
	gsuo.mutation.ClearMetadata()
	return gsuo
}

// ClearPlayers clears all "players" edges to the Player entity.
func (gsuo *GameServerUpdateOne) ClearPlayers() *GameServerUpdateOne {
	gsuo.mutation.ClearPlayers()
	return gsuo
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (gsuo *GameServerUpdateOne) RemovePlayerIDs(ids ...int) *GameServerUpdateOne {
	gsuo.mutation.RemovePlayerIDs(ids...)
	return gsuo
}

// RemovePlayers removes "players" edges to Player entities.
func (gsuo *GameServerUpdateOne) RemovePlayers(p ...*Player) *GameServerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsuo.RemovePlayerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GameServerUpdateOne) Select(field string, fields ...string) *GameServerUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GameServer entity.
func (gsuo *GameServerUpdateOne) Save(ctx context.Context) (*GameServer, error) {
	var (
		err  error
		node *GameServer
	)
	if err := gsuo.defaults(); err != nil {
		return nil, err
	}
	if len(gsuo.hooks) == 0 {
		if err = gsuo.check(); err != nil {
			return nil, err
		}
		node, err = gsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsuo.check(); err != nil {
				return nil, err
			}
			gsuo.mutation = mutation
			node, err = gsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsuo.hooks) - 1; i >= 0; i-- {
			if gsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GameServerUpdateOne) SaveX(ctx context.Context) *GameServer {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GameServerUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GameServerUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsuo *GameServerUpdateOne) defaults() error {
	if _, ok := gsuo.mutation.UpdatedAt(); !ok {
		if gameserver.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gameserver.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gameserver.UpdateDefaultUpdatedAt()
		gsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsuo *GameServerUpdateOne) check() error {
	if v, ok := gsuo.mutation.Name(); ok {
		if err := gameserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gsuo *GameServerUpdateOne) sqlSave(ctx context.Context) (_node *GameServer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameserver.Table,
			Columns: gameserver.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameserver.FieldID,
			},
		},
	}
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GameServer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameserver.FieldID)
		for _, f := range fields {
			if !gameserver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gameserver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if value, ok := gsuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if gsuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: gameserver.FieldCreatedBy,
		})
	}
	if value, ok := gsuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldCreatedWith,
		})
	}
	if gsuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldCreatedWith,
		})
	}
	if value, ok := gsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldUpdatedAt,
		})
	}
	if value, ok := gsuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if value, ok := gsuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if gsuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: gameserver.FieldUpdatedBy,
		})
	}
	if value, ok := gsuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldUpdatedWith,
		})
	}
	if gsuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldUpdatedWith,
		})
	}
	if value, ok := gsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldName,
		})
	}
	if value, ok := gsuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldDescription,
		})
	}
	if value, ok := gsuo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldSecret,
		})
	}
	if gsuo.mutation.SecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: gameserver.FieldSecret,
		})
	}
	if value, ok := gsuo.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldIPAddress,
		})
	}
	if value, ok := gsuo.mutation.Monitoring(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: gameserver.FieldMonitoring,
		})
	}
	if gsuo.mutation.MonitoringCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: gameserver.FieldMonitoring,
		})
	}
	if value, ok := gsuo.mutation.DisabledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldDisabledAt,
		})
	}
	if gsuo.mutation.DisabledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: gameserver.FieldDisabledAt,
		})
	}
	if value, ok := gsuo.mutation.LastContactAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldLastContactAt,
		})
	}
	if gsuo.mutation.LastContactAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: gameserver.FieldLastContactAt,
		})
	}
	if gsuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gsuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !gsuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gsuo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameServer{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
