// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/sex"
)

// SexUpdate is the builder for updating Sex entities.
type SexUpdate struct {
	config
	hooks    []Hook
	mutation *SexMutation
}

// Where appends a list predicates to the SexUpdate builder.
func (su *SexUpdate) Where(ps ...predicate.Sex) *SexUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *SexUpdate) SetCreatedBy(i int) *SexUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *SexUpdate) SetNillableCreatedBy(i *int) *SexUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *SexUpdate) AddCreatedBy(i int) *SexUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *SexUpdate) ClearCreatedBy() *SexUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetCreatedWith sets the "created_with" field.
func (su *SexUpdate) SetCreatedWith(s string) *SexUpdate {
	su.mutation.SetCreatedWith(s)
	return su
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (su *SexUpdate) SetNillableCreatedWith(s *string) *SexUpdate {
	if s != nil {
		su.SetCreatedWith(*s)
	}
	return su
}

// ClearCreatedWith clears the value of the "created_with" field.
func (su *SexUpdate) ClearCreatedWith() *SexUpdate {
	su.mutation.ClearCreatedWith()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SexUpdate) SetUpdatedAt(t time.Time) *SexUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SexUpdate) SetUpdatedBy(i int) *SexUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SexUpdate) SetNillableUpdatedBy(i *int) *SexUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *SexUpdate) AddUpdatedBy(i int) *SexUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SexUpdate) ClearUpdatedBy() *SexUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetUpdatedWith sets the "updated_with" field.
func (su *SexUpdate) SetUpdatedWith(s string) *SexUpdate {
	su.mutation.SetUpdatedWith(s)
	return su
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (su *SexUpdate) SetNillableUpdatedWith(s *string) *SexUpdate {
	if s != nil {
		su.SetUpdatedWith(*s)
	}
	return su
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (su *SexUpdate) ClearUpdatedWith() *SexUpdate {
	su.mutation.ClearUpdatedWith()
	return su
}

// SetShort sets the "short" field.
func (su *SexUpdate) SetShort(s string) *SexUpdate {
	su.mutation.SetShort(s)
	return su
}

// SetTitle sets the "title" field.
func (su *SexUpdate) SetTitle(s string) *SexUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SexUpdate) SetDescription(s string) *SexUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SexUpdate) SetNillableDescription(s *string) *SexUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SexUpdate) ClearDescription() *SexUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (su *SexUpdate) SetMetadataID(id int) *SexUpdate {
	su.mutation.SetMetadataID(id)
	return su
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (su *SexUpdate) SetNillableMetadataID(id *int) *SexUpdate {
	if id != nil {
		su = su.SetMetadataID(*id)
	}
	return su
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (su *SexUpdate) SetMetadata(m *Metadata) *SexUpdate {
	return su.SetMetadataID(m.ID)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (su *SexUpdate) AddPersonIDs(ids ...int) *SexUpdate {
	su.mutation.AddPersonIDs(ids...)
	return su
}

// AddPeople adds the "people" edges to the Person entity.
func (su *SexUpdate) AddPeople(p ...*Person) *SexUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPersonIDs(ids...)
}

// Mutation returns the SexMutation object of the builder.
func (su *SexUpdate) Mutation() *SexMutation {
	return su.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (su *SexUpdate) ClearMetadata() *SexUpdate {
	su.mutation.ClearMetadata()
	return su
}

// ClearPeople clears all "people" edges to the Person entity.
func (su *SexUpdate) ClearPeople() *SexUpdate {
	su.mutation.ClearPeople()
	return su
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (su *SexUpdate) RemovePersonIDs(ids ...int) *SexUpdate {
	su.mutation.RemovePersonIDs(ids...)
	return su
}

// RemovePeople removes "people" edges to Person entities.
func (su *SexUpdate) RemovePeople(p ...*Person) *SexUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SexUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SexUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SexUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SexUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SexUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if sex.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sex.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sex.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SexUpdate) check() error {
	if v, ok := su.mutation.Short(); ok {
		if err := sex.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := sex.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := sex.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (su *SexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sex.Table,
			Columns: sex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sex.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldCreatedBy,
		})
	}
	if su.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: sex.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldCreatedWith,
		})
	}
	if su.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldCreatedWith,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sex.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldUpdatedBy,
		})
	}
	if su.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: sex.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldUpdatedWith,
		})
	}
	if su.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldUpdatedWith,
		})
	}
	if value, ok := su.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldShort,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldTitle,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldDescription,
		})
	}
	if su.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sex.MetadataTable,
			Columns: []string{sex.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sex.MetadataTable,
			Columns: []string{sex.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !su.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SexUpdateOne is the builder for updating a single Sex entity.
type SexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SexMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *SexUpdateOne) SetCreatedBy(i int) *SexUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *SexUpdateOne) SetNillableCreatedBy(i *int) *SexUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *SexUpdateOne) AddCreatedBy(i int) *SexUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *SexUpdateOne) ClearCreatedBy() *SexUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetCreatedWith sets the "created_with" field.
func (suo *SexUpdateOne) SetCreatedWith(s string) *SexUpdateOne {
	suo.mutation.SetCreatedWith(s)
	return suo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (suo *SexUpdateOne) SetNillableCreatedWith(s *string) *SexUpdateOne {
	if s != nil {
		suo.SetCreatedWith(*s)
	}
	return suo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (suo *SexUpdateOne) ClearCreatedWith() *SexUpdateOne {
	suo.mutation.ClearCreatedWith()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SexUpdateOne) SetUpdatedAt(t time.Time) *SexUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SexUpdateOne) SetUpdatedBy(i int) *SexUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SexUpdateOne) SetNillableUpdatedBy(i *int) *SexUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *SexUpdateOne) AddUpdatedBy(i int) *SexUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SexUpdateOne) ClearUpdatedBy() *SexUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetUpdatedWith sets the "updated_with" field.
func (suo *SexUpdateOne) SetUpdatedWith(s string) *SexUpdateOne {
	suo.mutation.SetUpdatedWith(s)
	return suo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (suo *SexUpdateOne) SetNillableUpdatedWith(s *string) *SexUpdateOne {
	if s != nil {
		suo.SetUpdatedWith(*s)
	}
	return suo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (suo *SexUpdateOne) ClearUpdatedWith() *SexUpdateOne {
	suo.mutation.ClearUpdatedWith()
	return suo
}

// SetShort sets the "short" field.
func (suo *SexUpdateOne) SetShort(s string) *SexUpdateOne {
	suo.mutation.SetShort(s)
	return suo
}

// SetTitle sets the "title" field.
func (suo *SexUpdateOne) SetTitle(s string) *SexUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SexUpdateOne) SetDescription(s string) *SexUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SexUpdateOne) SetNillableDescription(s *string) *SexUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SexUpdateOne) ClearDescription() *SexUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (suo *SexUpdateOne) SetMetadataID(id int) *SexUpdateOne {
	suo.mutation.SetMetadataID(id)
	return suo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (suo *SexUpdateOne) SetNillableMetadataID(id *int) *SexUpdateOne {
	if id != nil {
		suo = suo.SetMetadataID(*id)
	}
	return suo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (suo *SexUpdateOne) SetMetadata(m *Metadata) *SexUpdateOne {
	return suo.SetMetadataID(m.ID)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (suo *SexUpdateOne) AddPersonIDs(ids ...int) *SexUpdateOne {
	suo.mutation.AddPersonIDs(ids...)
	return suo
}

// AddPeople adds the "people" edges to the Person entity.
func (suo *SexUpdateOne) AddPeople(p ...*Person) *SexUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPersonIDs(ids...)
}

// Mutation returns the SexMutation object of the builder.
func (suo *SexUpdateOne) Mutation() *SexMutation {
	return suo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (suo *SexUpdateOne) ClearMetadata() *SexUpdateOne {
	suo.mutation.ClearMetadata()
	return suo
}

// ClearPeople clears all "people" edges to the Person entity.
func (suo *SexUpdateOne) ClearPeople() *SexUpdateOne {
	suo.mutation.ClearPeople()
	return suo
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (suo *SexUpdateOne) RemovePersonIDs(ids ...int) *SexUpdateOne {
	suo.mutation.RemovePersonIDs(ids...)
	return suo
}

// RemovePeople removes "people" edges to Person entities.
func (suo *SexUpdateOne) RemovePeople(p ...*Person) *SexUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePersonIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SexUpdateOne) Select(field string, fields ...string) *SexUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sex entity.
func (suo *SexUpdateOne) Save(ctx context.Context) (*Sex, error) {
	var (
		err  error
		node *Sex
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SexUpdateOne) SaveX(ctx context.Context) *Sex {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SexUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SexUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SexUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if sex.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized sex.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := sex.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SexUpdateOne) check() error {
	if v, ok := suo.mutation.Short(); ok {
		if err := sex.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := sex.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := sex.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (suo *SexUpdateOne) sqlSave(ctx context.Context) (_node *Sex, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sex.Table,
			Columns: sex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sex.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Sex.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sex.FieldID)
		for _, f := range fields {
			if !sex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldCreatedBy,
		})
	}
	if suo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: sex.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldCreatedWith,
		})
	}
	if suo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldCreatedWith,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sex.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sex.FieldUpdatedBy,
		})
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: sex.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldUpdatedWith,
		})
	}
	if suo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldUpdatedWith,
		})
	}
	if value, ok := suo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldShort,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sex.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sex.FieldDescription,
		})
	}
	if suo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sex.MetadataTable,
			Columns: []string{sex.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sex.MetadataTable,
			Columns: []string{sex.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !suo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sex{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
