// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
)

// DeathMannerUpdate is the builder for updating DeathManner entities.
type DeathMannerUpdate struct {
	config
	hooks    []Hook
	mutation *DeathMannerMutation
}

// Where appends a list predicates to the DeathMannerUpdate builder.
func (dmu *DeathMannerUpdate) Where(ps ...predicate.DeathManner) *DeathMannerUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetCreatedBy sets the "created_by" field.
func (dmu *DeathMannerUpdate) SetCreatedBy(i int) *DeathMannerUpdate {
	dmu.mutation.ResetCreatedBy()
	dmu.mutation.SetCreatedBy(i)
	return dmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableCreatedBy(i *int) *DeathMannerUpdate {
	if i != nil {
		dmu.SetCreatedBy(*i)
	}
	return dmu
}

// AddCreatedBy adds i to the "created_by" field.
func (dmu *DeathMannerUpdate) AddCreatedBy(i int) *DeathMannerUpdate {
	dmu.mutation.AddCreatedBy(i)
	return dmu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dmu *DeathMannerUpdate) ClearCreatedBy() *DeathMannerUpdate {
	dmu.mutation.ClearCreatedBy()
	return dmu
}

// SetCreatedWith sets the "created_with" field.
func (dmu *DeathMannerUpdate) SetCreatedWith(s string) *DeathMannerUpdate {
	dmu.mutation.SetCreatedWith(s)
	return dmu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableCreatedWith(s *string) *DeathMannerUpdate {
	if s != nil {
		dmu.SetCreatedWith(*s)
	}
	return dmu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dmu *DeathMannerUpdate) ClearCreatedWith() *DeathMannerUpdate {
	dmu.mutation.ClearCreatedWith()
	return dmu
}

// SetUpdatedAt sets the "updated_at" field.
func (dmu *DeathMannerUpdate) SetUpdatedAt(t time.Time) *DeathMannerUpdate {
	dmu.mutation.SetUpdatedAt(t)
	return dmu
}

// SetUpdatedBy sets the "updated_by" field.
func (dmu *DeathMannerUpdate) SetUpdatedBy(i int) *DeathMannerUpdate {
	dmu.mutation.ResetUpdatedBy()
	dmu.mutation.SetUpdatedBy(i)
	return dmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableUpdatedBy(i *int) *DeathMannerUpdate {
	if i != nil {
		dmu.SetUpdatedBy(*i)
	}
	return dmu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dmu *DeathMannerUpdate) AddUpdatedBy(i int) *DeathMannerUpdate {
	dmu.mutation.AddUpdatedBy(i)
	return dmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dmu *DeathMannerUpdate) ClearUpdatedBy() *DeathMannerUpdate {
	dmu.mutation.ClearUpdatedBy()
	return dmu
}

// SetUpdatedWith sets the "updated_with" field.
func (dmu *DeathMannerUpdate) SetUpdatedWith(s string) *DeathMannerUpdate {
	dmu.mutation.SetUpdatedWith(s)
	return dmu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableUpdatedWith(s *string) *DeathMannerUpdate {
	if s != nil {
		dmu.SetUpdatedWith(*s)
	}
	return dmu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dmu *DeathMannerUpdate) ClearUpdatedWith() *DeathMannerUpdate {
	dmu.mutation.ClearUpdatedWith()
	return dmu
}

// SetShort sets the "short" field.
func (dmu *DeathMannerUpdate) SetShort(s string) *DeathMannerUpdate {
	dmu.mutation.SetShort(s)
	return dmu
}

// SetTitle sets the "title" field.
func (dmu *DeathMannerUpdate) SetTitle(s string) *DeathMannerUpdate {
	dmu.mutation.SetTitle(s)
	return dmu
}

// SetDescription sets the "description" field.
func (dmu *DeathMannerUpdate) SetDescription(s string) *DeathMannerUpdate {
	dmu.mutation.SetDescription(s)
	return dmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableDescription(s *string) *DeathMannerUpdate {
	if s != nil {
		dmu.SetDescription(*s)
	}
	return dmu
}

// ClearDescription clears the value of the "description" field.
func (dmu *DeathMannerUpdate) ClearDescription() *DeathMannerUpdate {
	dmu.mutation.ClearDescription()
	return dmu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dmu *DeathMannerUpdate) SetMetadataID(id int) *DeathMannerUpdate {
	dmu.mutation.SetMetadataID(id)
	return dmu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dmu *DeathMannerUpdate) SetNillableMetadataID(id *int) *DeathMannerUpdate {
	if id != nil {
		dmu = dmu.SetMetadataID(*id)
	}
	return dmu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dmu *DeathMannerUpdate) SetMetadata(m *Metadata) *DeathMannerUpdate {
	return dmu.SetMetadataID(m.ID)
}

// AddDeathCertificateIDs adds the "death_certificates" edge to the DeathCertificate entity by IDs.
func (dmu *DeathMannerUpdate) AddDeathCertificateIDs(ids ...int) *DeathMannerUpdate {
	dmu.mutation.AddDeathCertificateIDs(ids...)
	return dmu
}

// AddDeathCertificates adds the "death_certificates" edges to the DeathCertificate entity.
func (dmu *DeathMannerUpdate) AddDeathCertificates(d ...*DeathCertificate) *DeathMannerUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dmu.AddDeathCertificateIDs(ids...)
}

// Mutation returns the DeathMannerMutation object of the builder.
func (dmu *DeathMannerUpdate) Mutation() *DeathMannerMutation {
	return dmu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dmu *DeathMannerUpdate) ClearMetadata() *DeathMannerUpdate {
	dmu.mutation.ClearMetadata()
	return dmu
}

// ClearDeathCertificates clears all "death_certificates" edges to the DeathCertificate entity.
func (dmu *DeathMannerUpdate) ClearDeathCertificates() *DeathMannerUpdate {
	dmu.mutation.ClearDeathCertificates()
	return dmu
}

// RemoveDeathCertificateIDs removes the "death_certificates" edge to DeathCertificate entities by IDs.
func (dmu *DeathMannerUpdate) RemoveDeathCertificateIDs(ids ...int) *DeathMannerUpdate {
	dmu.mutation.RemoveDeathCertificateIDs(ids...)
	return dmu
}

// RemoveDeathCertificates removes "death_certificates" edges to DeathCertificate entities.
func (dmu *DeathMannerUpdate) RemoveDeathCertificates(d ...*DeathCertificate) *DeathMannerUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dmu.RemoveDeathCertificateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DeathMannerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dmu.defaults(); err != nil {
		return 0, err
	}
	if len(dmu.hooks) == 0 {
		if err = dmu.check(); err != nil {
			return 0, err
		}
		affected, err = dmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathMannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dmu.check(); err != nil {
				return 0, err
			}
			dmu.mutation = mutation
			affected, err = dmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dmu.hooks) - 1; i >= 0; i-- {
			if dmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DeathMannerUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DeathMannerUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DeathMannerUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmu *DeathMannerUpdate) defaults() error {
	if _, ok := dmu.mutation.UpdatedAt(); !ok {
		if deathmanner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathmanner.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathmanner.UpdateDefaultUpdatedAt()
		dmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dmu *DeathMannerUpdate) check() error {
	if v, ok := dmu.mutation.Short(); ok {
		if err := deathmanner.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := dmu.mutation.Title(); ok {
		if err := deathmanner.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := dmu.mutation.Description(); ok {
		if err := deathmanner.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (dmu *DeathMannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathmanner.Table,
			Columns: deathmanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathmanner.FieldID,
			},
		},
	}
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if value, ok := dmu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if dmu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if value, ok := dmu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldCreatedWith,
		})
	}
	if dmu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldCreatedWith,
		})
	}
	if value, ok := dmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathmanner.FieldUpdatedAt,
		})
	}
	if value, ok := dmu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if value, ok := dmu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if dmu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if value, ok := dmu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldUpdatedWith,
		})
	}
	if dmu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldUpdatedWith,
		})
	}
	if value, ok := dmu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldShort,
		})
	}
	if value, ok := dmu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldTitle,
		})
	}
	if value, ok := dmu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldDescription,
		})
	}
	if dmu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldDescription,
		})
	}
	if dmu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathmanner.MetadataTable,
			Columns: []string{deathmanner.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathmanner.MetadataTable,
			Columns: []string{deathmanner.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmu.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.RemovedDeathCertificatesIDs(); len(nodes) > 0 && !dmu.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmu.mutation.DeathCertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathmanner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeathMannerUpdateOne is the builder for updating a single DeathManner entity.
type DeathMannerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeathMannerMutation
}

// SetCreatedBy sets the "created_by" field.
func (dmuo *DeathMannerUpdateOne) SetCreatedBy(i int) *DeathMannerUpdateOne {
	dmuo.mutation.ResetCreatedBy()
	dmuo.mutation.SetCreatedBy(i)
	return dmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableCreatedBy(i *int) *DeathMannerUpdateOne {
	if i != nil {
		dmuo.SetCreatedBy(*i)
	}
	return dmuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dmuo *DeathMannerUpdateOne) AddCreatedBy(i int) *DeathMannerUpdateOne {
	dmuo.mutation.AddCreatedBy(i)
	return dmuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dmuo *DeathMannerUpdateOne) ClearCreatedBy() *DeathMannerUpdateOne {
	dmuo.mutation.ClearCreatedBy()
	return dmuo
}

// SetCreatedWith sets the "created_with" field.
func (dmuo *DeathMannerUpdateOne) SetCreatedWith(s string) *DeathMannerUpdateOne {
	dmuo.mutation.SetCreatedWith(s)
	return dmuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableCreatedWith(s *string) *DeathMannerUpdateOne {
	if s != nil {
		dmuo.SetCreatedWith(*s)
	}
	return dmuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dmuo *DeathMannerUpdateOne) ClearCreatedWith() *DeathMannerUpdateOne {
	dmuo.mutation.ClearCreatedWith()
	return dmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dmuo *DeathMannerUpdateOne) SetUpdatedAt(t time.Time) *DeathMannerUpdateOne {
	dmuo.mutation.SetUpdatedAt(t)
	return dmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dmuo *DeathMannerUpdateOne) SetUpdatedBy(i int) *DeathMannerUpdateOne {
	dmuo.mutation.ResetUpdatedBy()
	dmuo.mutation.SetUpdatedBy(i)
	return dmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableUpdatedBy(i *int) *DeathMannerUpdateOne {
	if i != nil {
		dmuo.SetUpdatedBy(*i)
	}
	return dmuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dmuo *DeathMannerUpdateOne) AddUpdatedBy(i int) *DeathMannerUpdateOne {
	dmuo.mutation.AddUpdatedBy(i)
	return dmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dmuo *DeathMannerUpdateOne) ClearUpdatedBy() *DeathMannerUpdateOne {
	dmuo.mutation.ClearUpdatedBy()
	return dmuo
}

// SetUpdatedWith sets the "updated_with" field.
func (dmuo *DeathMannerUpdateOne) SetUpdatedWith(s string) *DeathMannerUpdateOne {
	dmuo.mutation.SetUpdatedWith(s)
	return dmuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableUpdatedWith(s *string) *DeathMannerUpdateOne {
	if s != nil {
		dmuo.SetUpdatedWith(*s)
	}
	return dmuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dmuo *DeathMannerUpdateOne) ClearUpdatedWith() *DeathMannerUpdateOne {
	dmuo.mutation.ClearUpdatedWith()
	return dmuo
}

// SetShort sets the "short" field.
func (dmuo *DeathMannerUpdateOne) SetShort(s string) *DeathMannerUpdateOne {
	dmuo.mutation.SetShort(s)
	return dmuo
}

// SetTitle sets the "title" field.
func (dmuo *DeathMannerUpdateOne) SetTitle(s string) *DeathMannerUpdateOne {
	dmuo.mutation.SetTitle(s)
	return dmuo
}

// SetDescription sets the "description" field.
func (dmuo *DeathMannerUpdateOne) SetDescription(s string) *DeathMannerUpdateOne {
	dmuo.mutation.SetDescription(s)
	return dmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableDescription(s *string) *DeathMannerUpdateOne {
	if s != nil {
		dmuo.SetDescription(*s)
	}
	return dmuo
}

// ClearDescription clears the value of the "description" field.
func (dmuo *DeathMannerUpdateOne) ClearDescription() *DeathMannerUpdateOne {
	dmuo.mutation.ClearDescription()
	return dmuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dmuo *DeathMannerUpdateOne) SetMetadataID(id int) *DeathMannerUpdateOne {
	dmuo.mutation.SetMetadataID(id)
	return dmuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dmuo *DeathMannerUpdateOne) SetNillableMetadataID(id *int) *DeathMannerUpdateOne {
	if id != nil {
		dmuo = dmuo.SetMetadataID(*id)
	}
	return dmuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dmuo *DeathMannerUpdateOne) SetMetadata(m *Metadata) *DeathMannerUpdateOne {
	return dmuo.SetMetadataID(m.ID)
}

// AddDeathCertificateIDs adds the "death_certificates" edge to the DeathCertificate entity by IDs.
func (dmuo *DeathMannerUpdateOne) AddDeathCertificateIDs(ids ...int) *DeathMannerUpdateOne {
	dmuo.mutation.AddDeathCertificateIDs(ids...)
	return dmuo
}

// AddDeathCertificates adds the "death_certificates" edges to the DeathCertificate entity.
func (dmuo *DeathMannerUpdateOne) AddDeathCertificates(d ...*DeathCertificate) *DeathMannerUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dmuo.AddDeathCertificateIDs(ids...)
}

// Mutation returns the DeathMannerMutation object of the builder.
func (dmuo *DeathMannerUpdateOne) Mutation() *DeathMannerMutation {
	return dmuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dmuo *DeathMannerUpdateOne) ClearMetadata() *DeathMannerUpdateOne {
	dmuo.mutation.ClearMetadata()
	return dmuo
}

// ClearDeathCertificates clears all "death_certificates" edges to the DeathCertificate entity.
func (dmuo *DeathMannerUpdateOne) ClearDeathCertificates() *DeathMannerUpdateOne {
	dmuo.mutation.ClearDeathCertificates()
	return dmuo
}

// RemoveDeathCertificateIDs removes the "death_certificates" edge to DeathCertificate entities by IDs.
func (dmuo *DeathMannerUpdateOne) RemoveDeathCertificateIDs(ids ...int) *DeathMannerUpdateOne {
	dmuo.mutation.RemoveDeathCertificateIDs(ids...)
	return dmuo
}

// RemoveDeathCertificates removes "death_certificates" edges to DeathCertificate entities.
func (dmuo *DeathMannerUpdateOne) RemoveDeathCertificates(d ...*DeathCertificate) *DeathMannerUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dmuo.RemoveDeathCertificateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DeathMannerUpdateOne) Select(field string, fields ...string) *DeathMannerUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DeathManner entity.
func (dmuo *DeathMannerUpdateOne) Save(ctx context.Context) (*DeathManner, error) {
	var (
		err  error
		node *DeathManner
	)
	if err := dmuo.defaults(); err != nil {
		return nil, err
	}
	if len(dmuo.hooks) == 0 {
		if err = dmuo.check(); err != nil {
			return nil, err
		}
		node, err = dmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathMannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dmuo.check(); err != nil {
				return nil, err
			}
			dmuo.mutation = mutation
			node, err = dmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dmuo.hooks) - 1; i >= 0; i-- {
			if dmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DeathMannerUpdateOne) SaveX(ctx context.Context) *DeathManner {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DeathMannerUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DeathMannerUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmuo *DeathMannerUpdateOne) defaults() error {
	if _, ok := dmuo.mutation.UpdatedAt(); !ok {
		if deathmanner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathmanner.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathmanner.UpdateDefaultUpdatedAt()
		dmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dmuo *DeathMannerUpdateOne) check() error {
	if v, ok := dmuo.mutation.Short(); ok {
		if err := deathmanner.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := dmuo.mutation.Title(); ok {
		if err := deathmanner.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := dmuo.mutation.Description(); ok {
		if err := deathmanner.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (dmuo *DeathMannerUpdateOne) sqlSave(ctx context.Context) (_node *DeathManner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathmanner.Table,
			Columns: deathmanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathmanner.FieldID,
			},
		},
	}
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeathManner.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deathmanner.FieldID)
		for _, f := range fields {
			if !deathmanner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deathmanner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if value, ok := dmuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if dmuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathmanner.FieldCreatedBy,
		})
	}
	if value, ok := dmuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldCreatedWith,
		})
	}
	if dmuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldCreatedWith,
		})
	}
	if value, ok := dmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathmanner.FieldUpdatedAt,
		})
	}
	if value, ok := dmuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if value, ok := dmuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if dmuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathmanner.FieldUpdatedBy,
		})
	}
	if value, ok := dmuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldUpdatedWith,
		})
	}
	if dmuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldUpdatedWith,
		})
	}
	if value, ok := dmuo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldShort,
		})
	}
	if value, ok := dmuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldTitle,
		})
	}
	if value, ok := dmuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathmanner.FieldDescription,
		})
	}
	if dmuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathmanner.FieldDescription,
		})
	}
	if dmuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathmanner.MetadataTable,
			Columns: []string{deathmanner.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathmanner.MetadataTable,
			Columns: []string{deathmanner.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dmuo.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.RemovedDeathCertificatesIDs(); len(nodes) > 0 && !dmuo.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dmuo.mutation.DeathCertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeathManner{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathmanner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
