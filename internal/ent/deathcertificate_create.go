// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
)

// DeathCertificateCreate is the builder for creating a DeathCertificate entity.
type DeathCertificateCreate struct {
	config
	mutation *DeathCertificateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DeathCertificateCreate) SetCreatedAt(t time.Time) *DeathCertificateCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCreatedAt(t *time.Time) *DeathCertificateCreate {
	if t != nil {
		dcc.SetCreatedAt(*t)
	}
	return dcc
}

// SetCreatedBy sets the "created_by" field.
func (dcc *DeathCertificateCreate) SetCreatedBy(i int) *DeathCertificateCreate {
	dcc.mutation.SetCreatedBy(i)
	return dcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCreatedBy(i *int) *DeathCertificateCreate {
	if i != nil {
		dcc.SetCreatedBy(*i)
	}
	return dcc
}

// SetCreatedWith sets the "created_with" field.
func (dcc *DeathCertificateCreate) SetCreatedWith(s string) *DeathCertificateCreate {
	dcc.mutation.SetCreatedWith(s)
	return dcc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCreatedWith(s *string) *DeathCertificateCreate {
	if s != nil {
		dcc.SetCreatedWith(*s)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DeathCertificateCreate) SetUpdatedAt(t time.Time) *DeathCertificateCreate {
	dcc.mutation.SetUpdatedAt(t)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableUpdatedAt(t *time.Time) *DeathCertificateCreate {
	if t != nil {
		dcc.SetUpdatedAt(*t)
	}
	return dcc
}

// SetUpdatedBy sets the "updated_by" field.
func (dcc *DeathCertificateCreate) SetUpdatedBy(i int) *DeathCertificateCreate {
	dcc.mutation.SetUpdatedBy(i)
	return dcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableUpdatedBy(i *int) *DeathCertificateCreate {
	if i != nil {
		dcc.SetUpdatedBy(*i)
	}
	return dcc
}

// SetUpdatedWith sets the "updated_with" field.
func (dcc *DeathCertificateCreate) SetUpdatedWith(s string) *DeathCertificateCreate {
	dcc.mutation.SetUpdatedWith(s)
	return dcc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableUpdatedWith(s *string) *DeathCertificateCreate {
	if s != nil {
		dcc.SetUpdatedWith(*s)
	}
	return dcc
}

// SetCause sets the "cause" field.
func (dcc *DeathCertificateCreate) SetCause(s string) *DeathCertificateCreate {
	dcc.mutation.SetCause(s)
	return dcc
}

// SetComments sets the "comments" field.
func (dcc *DeathCertificateCreate) SetComments(s string) *DeathCertificateCreate {
	dcc.mutation.SetComments(s)
	return dcc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableComments(s *string) *DeathCertificateCreate {
	if s != nil {
		dcc.SetComments(*s)
	}
	return dcc
}

// SetCertifiedAt sets the "certified_at" field.
func (dcc *DeathCertificateCreate) SetCertifiedAt(t time.Time) *DeathCertificateCreate {
	dcc.mutation.SetCertifiedAt(t)
	return dcc
}

// SetNillableCertifiedAt sets the "certified_at" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCertifiedAt(t *time.Time) *DeathCertificateCreate {
	if t != nil {
		dcc.SetCertifiedAt(*t)
	}
	return dcc
}

// SetCertifierComments sets the "certifier_comments" field.
func (dcc *DeathCertificateCreate) SetCertifierComments(s string) *DeathCertificateCreate {
	dcc.mutation.SetCertifierComments(s)
	return dcc
}

// SetNillableCertifierComments sets the "certifier_comments" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCertifierComments(s *string) *DeathCertificateCreate {
	if s != nil {
		dcc.SetCertifierComments(*s)
	}
	return dcc
}

// SetRequiresCertification sets the "requires_certification" field.
func (dcc *DeathCertificateCreate) SetRequiresCertification(b bool) *DeathCertificateCreate {
	dcc.mutation.SetRequiresCertification(b)
	return dcc
}

// SetNillableRequiresCertification sets the "requires_certification" field if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableRequiresCertification(b *bool) *DeathCertificateCreate {
	if b != nil {
		dcc.SetRequiresCertification(*b)
	}
	return dcc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dcc *DeathCertificateCreate) SetMetadataID(id int) *DeathCertificateCreate {
	dcc.mutation.SetMetadataID(id)
	return dcc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableMetadataID(id *int) *DeathCertificateCreate {
	if id != nil {
		dcc = dcc.SetMetadataID(*id)
	}
	return dcc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dcc *DeathCertificateCreate) SetMetadata(m *Metadata) *DeathCertificateCreate {
	return dcc.SetMetadataID(m.ID)
}

// SetDecedentID sets the "decedent" edge to the Person entity by ID.
func (dcc *DeathCertificateCreate) SetDecedentID(id int) *DeathCertificateCreate {
	dcc.mutation.SetDecedentID(id)
	return dcc
}

// SetDecedent sets the "decedent" edge to the Person entity.
func (dcc *DeathCertificateCreate) SetDecedent(p *Person) *DeathCertificateCreate {
	return dcc.SetDecedentID(p.ID)
}

// SetMannerID sets the "manner" edge to the DeathManner entity by ID.
func (dcc *DeathCertificateCreate) SetMannerID(id int) *DeathCertificateCreate {
	dcc.mutation.SetMannerID(id)
	return dcc
}

// SetNillableMannerID sets the "manner" edge to the DeathManner entity by ID if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableMannerID(id *int) *DeathCertificateCreate {
	if id != nil {
		dcc = dcc.SetMannerID(*id)
	}
	return dcc
}

// SetManner sets the "manner" edge to the DeathManner entity.
func (dcc *DeathCertificateCreate) SetManner(d *DeathManner) *DeathCertificateCreate {
	return dcc.SetMannerID(d.ID)
}

// SetPlaceID sets the "place" edge to the DeathPlace entity by ID.
func (dcc *DeathCertificateCreate) SetPlaceID(id int) *DeathCertificateCreate {
	dcc.mutation.SetPlaceID(id)
	return dcc
}

// SetNillablePlaceID sets the "place" edge to the DeathPlace entity by ID if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillablePlaceID(id *int) *DeathCertificateCreate {
	if id != nil {
		dcc = dcc.SetPlaceID(*id)
	}
	return dcc
}

// SetPlace sets the "place" edge to the DeathPlace entity.
func (dcc *DeathCertificateCreate) SetPlace(d *DeathPlace) *DeathCertificateCreate {
	return dcc.SetPlaceID(d.ID)
}

// SetCertifierID sets the "certifier" edge to the DeathCertifier entity by ID.
func (dcc *DeathCertificateCreate) SetCertifierID(id int) *DeathCertificateCreate {
	dcc.mutation.SetCertifierID(id)
	return dcc
}

// SetNillableCertifierID sets the "certifier" edge to the DeathCertifier entity by ID if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCertifierID(id *int) *DeathCertificateCreate {
	if id != nil {
		dcc = dcc.SetCertifierID(*id)
	}
	return dcc
}

// SetCertifier sets the "certifier" edge to the DeathCertifier entity.
func (dcc *DeathCertificateCreate) SetCertifier(d *DeathCertifier) *DeathCertificateCreate {
	return dcc.SetCertifierID(d.ID)
}

// SetCertifiedByID sets the "certified_by" edge to the Person entity by ID.
func (dcc *DeathCertificateCreate) SetCertifiedByID(id int) *DeathCertificateCreate {
	dcc.mutation.SetCertifiedByID(id)
	return dcc
}

// SetNillableCertifiedByID sets the "certified_by" edge to the Person entity by ID if the given value is not nil.
func (dcc *DeathCertificateCreate) SetNillableCertifiedByID(id *int) *DeathCertificateCreate {
	if id != nil {
		dcc = dcc.SetCertifiedByID(*id)
	}
	return dcc
}

// SetCertifiedBy sets the "certified_by" edge to the Person entity.
func (dcc *DeathCertificateCreate) SetCertifiedBy(p *Person) *DeathCertificateCreate {
	return dcc.SetCertifiedByID(p.ID)
}

// Mutation returns the DeathCertificateMutation object of the builder.
func (dcc *DeathCertificateCreate) Mutation() *DeathCertificateMutation {
	return dcc.mutation
}

// Save creates the DeathCertificate in the database.
func (dcc *DeathCertificateCreate) Save(ctx context.Context) (*DeathCertificate, error) {
	var (
		err  error
		node *DeathCertificate
	)
	if err := dcc.defaults(); err != nil {
		return nil, err
	}
	if len(dcc.hooks) == 0 {
		if err = dcc.check(); err != nil {
			return nil, err
		}
		node, err = dcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathCertificateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcc.check(); err != nil {
				return nil, err
			}
			dcc.mutation = mutation
			if node, err = dcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dcc.hooks) - 1; i >= 0; i-- {
			if dcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DeathCertificateCreate) SaveX(ctx context.Context) *DeathCertificate {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DeathCertificateCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DeathCertificateCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DeathCertificateCreate) defaults() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		if deathcertificate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertificate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertificate.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		if deathcertificate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertificate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertificate.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dcc.mutation.RequiresCertification(); !ok {
		v := deathcertificate.DefaultRequiresCertification
		dcc.mutation.SetRequiresCertification(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DeathCertificateCreate) check() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := dcc.mutation.Cause(); !ok {
		return &ValidationError{Name: "cause", err: errors.New(`ent: missing required field "cause"`)}
	}
	if _, ok := dcc.mutation.RequiresCertification(); !ok {
		return &ValidationError{Name: "requires_certification", err: errors.New(`ent: missing required field "requires_certification"`)}
	}
	if _, ok := dcc.mutation.DecedentID(); !ok {
		return &ValidationError{Name: "decedent", err: errors.New("ent: missing required edge \"decedent\"")}
	}
	return nil
}

func (dcc *DeathCertificateCreate) sqlSave(ctx context.Context) (*DeathCertificate, error) {
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dcc *DeathCertificateCreate) createSpec() (*DeathCertificate, *sqlgraph.CreateSpec) {
	var (
		_node = &DeathCertificate{config: dcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deathcertificate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertificate.FieldID,
			},
		}
	)
	_spec.OnConflict = dcc.conflict
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := dcc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertificate.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := dcc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := dcc.mutation.Cause(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCause,
		})
		_node.Cause = value
	}
	if value, ok := dcc.mutation.Comments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldComments,
		})
		_node.Comments = value
	}
	if value, ok := dcc.mutation.CertifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertificate.FieldCertifiedAt,
		})
		_node.CertifiedAt = &value
	}
	if value, ok := dcc.mutation.CertifierComments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertificate.FieldCertifierComments,
		})
		_node.CertifierComments = value
	}
	if value, ok := dcc.mutation.RequiresCertification(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: deathcertificate.FieldRequiresCertification,
		})
		_node.RequiresCertification = value
	}
	if nodes := dcc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.death_certificate_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.DecedentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.person_death_certificate = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.MannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathmanner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.death_manner_death_certificates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathplace.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.death_place_death_certificates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.CertifierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertifier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.death_certifier_death_certificates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.CertifiedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.person_certified_deaths = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeathCertificate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeathCertificateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dcc *DeathCertificateCreate) OnConflict(opts ...sql.ConflictOption) *DeathCertificateUpsertOne {
	dcc.conflict = opts
	return &DeathCertificateUpsertOne{
		create: dcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeathCertificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcc *DeathCertificateCreate) OnConflictColumns(columns ...string) *DeathCertificateUpsertOne {
	dcc.conflict = append(dcc.conflict, sql.ConflictColumns(columns...))
	return &DeathCertificateUpsertOne{
		create: dcc,
	}
}

type (
	// DeathCertificateUpsertOne is the builder for "upsert"-ing
	//  one DeathCertificate node.
	DeathCertificateUpsertOne struct {
		create *DeathCertificateCreate
	}

	// DeathCertificateUpsert is the "OnConflict" setter.
	DeathCertificateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertificateUpsert) SetCreatedAt(v time.Time) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCreatedAt() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertificateUpsert) SetCreatedBy(v int) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCreatedBy() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertificateUpsert) ClearCreatedBy() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertificateUpsert) SetCreatedWith(v string) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCreatedWith() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertificateUpsert) ClearCreatedWith() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertificateUpsert) SetUpdatedAt(v time.Time) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateUpdatedAt() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertificateUpsert) SetUpdatedBy(v int) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateUpdatedBy() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertificateUpsert) ClearUpdatedBy() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertificateUpsert) SetUpdatedWith(v string) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateUpdatedWith() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertificateUpsert) ClearUpdatedWith() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldUpdatedWith)
	return u
}

// SetCause sets the "cause" field.
func (u *DeathCertificateUpsert) SetCause(v string) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCause, v)
	return u
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCause() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCause)
	return u
}

// SetComments sets the "comments" field.
func (u *DeathCertificateUpsert) SetComments(v string) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateComments() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *DeathCertificateUpsert) ClearComments() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldComments)
	return u
}

// SetCertifiedAt sets the "certified_at" field.
func (u *DeathCertificateUpsert) SetCertifiedAt(v time.Time) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCertifiedAt, v)
	return u
}

// UpdateCertifiedAt sets the "certified_at" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCertifiedAt() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCertifiedAt)
	return u
}

// ClearCertifiedAt clears the value of the "certified_at" field.
func (u *DeathCertificateUpsert) ClearCertifiedAt() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldCertifiedAt)
	return u
}

// SetCertifierComments sets the "certifier_comments" field.
func (u *DeathCertificateUpsert) SetCertifierComments(v string) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldCertifierComments, v)
	return u
}

// UpdateCertifierComments sets the "certifier_comments" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateCertifierComments() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldCertifierComments)
	return u
}

// ClearCertifierComments clears the value of the "certifier_comments" field.
func (u *DeathCertificateUpsert) ClearCertifierComments() *DeathCertificateUpsert {
	u.SetNull(deathcertificate.FieldCertifierComments)
	return u
}

// SetRequiresCertification sets the "requires_certification" field.
func (u *DeathCertificateUpsert) SetRequiresCertification(v bool) *DeathCertificateUpsert {
	u.Set(deathcertificate.FieldRequiresCertification, v)
	return u
}

// UpdateRequiresCertification sets the "requires_certification" field to the value that was provided on create.
func (u *DeathCertificateUpsert) UpdateRequiresCertification() *DeathCertificateUpsert {
	u.SetExcluded(deathcertificate.FieldRequiresCertification)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DeathCertificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DeathCertificateUpsertOne) UpdateNewValues() *DeathCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeathCertificate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeathCertificateUpsertOne) Ignore() *DeathCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeathCertificateUpsertOne) DoNothing() *DeathCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeathCertificateCreate.OnConflict
// documentation for more info.
func (u *DeathCertificateUpsertOne) Update(set func(*DeathCertificateUpsert)) *DeathCertificateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeathCertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertificateUpsertOne) SetCreatedAt(v time.Time) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCreatedAt() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertificateUpsertOne) SetCreatedBy(v int) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCreatedBy() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertificateUpsertOne) ClearCreatedBy() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertificateUpsertOne) SetCreatedWith(v string) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCreatedWith() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertificateUpsertOne) ClearCreatedWith() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertificateUpsertOne) SetUpdatedAt(v time.Time) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateUpdatedAt() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertificateUpsertOne) SetUpdatedBy(v int) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateUpdatedBy() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertificateUpsertOne) ClearUpdatedBy() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertificateUpsertOne) SetUpdatedWith(v string) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateUpdatedWith() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertificateUpsertOne) ClearUpdatedWith() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetCause sets the "cause" field.
func (u *DeathCertificateUpsertOne) SetCause(v string) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCause(v)
	})
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCause() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCause()
	})
}

// SetComments sets the "comments" field.
func (u *DeathCertificateUpsertOne) SetComments(v string) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateComments() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *DeathCertificateUpsertOne) ClearComments() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearComments()
	})
}

// SetCertifiedAt sets the "certified_at" field.
func (u *DeathCertificateUpsertOne) SetCertifiedAt(v time.Time) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCertifiedAt(v)
	})
}

// UpdateCertifiedAt sets the "certified_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCertifiedAt() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCertifiedAt()
	})
}

// ClearCertifiedAt clears the value of the "certified_at" field.
func (u *DeathCertificateUpsertOne) ClearCertifiedAt() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCertifiedAt()
	})
}

// SetCertifierComments sets the "certifier_comments" field.
func (u *DeathCertificateUpsertOne) SetCertifierComments(v string) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCertifierComments(v)
	})
}

// UpdateCertifierComments sets the "certifier_comments" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateCertifierComments() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCertifierComments()
	})
}

// ClearCertifierComments clears the value of the "certifier_comments" field.
func (u *DeathCertificateUpsertOne) ClearCertifierComments() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCertifierComments()
	})
}

// SetRequiresCertification sets the "requires_certification" field.
func (u *DeathCertificateUpsertOne) SetRequiresCertification(v bool) *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetRequiresCertification(v)
	})
}

// UpdateRequiresCertification sets the "requires_certification" field to the value that was provided on create.
func (u *DeathCertificateUpsertOne) UpdateRequiresCertification() *DeathCertificateUpsertOne {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateRequiresCertification()
	})
}

// Exec executes the query.
func (u *DeathCertificateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeathCertificateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeathCertificateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeathCertificateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeathCertificateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeathCertificateCreateBulk is the builder for creating many DeathCertificate entities in bulk.
type DeathCertificateCreateBulk struct {
	config
	builders []*DeathCertificateCreate
	conflict []sql.ConflictOption
}

// Save creates the DeathCertificate entities in the database.
func (dccb *DeathCertificateCreateBulk) Save(ctx context.Context) ([]*DeathCertificate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DeathCertificate, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeathCertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DeathCertificateCreateBulk) SaveX(ctx context.Context) []*DeathCertificate {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DeathCertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DeathCertificateCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeathCertificate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeathCertificateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dccb *DeathCertificateCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeathCertificateUpsertBulk {
	dccb.conflict = opts
	return &DeathCertificateUpsertBulk{
		create: dccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeathCertificate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dccb *DeathCertificateCreateBulk) OnConflictColumns(columns ...string) *DeathCertificateUpsertBulk {
	dccb.conflict = append(dccb.conflict, sql.ConflictColumns(columns...))
	return &DeathCertificateUpsertBulk{
		create: dccb,
	}
}

// DeathCertificateUpsertBulk is the builder for "upsert"-ing
// a bulk of DeathCertificate nodes.
type DeathCertificateUpsertBulk struct {
	create *DeathCertificateCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeathCertificate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DeathCertificateUpsertBulk) UpdateNewValues() *DeathCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeathCertificate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeathCertificateUpsertBulk) Ignore() *DeathCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeathCertificateUpsertBulk) DoNothing() *DeathCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeathCertificateCreateBulk.OnConflict
// documentation for more info.
func (u *DeathCertificateUpsertBulk) Update(set func(*DeathCertificateUpsert)) *DeathCertificateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeathCertificateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertificateUpsertBulk) SetCreatedAt(v time.Time) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCreatedAt() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertificateUpsertBulk) SetCreatedBy(v int) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCreatedBy() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertificateUpsertBulk) ClearCreatedBy() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertificateUpsertBulk) SetCreatedWith(v string) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCreatedWith() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertificateUpsertBulk) ClearCreatedWith() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertificateUpsertBulk) SetUpdatedAt(v time.Time) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateUpdatedAt() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertificateUpsertBulk) SetUpdatedBy(v int) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateUpdatedBy() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertificateUpsertBulk) ClearUpdatedBy() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertificateUpsertBulk) SetUpdatedWith(v string) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateUpdatedWith() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertificateUpsertBulk) ClearUpdatedWith() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetCause sets the "cause" field.
func (u *DeathCertificateUpsertBulk) SetCause(v string) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCause(v)
	})
}

// UpdateCause sets the "cause" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCause() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCause()
	})
}

// SetComments sets the "comments" field.
func (u *DeathCertificateUpsertBulk) SetComments(v string) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateComments() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *DeathCertificateUpsertBulk) ClearComments() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearComments()
	})
}

// SetCertifiedAt sets the "certified_at" field.
func (u *DeathCertificateUpsertBulk) SetCertifiedAt(v time.Time) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCertifiedAt(v)
	})
}

// UpdateCertifiedAt sets the "certified_at" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCertifiedAt() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCertifiedAt()
	})
}

// ClearCertifiedAt clears the value of the "certified_at" field.
func (u *DeathCertificateUpsertBulk) ClearCertifiedAt() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCertifiedAt()
	})
}

// SetCertifierComments sets the "certifier_comments" field.
func (u *DeathCertificateUpsertBulk) SetCertifierComments(v string) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetCertifierComments(v)
	})
}

// UpdateCertifierComments sets the "certifier_comments" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateCertifierComments() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateCertifierComments()
	})
}

// ClearCertifierComments clears the value of the "certifier_comments" field.
func (u *DeathCertificateUpsertBulk) ClearCertifierComments() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.ClearCertifierComments()
	})
}

// SetRequiresCertification sets the "requires_certification" field.
func (u *DeathCertificateUpsertBulk) SetRequiresCertification(v bool) *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.SetRequiresCertification(v)
	})
}

// UpdateRequiresCertification sets the "requires_certification" field to the value that was provided on create.
func (u *DeathCertificateUpsertBulk) UpdateRequiresCertification() *DeathCertificateUpsertBulk {
	return u.Update(func(s *DeathCertificateUpsert) {
		s.UpdateRequiresCertification()
	})
}

// Exec executes the query.
func (u *DeathCertificateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeathCertificateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeathCertificateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeathCertificateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
