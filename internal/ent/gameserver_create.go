// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/player"
)

// GameServerCreate is the builder for creating a GameServer entity.
type GameServerCreate struct {
	config
	mutation *GameServerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gsc *GameServerCreate) SetCreatedAt(t time.Time) *GameServerCreate {
	gsc.mutation.SetCreatedAt(t)
	return gsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableCreatedAt(t *time.Time) *GameServerCreate {
	if t != nil {
		gsc.SetCreatedAt(*t)
	}
	return gsc
}

// SetCreatedBy sets the "created_by" field.
func (gsc *GameServerCreate) SetCreatedBy(i int) *GameServerCreate {
	gsc.mutation.SetCreatedBy(i)
	return gsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableCreatedBy(i *int) *GameServerCreate {
	if i != nil {
		gsc.SetCreatedBy(*i)
	}
	return gsc
}

// SetCreatedWith sets the "created_with" field.
func (gsc *GameServerCreate) SetCreatedWith(s string) *GameServerCreate {
	gsc.mutation.SetCreatedWith(s)
	return gsc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableCreatedWith(s *string) *GameServerCreate {
	if s != nil {
		gsc.SetCreatedWith(*s)
	}
	return gsc
}

// SetUpdatedAt sets the "updated_at" field.
func (gsc *GameServerCreate) SetUpdatedAt(t time.Time) *GameServerCreate {
	gsc.mutation.SetUpdatedAt(t)
	return gsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableUpdatedAt(t *time.Time) *GameServerCreate {
	if t != nil {
		gsc.SetUpdatedAt(*t)
	}
	return gsc
}

// SetUpdatedBy sets the "updated_by" field.
func (gsc *GameServerCreate) SetUpdatedBy(i int) *GameServerCreate {
	gsc.mutation.SetUpdatedBy(i)
	return gsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableUpdatedBy(i *int) *GameServerCreate {
	if i != nil {
		gsc.SetUpdatedBy(*i)
	}
	return gsc
}

// SetUpdatedWith sets the "updated_with" field.
func (gsc *GameServerCreate) SetUpdatedWith(s string) *GameServerCreate {
	gsc.mutation.SetUpdatedWith(s)
	return gsc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableUpdatedWith(s *string) *GameServerCreate {
	if s != nil {
		gsc.SetUpdatedWith(*s)
	}
	return gsc
}

// SetName sets the "name" field.
func (gsc *GameServerCreate) SetName(s string) *GameServerCreate {
	gsc.mutation.SetName(s)
	return gsc
}

// SetDescription sets the "description" field.
func (gsc *GameServerCreate) SetDescription(s string) *GameServerCreate {
	gsc.mutation.SetDescription(s)
	return gsc
}

// SetSecret sets the "secret" field.
func (gsc *GameServerCreate) SetSecret(s string) *GameServerCreate {
	gsc.mutation.SetSecret(s)
	return gsc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableSecret(s *string) *GameServerCreate {
	if s != nil {
		gsc.SetSecret(*s)
	}
	return gsc
}

// SetIPAddress sets the "ip_address" field.
func (gsc *GameServerCreate) SetIPAddress(s string) *GameServerCreate {
	gsc.mutation.SetIPAddress(s)
	return gsc
}

// SetMonitoring sets the "monitoring" field.
func (gsc *GameServerCreate) SetMonitoring(b bool) *GameServerCreate {
	gsc.mutation.SetMonitoring(b)
	return gsc
}

// SetNillableMonitoring sets the "monitoring" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableMonitoring(b *bool) *GameServerCreate {
	if b != nil {
		gsc.SetMonitoring(*b)
	}
	return gsc
}

// SetDisabledAt sets the "disabled_at" field.
func (gsc *GameServerCreate) SetDisabledAt(t time.Time) *GameServerCreate {
	gsc.mutation.SetDisabledAt(t)
	return gsc
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableDisabledAt(t *time.Time) *GameServerCreate {
	if t != nil {
		gsc.SetDisabledAt(*t)
	}
	return gsc
}

// SetLastContactAt sets the "last_contact_at" field.
func (gsc *GameServerCreate) SetLastContactAt(t time.Time) *GameServerCreate {
	gsc.mutation.SetLastContactAt(t)
	return gsc
}

// SetNillableLastContactAt sets the "last_contact_at" field if the given value is not nil.
func (gsc *GameServerCreate) SetNillableLastContactAt(t *time.Time) *GameServerCreate {
	if t != nil {
		gsc.SetLastContactAt(*t)
	}
	return gsc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (gsc *GameServerCreate) SetMetadataID(id int) *GameServerCreate {
	gsc.mutation.SetMetadataID(id)
	return gsc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (gsc *GameServerCreate) SetNillableMetadataID(id *int) *GameServerCreate {
	if id != nil {
		gsc = gsc.SetMetadataID(*id)
	}
	return gsc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (gsc *GameServerCreate) SetMetadata(m *Metadata) *GameServerCreate {
	return gsc.SetMetadataID(m.ID)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (gsc *GameServerCreate) AddPlayerIDs(ids ...int) *GameServerCreate {
	gsc.mutation.AddPlayerIDs(ids...)
	return gsc
}

// AddPlayers adds the "players" edges to the Player entity.
func (gsc *GameServerCreate) AddPlayers(p ...*Player) *GameServerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsc.AddPlayerIDs(ids...)
}

// Mutation returns the GameServerMutation object of the builder.
func (gsc *GameServerCreate) Mutation() *GameServerMutation {
	return gsc.mutation
}

// Save creates the GameServer in the database.
func (gsc *GameServerCreate) Save(ctx context.Context) (*GameServer, error) {
	var (
		err  error
		node *GameServer
	)
	if err := gsc.defaults(); err != nil {
		return nil, err
	}
	if len(gsc.hooks) == 0 {
		if err = gsc.check(); err != nil {
			return nil, err
		}
		node, err = gsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameServerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsc.check(); err != nil {
				return nil, err
			}
			gsc.mutation = mutation
			if node, err = gsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gsc.hooks) - 1; i >= 0; i-- {
			if gsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GameServerCreate) SaveX(ctx context.Context) *GameServer {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GameServerCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GameServerCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GameServerCreate) defaults() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		if gameserver.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized gameserver.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := gameserver.DefaultCreatedAt()
		gsc.mutation.SetCreatedAt(v)
	}
	if _, ok := gsc.mutation.UpdatedAt(); !ok {
		if gameserver.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gameserver.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gameserver.DefaultUpdatedAt()
		gsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gsc.mutation.Monitoring(); !ok {
		v := gameserver.DefaultMonitoring
		gsc.mutation.SetMonitoring(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GameServerCreate) check() error {
	if _, ok := gsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := gsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := gsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := gsc.mutation.Name(); ok {
		if err := gameserver.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "description"`)}
	}
	if _, ok := gsc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "ip_address"`)}
	}
	return nil
}

func (gsc *GameServerCreate) sqlSave(ctx context.Context) (*GameServer, error) {
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gsc *GameServerCreate) createSpec() (*GameServer, *sqlgraph.CreateSpec) {
	var (
		_node = &GameServer{config: gsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gameserver.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameserver.FieldID,
			},
		}
	)
	_spec.OnConflict = gsc.conflict
	if value, ok := gsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gsc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := gsc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := gsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gsc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: gameserver.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := gsc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := gsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gsc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := gsc.mutation.Secret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldSecret,
		})
		_node.Secret = &value
	}
	if value, ok := gsc.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gameserver.FieldIPAddress,
		})
		_node.IPAddress = value
	}
	if value, ok := gsc.mutation.Monitoring(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: gameserver.FieldMonitoring,
		})
		_node.Monitoring = value
	}
	if value, ok := gsc.mutation.DisabledAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldDisabledAt,
		})
		_node.DisabledAt = &value
	}
	if value, ok := gsc.mutation.LastContactAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: gameserver.FieldLastContactAt,
		})
		_node.LastContactAt = &value
	}
	if nodes := gsc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_server_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameServer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameServerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gsc *GameServerCreate) OnConflict(opts ...sql.ConflictOption) *GameServerUpsertOne {
	gsc.conflict = opts
	return &GameServerUpsertOne{
		create: gsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameServer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gsc *GameServerCreate) OnConflictColumns(columns ...string) *GameServerUpsertOne {
	gsc.conflict = append(gsc.conflict, sql.ConflictColumns(columns...))
	return &GameServerUpsertOne{
		create: gsc,
	}
}

type (
	// GameServerUpsertOne is the builder for "upsert"-ing
	//  one GameServer node.
	GameServerUpsertOne struct {
		create *GameServerCreate
	}

	// GameServerUpsert is the "OnConflict" setter.
	GameServerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GameServerUpsert) SetCreatedAt(v time.Time) *GameServerUpsert {
	u.Set(gameserver.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateCreatedAt() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *GameServerUpsert) SetCreatedBy(v int) *GameServerUpsert {
	u.Set(gameserver.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateCreatedBy() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *GameServerUpsert) ClearCreatedBy() *GameServerUpsert {
	u.SetNull(gameserver.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *GameServerUpsert) SetCreatedWith(v string) *GameServerUpsert {
	u.Set(gameserver.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateCreatedWith() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *GameServerUpsert) ClearCreatedWith() *GameServerUpsert {
	u.SetNull(gameserver.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GameServerUpsert) SetUpdatedAt(v time.Time) *GameServerUpsert {
	u.Set(gameserver.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateUpdatedAt() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GameServerUpsert) SetUpdatedBy(v int) *GameServerUpsert {
	u.Set(gameserver.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateUpdatedBy() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *GameServerUpsert) ClearUpdatedBy() *GameServerUpsert {
	u.SetNull(gameserver.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *GameServerUpsert) SetUpdatedWith(v string) *GameServerUpsert {
	u.Set(gameserver.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateUpdatedWith() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *GameServerUpsert) ClearUpdatedWith() *GameServerUpsert {
	u.SetNull(gameserver.FieldUpdatedWith)
	return u
}

// SetName sets the "name" field.
func (u *GameServerUpsert) SetName(v string) *GameServerUpsert {
	u.Set(gameserver.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateName() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *GameServerUpsert) SetDescription(v string) *GameServerUpsert {
	u.Set(gameserver.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateDescription() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldDescription)
	return u
}

// SetSecret sets the "secret" field.
func (u *GameServerUpsert) SetSecret(v string) *GameServerUpsert {
	u.Set(gameserver.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateSecret() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldSecret)
	return u
}

// ClearSecret clears the value of the "secret" field.
func (u *GameServerUpsert) ClearSecret() *GameServerUpsert {
	u.SetNull(gameserver.FieldSecret)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *GameServerUpsert) SetIPAddress(v string) *GameServerUpsert {
	u.Set(gameserver.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateIPAddress() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldIPAddress)
	return u
}

// SetMonitoring sets the "monitoring" field.
func (u *GameServerUpsert) SetMonitoring(v bool) *GameServerUpsert {
	u.Set(gameserver.FieldMonitoring, v)
	return u
}

// UpdateMonitoring sets the "monitoring" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateMonitoring() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldMonitoring)
	return u
}

// ClearMonitoring clears the value of the "monitoring" field.
func (u *GameServerUpsert) ClearMonitoring() *GameServerUpsert {
	u.SetNull(gameserver.FieldMonitoring)
	return u
}

// SetDisabledAt sets the "disabled_at" field.
func (u *GameServerUpsert) SetDisabledAt(v time.Time) *GameServerUpsert {
	u.Set(gameserver.FieldDisabledAt, v)
	return u
}

// UpdateDisabledAt sets the "disabled_at" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateDisabledAt() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldDisabledAt)
	return u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (u *GameServerUpsert) ClearDisabledAt() *GameServerUpsert {
	u.SetNull(gameserver.FieldDisabledAt)
	return u
}

// SetLastContactAt sets the "last_contact_at" field.
func (u *GameServerUpsert) SetLastContactAt(v time.Time) *GameServerUpsert {
	u.Set(gameserver.FieldLastContactAt, v)
	return u
}

// UpdateLastContactAt sets the "last_contact_at" field to the value that was provided on create.
func (u *GameServerUpsert) UpdateLastContactAt() *GameServerUpsert {
	u.SetExcluded(gameserver.FieldLastContactAt)
	return u
}

// ClearLastContactAt clears the value of the "last_contact_at" field.
func (u *GameServerUpsert) ClearLastContactAt() *GameServerUpsert {
	u.SetNull(gameserver.FieldLastContactAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GameServer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameServerUpsertOne) UpdateNewValues() *GameServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GameServer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GameServerUpsertOne) Ignore() *GameServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameServerUpsertOne) DoNothing() *GameServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameServerCreate.OnConflict
// documentation for more info.
func (u *GameServerUpsertOne) Update(set func(*GameServerUpsert)) *GameServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GameServerUpsertOne) SetCreatedAt(v time.Time) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateCreatedAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *GameServerUpsertOne) SetCreatedBy(v int) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateCreatedBy() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *GameServerUpsertOne) ClearCreatedBy() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *GameServerUpsertOne) SetCreatedWith(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateCreatedWith() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *GameServerUpsertOne) ClearCreatedWith() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GameServerUpsertOne) SetUpdatedAt(v time.Time) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateUpdatedAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GameServerUpsertOne) SetUpdatedBy(v int) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateUpdatedBy() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *GameServerUpsertOne) ClearUpdatedBy() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *GameServerUpsertOne) SetUpdatedWith(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateUpdatedWith() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *GameServerUpsertOne) ClearUpdatedWith() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetName sets the "name" field.
func (u *GameServerUpsertOne) SetName(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateName() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *GameServerUpsertOne) SetDescription(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateDescription() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateDescription()
	})
}

// SetSecret sets the "secret" field.
func (u *GameServerUpsertOne) SetSecret(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateSecret() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateSecret()
	})
}

// ClearSecret clears the value of the "secret" field.
func (u *GameServerUpsertOne) ClearSecret() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearSecret()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *GameServerUpsertOne) SetIPAddress(v string) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateIPAddress() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateIPAddress()
	})
}

// SetMonitoring sets the "monitoring" field.
func (u *GameServerUpsertOne) SetMonitoring(v bool) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetMonitoring(v)
	})
}

// UpdateMonitoring sets the "monitoring" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateMonitoring() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateMonitoring()
	})
}

// ClearMonitoring clears the value of the "monitoring" field.
func (u *GameServerUpsertOne) ClearMonitoring() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearMonitoring()
	})
}

// SetDisabledAt sets the "disabled_at" field.
func (u *GameServerUpsertOne) SetDisabledAt(v time.Time) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetDisabledAt(v)
	})
}

// UpdateDisabledAt sets the "disabled_at" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateDisabledAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateDisabledAt()
	})
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (u *GameServerUpsertOne) ClearDisabledAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearDisabledAt()
	})
}

// SetLastContactAt sets the "last_contact_at" field.
func (u *GameServerUpsertOne) SetLastContactAt(v time.Time) *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.SetLastContactAt(v)
	})
}

// UpdateLastContactAt sets the "last_contact_at" field to the value that was provided on create.
func (u *GameServerUpsertOne) UpdateLastContactAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateLastContactAt()
	})
}

// ClearLastContactAt clears the value of the "last_contact_at" field.
func (u *GameServerUpsertOne) ClearLastContactAt() *GameServerUpsertOne {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearLastContactAt()
	})
}

// Exec executes the query.
func (u *GameServerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameServerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameServerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameServerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameServerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GameServerCreateBulk is the builder for creating many GameServer entities in bulk.
type GameServerCreateBulk struct {
	config
	builders []*GameServerCreate
	conflict []sql.ConflictOption
}

// Save creates the GameServer entities in the database.
func (gscb *GameServerCreateBulk) Save(ctx context.Context) ([]*GameServer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GameServer, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GameServerCreateBulk) SaveX(ctx context.Context) []*GameServer {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GameServerCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GameServerCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameServer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameServerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gscb *GameServerCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameServerUpsertBulk {
	gscb.conflict = opts
	return &GameServerUpsertBulk{
		create: gscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameServer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gscb *GameServerCreateBulk) OnConflictColumns(columns ...string) *GameServerUpsertBulk {
	gscb.conflict = append(gscb.conflict, sql.ConflictColumns(columns...))
	return &GameServerUpsertBulk{
		create: gscb,
	}
}

// GameServerUpsertBulk is the builder for "upsert"-ing
// a bulk of GameServer nodes.
type GameServerUpsertBulk struct {
	create *GameServerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameServer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameServerUpsertBulk) UpdateNewValues() *GameServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameServer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GameServerUpsertBulk) Ignore() *GameServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameServerUpsertBulk) DoNothing() *GameServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameServerCreateBulk.OnConflict
// documentation for more info.
func (u *GameServerUpsertBulk) Update(set func(*GameServerUpsert)) *GameServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GameServerUpsertBulk) SetCreatedAt(v time.Time) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateCreatedAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *GameServerUpsertBulk) SetCreatedBy(v int) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateCreatedBy() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *GameServerUpsertBulk) ClearCreatedBy() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *GameServerUpsertBulk) SetCreatedWith(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateCreatedWith() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *GameServerUpsertBulk) ClearCreatedWith() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GameServerUpsertBulk) SetUpdatedAt(v time.Time) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateUpdatedAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *GameServerUpsertBulk) SetUpdatedBy(v int) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateUpdatedBy() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *GameServerUpsertBulk) ClearUpdatedBy() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *GameServerUpsertBulk) SetUpdatedWith(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateUpdatedWith() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *GameServerUpsertBulk) ClearUpdatedWith() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetName sets the "name" field.
func (u *GameServerUpsertBulk) SetName(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateName() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *GameServerUpsertBulk) SetDescription(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateDescription() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateDescription()
	})
}

// SetSecret sets the "secret" field.
func (u *GameServerUpsertBulk) SetSecret(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateSecret() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateSecret()
	})
}

// ClearSecret clears the value of the "secret" field.
func (u *GameServerUpsertBulk) ClearSecret() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearSecret()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *GameServerUpsertBulk) SetIPAddress(v string) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateIPAddress() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateIPAddress()
	})
}

// SetMonitoring sets the "monitoring" field.
func (u *GameServerUpsertBulk) SetMonitoring(v bool) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetMonitoring(v)
	})
}

// UpdateMonitoring sets the "monitoring" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateMonitoring() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateMonitoring()
	})
}

// ClearMonitoring clears the value of the "monitoring" field.
func (u *GameServerUpsertBulk) ClearMonitoring() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearMonitoring()
	})
}

// SetDisabledAt sets the "disabled_at" field.
func (u *GameServerUpsertBulk) SetDisabledAt(v time.Time) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetDisabledAt(v)
	})
}

// UpdateDisabledAt sets the "disabled_at" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateDisabledAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateDisabledAt()
	})
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (u *GameServerUpsertBulk) ClearDisabledAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearDisabledAt()
	})
}

// SetLastContactAt sets the "last_contact_at" field.
func (u *GameServerUpsertBulk) SetLastContactAt(v time.Time) *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.SetLastContactAt(v)
	})
}

// UpdateLastContactAt sets the "last_contact_at" field to the value that was provided on create.
func (u *GameServerUpsertBulk) UpdateLastContactAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.UpdateLastContactAt()
	})
}

// ClearLastContactAt clears the value of the "last_contact_at" field.
func (u *GameServerUpsertBulk) ClearLastContactAt() *GameServerUpsertBulk {
	return u.Update(func(s *GameServerUpsert) {
		s.ClearLastContactAt()
	})
}

// Exec executes the query.
func (u *GameServerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GameServerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameServerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameServerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
