// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/oauthconnection"
	"github.com/responserms/response/internal/ent/user"
)

// OAuthConnection is the model entity for the OAuthConnection schema.
type OAuthConnection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// ProviderUserID holds the value of the "provider_user_id" field.
	ProviderUserID string `json:"provider_user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthConnectionQuery when eager-loading is set.
	Edges                  OAuthConnectionEdges `json:"edges"`
	user_oauth_connections *int
}

// OAuthConnectionEdges holds the relations/edges for other nodes in the graph.
type OAuthConnectionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthConnectionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthConnection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthconnection.FieldID, oauthconnection.FieldCreatedBy, oauthconnection.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case oauthconnection.FieldCreatedWith, oauthconnection.FieldUpdatedWith, oauthconnection.FieldProvider, oauthconnection.FieldProviderUserID, oauthconnection.FieldName:
			values[i] = new(sql.NullString)
		case oauthconnection.FieldCreatedAt, oauthconnection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case oauthconnection.ForeignKeys[0]: // user_oauth_connections
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OAuthConnection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthConnection fields.
func (oc *OAuthConnection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthconnection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oc.ID = int(value.Int64)
		case oauthconnection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = value.Time
			}
		case oauthconnection.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				oc.CreatedBy = int(value.Int64)
			}
		case oauthconnection.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				oc.CreatedWith = value.String
			}
		case oauthconnection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = value.Time
			}
		case oauthconnection.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				oc.UpdatedBy = int(value.Int64)
			}
		case oauthconnection.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				oc.UpdatedWith = value.String
			}
		case oauthconnection.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				oc.Provider = value.String
			}
		case oauthconnection.FieldProviderUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_user_id", values[i])
			} else if value.Valid {
				oc.ProviderUserID = value.String
			}
		case oauthconnection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oc.Name = value.String
			}
		case oauthconnection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_oauth_connections", value)
			} else if value.Valid {
				oc.user_oauth_connections = new(int)
				*oc.user_oauth_connections = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the OAuthConnection entity.
func (oc *OAuthConnection) QueryUser() *UserQuery {
	return (&OAuthConnectionClient{config: oc.config}).QueryUser(oc)
}

// Update returns a builder for updating this OAuthConnection.
// Note that you need to call OAuthConnection.Unwrap() before calling this method if this OAuthConnection
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OAuthConnection) Update() *OAuthConnectionUpdateOne {
	return (&OAuthConnectionClient{config: oc.config}).UpdateOne(oc)
}

// Unwrap unwraps the OAuthConnection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OAuthConnection) Unwrap() *OAuthConnection {
	tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthConnection is not a transactional entity")
	}
	oc.config.driver = tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OAuthConnection) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthConnection(")
	builder.WriteString(fmt.Sprintf("id=%v", oc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(oc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", oc.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(oc.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(oc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", oc.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(oc.UpdatedWith)
	builder.WriteString(", provider=")
	builder.WriteString(oc.Provider)
	builder.WriteString(", provider_user_id=")
	builder.WriteString(oc.ProviderUserID)
	builder.WriteString(", name=")
	builder.WriteString(oc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// OAuthConnections is a parsable slice of OAuthConnection.
type OAuthConnections []*OAuthConnection

func (oc OAuthConnections) config(cfg config) {
	for _i := range oc {
		oc[_i].config = cfg
	}
}
