// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/vehiclemake"
)

// VehicleMake is the model entity for the VehicleMake schema.
type VehicleMake struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleMakeQuery when eager-loading is set.
	Edges VehicleMakeEdges `json:"edges"`
}

// VehicleMakeEdges holds the relations/edges for other nodes in the graph.
type VehicleMakeEdges struct {
	// Vehicles holds the value of the vehicles edge.
	Vehicles []*Vehicle `json:"vehicles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VehiclesOrErr returns the Vehicles value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleMakeEdges) VehiclesOrErr() ([]*Vehicle, error) {
	if e.loadedTypes[0] {
		return e.Vehicles, nil
	}
	return nil, &NotLoadedError{edge: "vehicles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VehicleMake) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehiclemake.FieldID, vehiclemake.FieldCreatedBy, vehiclemake.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case vehiclemake.FieldCreatedWith, vehiclemake.FieldUpdatedWith, vehiclemake.FieldShort, vehiclemake.FieldTitle, vehiclemake.FieldDescription:
			values[i] = new(sql.NullString)
		case vehiclemake.FieldCreatedAt, vehiclemake.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VehicleMake", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VehicleMake fields.
func (vm *VehicleMake) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehiclemake.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vm.ID = int(value.Int64)
		case vehiclemake.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vm.CreatedAt = value.Time
			}
		case vehiclemake.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vm.CreatedBy = int(value.Int64)
			}
		case vehiclemake.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				vm.CreatedWith = value.String
			}
		case vehiclemake.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vm.UpdatedAt = value.Time
			}
		case vehiclemake.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vm.UpdatedBy = int(value.Int64)
			}
		case vehiclemake.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				vm.UpdatedWith = value.String
			}
		case vehiclemake.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				vm.Short = value.String
			}
		case vehiclemake.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				vm.Title = value.String
			}
		case vehiclemake.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				vm.Description = value.String
			}
		}
	}
	return nil
}

// QueryVehicles queries the "vehicles" edge of the VehicleMake entity.
func (vm *VehicleMake) QueryVehicles() *VehicleQuery {
	return (&VehicleMakeClient{config: vm.config}).QueryVehicles(vm)
}

// Update returns a builder for updating this VehicleMake.
// Note that you need to call VehicleMake.Unwrap() before calling this method if this VehicleMake
// was returned from a transaction, and the transaction was committed or rolled back.
func (vm *VehicleMake) Update() *VehicleMakeUpdateOne {
	return (&VehicleMakeClient{config: vm.config}).UpdateOne(vm)
}

// Unwrap unwraps the VehicleMake entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vm *VehicleMake) Unwrap() *VehicleMake {
	tx, ok := vm.config.driver.(*txDriver)
	if !ok {
		panic("ent: VehicleMake is not a transactional entity")
	}
	vm.config.driver = tx.drv
	return vm
}

// String implements the fmt.Stringer.
func (vm *VehicleMake) String() string {
	var builder strings.Builder
	builder.WriteString("VehicleMake(")
	builder.WriteString(fmt.Sprintf("id=%v", vm.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(vm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", vm.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(vm.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(vm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", vm.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(vm.UpdatedWith)
	builder.WriteString(", short=")
	builder.WriteString(vm.Short)
	builder.WriteString(", title=")
	builder.WriteString(vm.Title)
	builder.WriteString(", description=")
	builder.WriteString(vm.Description)
	builder.WriteByte(')')
	return builder.String()
}

// VehicleMakes is a parsable slice of VehicleMake.
type VehicleMakes []*VehicleMake

func (vm VehicleMakes) config(cfg config) {
	for _i := range vm {
		vm[_i].config = cfg
	}
}
