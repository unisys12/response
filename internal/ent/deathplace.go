// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
)

// DeathPlace is the model entity for the DeathPlace schema.
type DeathPlace struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeathPlaceQuery when eager-loading is set.
	Edges                DeathPlaceEdges `json:"edges"`
	death_place_metadata *int
}

// DeathPlaceEdges holds the relations/edges for other nodes in the graph.
type DeathPlaceEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// DeathCertificates holds the value of the death_certificates edge.
	DeathCertificates []*DeathCertificate `json:"death_certificates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathPlaceEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// DeathCertificatesOrErr returns the DeathCertificates value or an error if the edge
// was not loaded in eager-loading.
func (e DeathPlaceEdges) DeathCertificatesOrErr() ([]*DeathCertificate, error) {
	if e.loadedTypes[1] {
		return e.DeathCertificates, nil
	}
	return nil, &NotLoadedError{edge: "death_certificates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeathPlace) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deathplace.FieldID, deathplace.FieldCreatedBy, deathplace.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case deathplace.FieldCreatedWith, deathplace.FieldUpdatedWith, deathplace.FieldShort, deathplace.FieldTitle, deathplace.FieldDescription:
			values[i] = new(sql.NullString)
		case deathplace.FieldCreatedAt, deathplace.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case deathplace.ForeignKeys[0]: // death_place_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeathPlace", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeathPlace fields.
func (dp *DeathPlace) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deathplace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case deathplace.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dp.CreatedAt = value.Time
			}
		case deathplace.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dp.CreatedBy = int(value.Int64)
			}
		case deathplace.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				dp.CreatedWith = value.String
			}
		case deathplace.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dp.UpdatedAt = value.Time
			}
		case deathplace.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dp.UpdatedBy = int(value.Int64)
			}
		case deathplace.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				dp.UpdatedWith = value.String
			}
		case deathplace.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				dp.Short = value.String
			}
		case deathplace.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				dp.Title = value.String
			}
		case deathplace.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				dp.Description = value.String
			}
		case deathplace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field death_place_metadata", value)
			} else if value.Valid {
				dp.death_place_metadata = new(int)
				*dp.death_place_metadata = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the DeathPlace entity.
func (dp *DeathPlace) QueryMetadata() *MetadataQuery {
	return (&DeathPlaceClient{config: dp.config}).QueryMetadata(dp)
}

// QueryDeathCertificates queries the "death_certificates" edge of the DeathPlace entity.
func (dp *DeathPlace) QueryDeathCertificates() *DeathCertificateQuery {
	return (&DeathPlaceClient{config: dp.config}).QueryDeathCertificates(dp)
}

// Update returns a builder for updating this DeathPlace.
// Note that you need to call DeathPlace.Unwrap() before calling this method if this DeathPlace
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DeathPlace) Update() *DeathPlaceUpdateOne {
	return (&DeathPlaceClient{config: dp.config}).UpdateOne(dp)
}

// Unwrap unwraps the DeathPlace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DeathPlace) Unwrap() *DeathPlace {
	tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeathPlace is not a transactional entity")
	}
	dp.config.driver = tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DeathPlace) String() string {
	var builder strings.Builder
	builder.WriteString("DeathPlace(")
	builder.WriteString(fmt.Sprintf("id=%v", dp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(dp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", dp.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(dp.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(dp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", dp.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(dp.UpdatedWith)
	builder.WriteString(", short=")
	builder.WriteString(dp.Short)
	builder.WriteString(", title=")
	builder.WriteString(dp.Title)
	builder.WriteString(", description=")
	builder.WriteString(dp.Description)
	builder.WriteByte(')')
	return builder.String()
}

// DeathPlaces is a parsable slice of DeathPlace.
type DeathPlaces []*DeathPlace

func (dp DeathPlaces) config(cfg config) {
	for _i := range dp {
		dp[_i].config = cfg
	}
}
