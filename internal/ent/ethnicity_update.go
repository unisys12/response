// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
)

// EthnicityUpdate is the builder for updating Ethnicity entities.
type EthnicityUpdate struct {
	config
	hooks    []Hook
	mutation *EthnicityMutation
}

// Where appends a list predicates to the EthnicityUpdate builder.
func (eu *EthnicityUpdate) Where(ps ...predicate.Ethnicity) *EthnicityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EthnicityUpdate) SetCreatedBy(i int) *EthnicityUpdate {
	eu.mutation.ResetCreatedBy()
	eu.mutation.SetCreatedBy(i)
	return eu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableCreatedBy(i *int) *EthnicityUpdate {
	if i != nil {
		eu.SetCreatedBy(*i)
	}
	return eu
}

// AddCreatedBy adds i to the "created_by" field.
func (eu *EthnicityUpdate) AddCreatedBy(i int) *EthnicityUpdate {
	eu.mutation.AddCreatedBy(i)
	return eu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eu *EthnicityUpdate) ClearCreatedBy() *EthnicityUpdate {
	eu.mutation.ClearCreatedBy()
	return eu
}

// SetCreatedWith sets the "created_with" field.
func (eu *EthnicityUpdate) SetCreatedWith(s string) *EthnicityUpdate {
	eu.mutation.SetCreatedWith(s)
	return eu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableCreatedWith(s *string) *EthnicityUpdate {
	if s != nil {
		eu.SetCreatedWith(*s)
	}
	return eu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (eu *EthnicityUpdate) ClearCreatedWith() *EthnicityUpdate {
	eu.mutation.ClearCreatedWith()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EthnicityUpdate) SetUpdatedAt(t time.Time) *EthnicityUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EthnicityUpdate) SetUpdatedBy(i int) *EthnicityUpdate {
	eu.mutation.ResetUpdatedBy()
	eu.mutation.SetUpdatedBy(i)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableUpdatedBy(i *int) *EthnicityUpdate {
	if i != nil {
		eu.SetUpdatedBy(*i)
	}
	return eu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (eu *EthnicityUpdate) AddUpdatedBy(i int) *EthnicityUpdate {
	eu.mutation.AddUpdatedBy(i)
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EthnicityUpdate) ClearUpdatedBy() *EthnicityUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetUpdatedWith sets the "updated_with" field.
func (eu *EthnicityUpdate) SetUpdatedWith(s string) *EthnicityUpdate {
	eu.mutation.SetUpdatedWith(s)
	return eu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableUpdatedWith(s *string) *EthnicityUpdate {
	if s != nil {
		eu.SetUpdatedWith(*s)
	}
	return eu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (eu *EthnicityUpdate) ClearUpdatedWith() *EthnicityUpdate {
	eu.mutation.ClearUpdatedWith()
	return eu
}

// SetShort sets the "short" field.
func (eu *EthnicityUpdate) SetShort(s string) *EthnicityUpdate {
	eu.mutation.SetShort(s)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EthnicityUpdate) SetTitle(s string) *EthnicityUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EthnicityUpdate) SetDescription(s string) *EthnicityUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableDescription(s *string) *EthnicityUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EthnicityUpdate) ClearDescription() *EthnicityUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (eu *EthnicityUpdate) SetMetadataID(id int) *EthnicityUpdate {
	eu.mutation.SetMetadataID(id)
	return eu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (eu *EthnicityUpdate) SetNillableMetadataID(id *int) *EthnicityUpdate {
	if id != nil {
		eu = eu.SetMetadataID(*id)
	}
	return eu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (eu *EthnicityUpdate) SetMetadata(m *Metadata) *EthnicityUpdate {
	return eu.SetMetadataID(m.ID)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (eu *EthnicityUpdate) AddPersonIDs(ids ...int) *EthnicityUpdate {
	eu.mutation.AddPersonIDs(ids...)
	return eu
}

// AddPeople adds the "people" edges to the Person entity.
func (eu *EthnicityUpdate) AddPeople(p ...*Person) *EthnicityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPersonIDs(ids...)
}

// Mutation returns the EthnicityMutation object of the builder.
func (eu *EthnicityUpdate) Mutation() *EthnicityMutation {
	return eu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (eu *EthnicityUpdate) ClearMetadata() *EthnicityUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// ClearPeople clears all "people" edges to the Person entity.
func (eu *EthnicityUpdate) ClearPeople() *EthnicityUpdate {
	eu.mutation.ClearPeople()
	return eu
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (eu *EthnicityUpdate) RemovePersonIDs(ids ...int) *EthnicityUpdate {
	eu.mutation.RemovePersonIDs(ids...)
	return eu
}

// RemovePeople removes "people" edges to Person entities.
func (eu *EthnicityUpdate) RemovePeople(p ...*Person) *EthnicityUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePersonIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EthnicityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EthnicityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EthnicityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EthnicityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EthnicityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EthnicityUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if ethnicity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ethnicity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ethnicity.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EthnicityUpdate) check() error {
	if v, ok := eu.mutation.Short(); ok {
		if err := ethnicity.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Title(); ok {
		if err := ethnicity.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Description(); ok {
		if err := ethnicity.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (eu *EthnicityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ethnicity.Table,
			Columns: ethnicity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ethnicity.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if value, ok := eu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if eu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if value, ok := eu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldCreatedWith,
		})
	}
	if eu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldCreatedWith,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ethnicity.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if value, ok := eu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if value, ok := eu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldUpdatedWith,
		})
	}
	if eu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldUpdatedWith,
		})
	}
	if value, ok := eu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldShort,
		})
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldTitle,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldDescription,
		})
	}
	if eu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldDescription,
		})
	}
	if eu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ethnicity.MetadataTable,
			Columns: []string{ethnicity.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ethnicity.MetadataTable,
			Columns: []string{ethnicity.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !eu.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ethnicity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EthnicityUpdateOne is the builder for updating a single Ethnicity entity.
type EthnicityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EthnicityMutation
}

// SetCreatedBy sets the "created_by" field.
func (euo *EthnicityUpdateOne) SetCreatedBy(i int) *EthnicityUpdateOne {
	euo.mutation.ResetCreatedBy()
	euo.mutation.SetCreatedBy(i)
	return euo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableCreatedBy(i *int) *EthnicityUpdateOne {
	if i != nil {
		euo.SetCreatedBy(*i)
	}
	return euo
}

// AddCreatedBy adds i to the "created_by" field.
func (euo *EthnicityUpdateOne) AddCreatedBy(i int) *EthnicityUpdateOne {
	euo.mutation.AddCreatedBy(i)
	return euo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (euo *EthnicityUpdateOne) ClearCreatedBy() *EthnicityUpdateOne {
	euo.mutation.ClearCreatedBy()
	return euo
}

// SetCreatedWith sets the "created_with" field.
func (euo *EthnicityUpdateOne) SetCreatedWith(s string) *EthnicityUpdateOne {
	euo.mutation.SetCreatedWith(s)
	return euo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableCreatedWith(s *string) *EthnicityUpdateOne {
	if s != nil {
		euo.SetCreatedWith(*s)
	}
	return euo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (euo *EthnicityUpdateOne) ClearCreatedWith() *EthnicityUpdateOne {
	euo.mutation.ClearCreatedWith()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EthnicityUpdateOne) SetUpdatedAt(t time.Time) *EthnicityUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EthnicityUpdateOne) SetUpdatedBy(i int) *EthnicityUpdateOne {
	euo.mutation.ResetUpdatedBy()
	euo.mutation.SetUpdatedBy(i)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableUpdatedBy(i *int) *EthnicityUpdateOne {
	if i != nil {
		euo.SetUpdatedBy(*i)
	}
	return euo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (euo *EthnicityUpdateOne) AddUpdatedBy(i int) *EthnicityUpdateOne {
	euo.mutation.AddUpdatedBy(i)
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EthnicityUpdateOne) ClearUpdatedBy() *EthnicityUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetUpdatedWith sets the "updated_with" field.
func (euo *EthnicityUpdateOne) SetUpdatedWith(s string) *EthnicityUpdateOne {
	euo.mutation.SetUpdatedWith(s)
	return euo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableUpdatedWith(s *string) *EthnicityUpdateOne {
	if s != nil {
		euo.SetUpdatedWith(*s)
	}
	return euo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (euo *EthnicityUpdateOne) ClearUpdatedWith() *EthnicityUpdateOne {
	euo.mutation.ClearUpdatedWith()
	return euo
}

// SetShort sets the "short" field.
func (euo *EthnicityUpdateOne) SetShort(s string) *EthnicityUpdateOne {
	euo.mutation.SetShort(s)
	return euo
}

// SetTitle sets the "title" field.
func (euo *EthnicityUpdateOne) SetTitle(s string) *EthnicityUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EthnicityUpdateOne) SetDescription(s string) *EthnicityUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableDescription(s *string) *EthnicityUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EthnicityUpdateOne) ClearDescription() *EthnicityUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (euo *EthnicityUpdateOne) SetMetadataID(id int) *EthnicityUpdateOne {
	euo.mutation.SetMetadataID(id)
	return euo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (euo *EthnicityUpdateOne) SetNillableMetadataID(id *int) *EthnicityUpdateOne {
	if id != nil {
		euo = euo.SetMetadataID(*id)
	}
	return euo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (euo *EthnicityUpdateOne) SetMetadata(m *Metadata) *EthnicityUpdateOne {
	return euo.SetMetadataID(m.ID)
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (euo *EthnicityUpdateOne) AddPersonIDs(ids ...int) *EthnicityUpdateOne {
	euo.mutation.AddPersonIDs(ids...)
	return euo
}

// AddPeople adds the "people" edges to the Person entity.
func (euo *EthnicityUpdateOne) AddPeople(p ...*Person) *EthnicityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPersonIDs(ids...)
}

// Mutation returns the EthnicityMutation object of the builder.
func (euo *EthnicityUpdateOne) Mutation() *EthnicityMutation {
	return euo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (euo *EthnicityUpdateOne) ClearMetadata() *EthnicityUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// ClearPeople clears all "people" edges to the Person entity.
func (euo *EthnicityUpdateOne) ClearPeople() *EthnicityUpdateOne {
	euo.mutation.ClearPeople()
	return euo
}

// RemovePersonIDs removes the "people" edge to Person entities by IDs.
func (euo *EthnicityUpdateOne) RemovePersonIDs(ids ...int) *EthnicityUpdateOne {
	euo.mutation.RemovePersonIDs(ids...)
	return euo
}

// RemovePeople removes "people" edges to Person entities.
func (euo *EthnicityUpdateOne) RemovePeople(p ...*Person) *EthnicityUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePersonIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EthnicityUpdateOne) Select(field string, fields ...string) *EthnicityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Ethnicity entity.
func (euo *EthnicityUpdateOne) Save(ctx context.Context) (*Ethnicity, error) {
	var (
		err  error
		node *Ethnicity
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EthnicityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EthnicityUpdateOne) SaveX(ctx context.Context) *Ethnicity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EthnicityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EthnicityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EthnicityUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if ethnicity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ethnicity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ethnicity.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EthnicityUpdateOne) check() error {
	if v, ok := euo.mutation.Short(); ok {
		if err := ethnicity.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Title(); ok {
		if err := ethnicity.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Description(); ok {
		if err := ethnicity.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (euo *EthnicityUpdateOne) sqlSave(ctx context.Context) (_node *Ethnicity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ethnicity.Table,
			Columns: ethnicity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ethnicity.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Ethnicity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ethnicity.FieldID)
		for _, f := range fields {
			if !ethnicity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ethnicity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if value, ok := euo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if euo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ethnicity.FieldCreatedBy,
		})
	}
	if value, ok := euo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldCreatedWith,
		})
	}
	if euo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldCreatedWith,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ethnicity.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if value, ok := euo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: ethnicity.FieldUpdatedBy,
		})
	}
	if value, ok := euo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldUpdatedWith,
		})
	}
	if euo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldUpdatedWith,
		})
	}
	if value, ok := euo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldShort,
		})
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldTitle,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ethnicity.FieldDescription,
		})
	}
	if euo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ethnicity.FieldDescription,
		})
	}
	if euo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ethnicity.MetadataTable,
			Columns: []string{ethnicity.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ethnicity.MetadataTable,
			Columns: []string{ethnicity.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPeopleIDs(); len(nodes) > 0 && !euo.mutation.PeopleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ethnicity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ethnicity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
