// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/responserms/response/internal/structs"
)

// CreateDeathCertificate represents a mutation input for creating deathcertificates.
type CreateDeathCertificate struct {
	CreatedAt             *time.Time
	CreatedBy             *int
	CreatedWith           *string
	UpdatedAt             *time.Time
	UpdatedBy             *int
	UpdatedWith           *string
	Cause                 string
	Comments              *string
	CertifiedAt           *time.Time
	CertifierComments     *string
	RequiresCertification *bool
	Metadata              *int
	Decedent              int
	Manner                *int
	Place                 *int
	Certifier             *int
	CertifiedBy           *int
}

// Mutate applies the CreateDeathCertificate on the DeathCertificateCreate builder.
func (i *CreateDeathCertificate) Mutate(m *DeathCertificateCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetCause(i.Cause)
	if v := i.Comments; v != nil {
		m.SetComments(*v)
	}
	if v := i.CertifiedAt; v != nil {
		m.SetCertifiedAt(*v)
	}
	if v := i.CertifierComments; v != nil {
		m.SetCertifierComments(*v)
	}
	if v := i.RequiresCertification; v != nil {
		m.SetRequiresCertification(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	m.SetDecedentID(i.Decedent)
	if v := i.Manner; v != nil {
		m.SetMannerID(*v)
	}
	if v := i.Place; v != nil {
		m.SetPlaceID(*v)
	}
	if v := i.Certifier; v != nil {
		m.SetCertifierID(*v)
	}
	if v := i.CertifiedBy; v != nil {
		m.SetCertifiedByID(*v)
	}
}

// SetInput applies the change-set in the CreateDeathCertificate on the create builder.
func (c *DeathCertificateCreate) SetInput(i CreateDeathCertificate) *DeathCertificateCreate {
	i.Mutate(c)
	return c
}

// UpdateDeathCertificate represents a mutation input for updating deathcertificates.
type UpdateDeathCertificate struct {
	CreatedBy              *int
	ClearCreatedBy         bool
	CreatedWith            *string
	ClearCreatedWith       bool
	UpdatedAt              *time.Time
	UpdatedBy              *int
	ClearUpdatedBy         bool
	UpdatedWith            *string
	ClearUpdatedWith       bool
	Cause                  *string
	Comments               *string
	ClearComments          bool
	CertifiedAt            *time.Time
	ClearCertifiedAt       bool
	CertifierComments      *string
	ClearCertifierComments bool
	RequiresCertification  *bool
	Metadata               *int
	ClearMetadata          bool
	Decedent               *int
	ClearDecedent          bool
	Manner                 *int
	ClearManner            bool
	Place                  *int
	ClearPlace             bool
	Certifier              *int
	ClearCertifier         bool
	CertifiedBy            *int
	ClearCertifiedBy       bool
}

// Mutate applies the UpdateDeathCertificate on the DeathCertificateMutation.
func (i *UpdateDeathCertificate) Mutate(m *DeathCertificateMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Cause; v != nil {
		m.SetCause(*v)
	}
	if i.ClearComments {
		m.ClearComments()
	}
	if v := i.Comments; v != nil {
		m.SetComments(*v)
	}
	if i.ClearCertifiedAt {
		m.ClearCertifiedAt()
	}
	if v := i.CertifiedAt; v != nil {
		m.SetCertifiedAt(*v)
	}
	if i.ClearCertifierComments {
		m.ClearCertifierComments()
	}
	if v := i.CertifierComments; v != nil {
		m.SetCertifierComments(*v)
	}
	if v := i.RequiresCertification; v != nil {
		m.SetRequiresCertification(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if i.ClearDecedent {
		m.ClearDecedent()
	}
	if v := i.Decedent; v != nil {
		m.SetDecedentID(*v)
	}
	if i.ClearManner {
		m.ClearManner()
	}
	if v := i.Manner; v != nil {
		m.SetMannerID(*v)
	}
	if i.ClearPlace {
		m.ClearPlace()
	}
	if v := i.Place; v != nil {
		m.SetPlaceID(*v)
	}
	if i.ClearCertifier {
		m.ClearCertifier()
	}
	if v := i.Certifier; v != nil {
		m.SetCertifierID(*v)
	}
	if i.ClearCertifiedBy {
		m.ClearCertifiedBy()
	}
	if v := i.CertifiedBy; v != nil {
		m.SetCertifiedByID(*v)
	}
}

// SetInput applies the change-set in the UpdateDeathCertificate on the update builder.
func (u *DeathCertificateUpdate) SetInput(i UpdateDeathCertificate) *DeathCertificateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeathCertificate on the update-one builder.
func (u *DeathCertificateUpdateOne) SetInput(i UpdateDeathCertificate) *DeathCertificateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeathCertifier represents a mutation input for creating deathcertifiers.
type CreateDeathCertifier struct {
	CreatedAt         *time.Time
	CreatedBy         *int
	CreatedWith       *string
	UpdatedAt         *time.Time
	UpdatedBy         *int
	UpdatedWith       *string
	Short             string
	Title             string
	Description       *string
	Metadata          *int
	DeathCertificates []int
}

// Mutate applies the CreateDeathCertifier on the DeathCertifierCreate builder.
func (i *CreateDeathCertifier) Mutate(m *DeathCertifierCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.DeathCertificates; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateDeathCertifier on the create builder.
func (c *DeathCertifierCreate) SetInput(i CreateDeathCertifier) *DeathCertifierCreate {
	i.Mutate(c)
	return c
}

// UpdateDeathCertifier represents a mutation input for updating deathcertifiers.
type UpdateDeathCertifier struct {
	CreatedBy                 *int
	ClearCreatedBy            bool
	CreatedWith               *string
	ClearCreatedWith          bool
	UpdatedAt                 *time.Time
	UpdatedBy                 *int
	ClearUpdatedBy            bool
	UpdatedWith               *string
	ClearUpdatedWith          bool
	Short                     *string
	Title                     *string
	Description               *string
	ClearDescription          bool
	Metadata                  *int
	ClearMetadata             bool
	AddDeathCertificateIDs    []int
	RemoveDeathCertificateIDs []int
}

// Mutate applies the UpdateDeathCertifier on the DeathCertifierMutation.
func (i *UpdateDeathCertifier) Mutate(m *DeathCertifierMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddDeathCertificateIDs; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
	if ids := i.RemoveDeathCertificateIDs; len(ids) > 0 {
		m.RemoveDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateDeathCertifier on the update builder.
func (u *DeathCertifierUpdate) SetInput(i UpdateDeathCertifier) *DeathCertifierUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeathCertifier on the update-one builder.
func (u *DeathCertifierUpdateOne) SetInput(i UpdateDeathCertifier) *DeathCertifierUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeathManner represents a mutation input for creating deathmanners.
type CreateDeathManner struct {
	CreatedAt         *time.Time
	CreatedBy         *int
	CreatedWith       *string
	UpdatedAt         *time.Time
	UpdatedBy         *int
	UpdatedWith       *string
	Short             string
	Title             string
	Description       *string
	Metadata          *int
	DeathCertificates []int
}

// Mutate applies the CreateDeathManner on the DeathMannerCreate builder.
func (i *CreateDeathManner) Mutate(m *DeathMannerCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.DeathCertificates; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateDeathManner on the create builder.
func (c *DeathMannerCreate) SetInput(i CreateDeathManner) *DeathMannerCreate {
	i.Mutate(c)
	return c
}

// UpdateDeathManner represents a mutation input for updating deathmanners.
type UpdateDeathManner struct {
	CreatedBy                 *int
	ClearCreatedBy            bool
	CreatedWith               *string
	ClearCreatedWith          bool
	UpdatedAt                 *time.Time
	UpdatedBy                 *int
	ClearUpdatedBy            bool
	UpdatedWith               *string
	ClearUpdatedWith          bool
	Short                     *string
	Title                     *string
	Description               *string
	ClearDescription          bool
	Metadata                  *int
	ClearMetadata             bool
	AddDeathCertificateIDs    []int
	RemoveDeathCertificateIDs []int
}

// Mutate applies the UpdateDeathManner on the DeathMannerMutation.
func (i *UpdateDeathManner) Mutate(m *DeathMannerMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddDeathCertificateIDs; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
	if ids := i.RemoveDeathCertificateIDs; len(ids) > 0 {
		m.RemoveDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateDeathManner on the update builder.
func (u *DeathMannerUpdate) SetInput(i UpdateDeathManner) *DeathMannerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeathManner on the update-one builder.
func (u *DeathMannerUpdateOne) SetInput(i UpdateDeathManner) *DeathMannerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateDeathPlace represents a mutation input for creating deathplaces.
type CreateDeathPlace struct {
	CreatedAt         *time.Time
	CreatedBy         *int
	CreatedWith       *string
	UpdatedAt         *time.Time
	UpdatedBy         *int
	UpdatedWith       *string
	Short             string
	Title             string
	Description       *string
	Metadata          *int
	DeathCertificates []int
}

// Mutate applies the CreateDeathPlace on the DeathPlaceCreate builder.
func (i *CreateDeathPlace) Mutate(m *DeathPlaceCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.DeathCertificates; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateDeathPlace on the create builder.
func (c *DeathPlaceCreate) SetInput(i CreateDeathPlace) *DeathPlaceCreate {
	i.Mutate(c)
	return c
}

// UpdateDeathPlace represents a mutation input for updating deathplaces.
type UpdateDeathPlace struct {
	CreatedBy                 *int
	ClearCreatedBy            bool
	CreatedWith               *string
	ClearCreatedWith          bool
	UpdatedAt                 *time.Time
	UpdatedBy                 *int
	ClearUpdatedBy            bool
	UpdatedWith               *string
	ClearUpdatedWith          bool
	Short                     *string
	Title                     *string
	Description               *string
	ClearDescription          bool
	Metadata                  *int
	ClearMetadata             bool
	AddDeathCertificateIDs    []int
	RemoveDeathCertificateIDs []int
}

// Mutate applies the UpdateDeathPlace on the DeathPlaceMutation.
func (i *UpdateDeathPlace) Mutate(m *DeathPlaceMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddDeathCertificateIDs; len(ids) > 0 {
		m.AddDeathCertificateIDs(ids...)
	}
	if ids := i.RemoveDeathCertificateIDs; len(ids) > 0 {
		m.RemoveDeathCertificateIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateDeathPlace on the update builder.
func (u *DeathPlaceUpdate) SetInput(i UpdateDeathPlace) *DeathPlaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateDeathPlace on the update-one builder.
func (u *DeathPlaceUpdateOne) SetInput(i UpdateDeathPlace) *DeathPlaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateEthnicity represents a mutation input for creating ethnicities.
type CreateEthnicity struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	Metadata    *int
	People      []int
}

// Mutate applies the CreateEthnicity on the EthnicityCreate builder.
func (i *CreateEthnicity) Mutate(m *EthnicityCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.People; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateEthnicity on the create builder.
func (c *EthnicityCreate) SetInput(i CreateEthnicity) *EthnicityCreate {
	i.Mutate(c)
	return c
}

// UpdateEthnicity represents a mutation input for updating ethnicities.
type UpdateEthnicity struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	Metadata         *int
	ClearMetadata    bool
	AddPersonIDs     []int
	RemovePersonIDs  []int
}

// Mutate applies the UpdateEthnicity on the EthnicityMutation.
func (i *UpdateEthnicity) Mutate(m *EthnicityMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddPersonIDs; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
	if ids := i.RemovePersonIDs; len(ids) > 0 {
		m.RemovePersonIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateEthnicity on the update builder.
func (u *EthnicityUpdate) SetInput(i UpdateEthnicity) *EthnicityUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateEthnicity on the update-one builder.
func (u *EthnicityUpdateOne) SetInput(i UpdateEthnicity) *EthnicityUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGameServer represents a mutation input for creating gameservers.
type CreateGameServer struct {
	CreatedAt     *time.Time
	CreatedBy     *int
	CreatedWith   *string
	UpdatedAt     *time.Time
	UpdatedBy     *int
	UpdatedWith   *string
	Name          string `validator:"required,"`
	Description   string `validator:"lte:200"`
	Secret        *string
	IPAddress     string `validator:"ip"`
	Monitoring    *bool
	DisabledAt    *time.Time
	LastContactAt *time.Time
	Metadata      *int
	Players       []int
}

// Mutate applies the CreateGameServer on the GameServerCreate builder.
func (i *CreateGameServer) Mutate(m *GameServerCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.Secret; v != nil {
		m.SetSecret(*v)
	}
	m.SetIPAddress(i.IPAddress)
	if v := i.Monitoring; v != nil {
		m.SetMonitoring(*v)
	}
	if v := i.DisabledAt; v != nil {
		m.SetDisabledAt(*v)
	}
	if v := i.LastContactAt; v != nil {
		m.SetLastContactAt(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.Players; len(ids) > 0 {
		m.AddPlayerIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateGameServer on the create builder.
func (c *GameServerCreate) SetInput(i CreateGameServer) *GameServerCreate {
	i.Mutate(c)
	return c
}

// UpdateGameServer represents a mutation input for updating gameservers.
type UpdateGameServer struct {
	CreatedBy          *int
	ClearCreatedBy     bool
	CreatedWith        *string
	ClearCreatedWith   bool
	UpdatedAt          *time.Time
	UpdatedBy          *int
	ClearUpdatedBy     bool
	UpdatedWith        *string
	ClearUpdatedWith   bool
	Name               *string `validator:""`
	Description        *string `validator:"lte:200"`
	Secret             *string
	ClearSecret        bool
	IPAddress          *string `validator:"ip"`
	Monitoring         *bool
	ClearMonitoring    bool
	DisabledAt         *time.Time
	ClearDisabledAt    bool
	LastContactAt      *time.Time
	ClearLastContactAt bool
	Metadata           *int
	ClearMetadata      bool
	AddPlayerIDs       []int
	RemovePlayerIDs    []int
}

// Mutate applies the UpdateGameServer on the GameServerMutation.
func (i *UpdateGameServer) Mutate(m *GameServerMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearSecret {
		m.ClearSecret()
	}
	if v := i.Secret; v != nil {
		m.SetSecret(*v)
	}
	if v := i.IPAddress; v != nil {
		m.SetIPAddress(*v)
	}
	if i.ClearMonitoring {
		m.ClearMonitoring()
	}
	if v := i.Monitoring; v != nil {
		m.SetMonitoring(*v)
	}
	if i.ClearDisabledAt {
		m.ClearDisabledAt()
	}
	if v := i.DisabledAt; v != nil {
		m.SetDisabledAt(*v)
	}
	if i.ClearLastContactAt {
		m.ClearLastContactAt()
	}
	if v := i.LastContactAt; v != nil {
		m.SetLastContactAt(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddPlayerIDs; len(ids) > 0 {
		m.AddPlayerIDs(ids...)
	}
	if ids := i.RemovePlayerIDs; len(ids) > 0 {
		m.RemovePlayerIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateGameServer on the update builder.
func (u *GameServerUpdate) SetInput(i UpdateGameServer) *GameServerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGameServer on the update-one builder.
func (u *GameServerUpdateOne) SetInput(i UpdateGameServer) *GameServerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateMetadata represents a mutation input for creating metadataslice.
type CreateMetadata struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Data        map[string]interface{}
}

// Mutate applies the CreateMetadata on the MetadataCreate builder.
func (i *CreateMetadata) Mutate(m *MetadataCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetData(i.Data)
}

// SetInput applies the change-set in the CreateMetadata on the create builder.
func (c *MetadataCreate) SetInput(i CreateMetadata) *MetadataCreate {
	i.Mutate(c)
	return c
}

// UpdateMetadata represents a mutation input for updating metadataslice.
type UpdateMetadata struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Data             *map[string]interface{}
}

// Mutate applies the UpdateMetadata on the MetadataMutation.
func (i *UpdateMetadata) Mutate(m *MetadataMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Data; v != nil {
		m.SetData(*v)
	}
}

// SetInput applies the change-set in the UpdateMetadata on the update builder.
func (u *MetadataUpdate) SetInput(i UpdateMetadata) *MetadataUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateMetadata on the update-one builder.
func (u *MetadataUpdateOne) SetInput(i UpdateMetadata) *MetadataUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOAuthConnection represents a mutation input for creating oauthconnections.
type CreateOAuthConnection struct {
	CreatedAt      *time.Time
	CreatedBy      *int
	CreatedWith    *string
	UpdatedAt      *time.Time
	UpdatedBy      *int
	UpdatedWith    *string
	Provider       string
	ProviderUserID string
	Name           string
	User           *int
}

// Mutate applies the CreateOAuthConnection on the OAuthConnectionCreate builder.
func (i *CreateOAuthConnection) Mutate(m *OAuthConnectionCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetProvider(i.Provider)
	m.SetProviderUserID(i.ProviderUserID)
	m.SetName(i.Name)
	if v := i.User; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateOAuthConnection on the create builder.
func (c *OAuthConnectionCreate) SetInput(i CreateOAuthConnection) *OAuthConnectionCreate {
	i.Mutate(c)
	return c
}

// UpdateOAuthConnection represents a mutation input for updating oauthconnections.
type UpdateOAuthConnection struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Provider         *string
	ProviderUserID   *string
	Name             *string
	User             *int
	ClearUser        bool
}

// Mutate applies the UpdateOAuthConnection on the OAuthConnectionMutation.
func (i *UpdateOAuthConnection) Mutate(m *OAuthConnectionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
	if v := i.ProviderUserID; v != nil {
		m.SetProviderUserID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.User; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateOAuthConnection on the update builder.
func (u *OAuthConnectionUpdate) SetInput(i UpdateOAuthConnection) *OAuthConnectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOAuthConnection on the update-one builder.
func (u *OAuthConnectionUpdateOne) SetInput(i UpdateOAuthConnection) *OAuthConnectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreatePerson represents a mutation input for creating persons.
type CreatePerson struct {
	CreatedAt            *time.Time
	CreatedBy            *int
	CreatedWith          *string
	UpdatedAt            *time.Time
	UpdatedBy            *int
	UpdatedWith          *string
	FirstName            *string
	MiddleName           *string
	LastName             *string
	Suffix               *string
	DateOfBirth          *time.Time
	Birthplace           *string
	DeceasedAt           *time.Time
	ArchivedAt           *time.Time
	Metadata             *int
	VehicleRegistrations []int
	Race                 *int
	Ethnicity            *int
	Sex                  *int
	User                 *int
	DeathCertificate     *int
	CertifiedDeaths      []int
}

// Mutate applies the CreatePerson on the PersonCreate builder.
func (i *CreatePerson) Mutate(m *PersonCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.MiddleName; v != nil {
		m.SetMiddleName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Suffix; v != nil {
		m.SetSuffix(*v)
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(*v)
	}
	if v := i.Birthplace; v != nil {
		m.SetBirthplace(*v)
	}
	if v := i.DeceasedAt; v != nil {
		m.SetDeceasedAt(*v)
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.VehicleRegistrations; len(ids) > 0 {
		m.AddVehicleRegistrationIDs(ids...)
	}
	if v := i.Race; v != nil {
		m.SetRaceID(*v)
	}
	if v := i.Ethnicity; v != nil {
		m.SetEthnicityID(*v)
	}
	if v := i.Sex; v != nil {
		m.SetSexID(*v)
	}
	if v := i.User; v != nil {
		m.SetUserID(*v)
	}
	if v := i.DeathCertificate; v != nil {
		m.SetDeathCertificateID(*v)
	}
	if ids := i.CertifiedDeaths; len(ids) > 0 {
		m.AddCertifiedDeathIDs(ids...)
	}
}

// SetInput applies the change-set in the CreatePerson on the create builder.
func (c *PersonCreate) SetInput(i CreatePerson) *PersonCreate {
	i.Mutate(c)
	return c
}

// UpdatePerson represents a mutation input for updating persons.
type UpdatePerson struct {
	CreatedBy                    *int
	ClearCreatedBy               bool
	CreatedWith                  *string
	ClearCreatedWith             bool
	UpdatedAt                    *time.Time
	UpdatedBy                    *int
	ClearUpdatedBy               bool
	UpdatedWith                  *string
	ClearUpdatedWith             bool
	FirstName                    *string
	ClearFirstName               bool
	MiddleName                   *string
	ClearMiddleName              bool
	LastName                     *string
	ClearLastName                bool
	Suffix                       *string
	ClearSuffix                  bool
	DateOfBirth                  *time.Time
	ClearDateOfBirth             bool
	Birthplace                   *string
	ClearBirthplace              bool
	DeceasedAt                   *time.Time
	ClearDeceasedAt              bool
	ArchivedAt                   *time.Time
	ClearArchivedAt              bool
	Metadata                     *int
	ClearMetadata                bool
	AddVehicleRegistrationIDs    []int
	RemoveVehicleRegistrationIDs []int
	Race                         *int
	ClearRace                    bool
	Ethnicity                    *int
	ClearEthnicity               bool
	Sex                          *int
	ClearSex                     bool
	User                         *int
	ClearUser                    bool
	DeathCertificate             *int
	ClearDeathCertificate        bool
	AddCertifiedDeathIDs         []int
	RemoveCertifiedDeathIDs      []int
}

// Mutate applies the UpdatePerson on the PersonMutation.
func (i *UpdatePerson) Mutate(m *PersonMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearMiddleName {
		m.ClearMiddleName()
	}
	if v := i.MiddleName; v != nil {
		m.SetMiddleName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearSuffix {
		m.ClearSuffix()
	}
	if v := i.Suffix; v != nil {
		m.SetSuffix(*v)
	}
	if i.ClearDateOfBirth {
		m.ClearDateOfBirth()
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(*v)
	}
	if i.ClearBirthplace {
		m.ClearBirthplace()
	}
	if v := i.Birthplace; v != nil {
		m.SetBirthplace(*v)
	}
	if i.ClearDeceasedAt {
		m.ClearDeceasedAt()
	}
	if v := i.DeceasedAt; v != nil {
		m.SetDeceasedAt(*v)
	}
	if i.ClearArchivedAt {
		m.ClearArchivedAt()
	}
	if v := i.ArchivedAt; v != nil {
		m.SetArchivedAt(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddVehicleRegistrationIDs; len(ids) > 0 {
		m.AddVehicleRegistrationIDs(ids...)
	}
	if ids := i.RemoveVehicleRegistrationIDs; len(ids) > 0 {
		m.RemoveVehicleRegistrationIDs(ids...)
	}
	if i.ClearRace {
		m.ClearRace()
	}
	if v := i.Race; v != nil {
		m.SetRaceID(*v)
	}
	if i.ClearEthnicity {
		m.ClearEthnicity()
	}
	if v := i.Ethnicity; v != nil {
		m.SetEthnicityID(*v)
	}
	if i.ClearSex {
		m.ClearSex()
	}
	if v := i.Sex; v != nil {
		m.SetSexID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.User; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearDeathCertificate {
		m.ClearDeathCertificate()
	}
	if v := i.DeathCertificate; v != nil {
		m.SetDeathCertificateID(*v)
	}
	if ids := i.AddCertifiedDeathIDs; len(ids) > 0 {
		m.AddCertifiedDeathIDs(ids...)
	}
	if ids := i.RemoveCertifiedDeathIDs; len(ids) > 0 {
		m.RemoveCertifiedDeathIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdatePerson on the update builder.
func (u *PersonUpdate) SetInput(i UpdatePerson) *PersonUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdatePerson on the update-one builder.
func (u *PersonUpdateOne) SetInput(i UpdatePerson) *PersonUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreatePlayer represents a mutation input for creating players.
type CreatePlayer struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Name        string
	Metadata    *int
	Servers     []int
	Identifiers []int
}

// Mutate applies the CreatePlayer on the PlayerCreate builder.
func (i *CreatePlayer) Mutate(m *PlayerCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetName(i.Name)
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.Servers; len(ids) > 0 {
		m.AddServerIDs(ids...)
	}
	if ids := i.Identifiers; len(ids) > 0 {
		m.AddIdentifierIDs(ids...)
	}
}

// SetInput applies the change-set in the CreatePlayer on the create builder.
func (c *PlayerCreate) SetInput(i CreatePlayer) *PlayerCreate {
	i.Mutate(c)
	return c
}

// UpdatePlayer represents a mutation input for updating players.
type UpdatePlayer struct {
	CreatedBy           *int
	ClearCreatedBy      bool
	CreatedWith         *string
	ClearCreatedWith    bool
	UpdatedAt           *time.Time
	UpdatedBy           *int
	ClearUpdatedBy      bool
	UpdatedWith         *string
	ClearUpdatedWith    bool
	Name                *string
	Metadata            *int
	ClearMetadata       bool
	AddServerIDs        []int
	RemoveServerIDs     []int
	AddIdentifierIDs    []int
	RemoveIdentifierIDs []int
}

// Mutate applies the UpdatePlayer on the PlayerMutation.
func (i *UpdatePlayer) Mutate(m *PlayerMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddServerIDs; len(ids) > 0 {
		m.AddServerIDs(ids...)
	}
	if ids := i.RemoveServerIDs; len(ids) > 0 {
		m.RemoveServerIDs(ids...)
	}
	if ids := i.AddIdentifierIDs; len(ids) > 0 {
		m.AddIdentifierIDs(ids...)
	}
	if ids := i.RemoveIdentifierIDs; len(ids) > 0 {
		m.RemoveIdentifierIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdatePlayer on the update builder.
func (u *PlayerUpdate) SetInput(i UpdatePlayer) *PlayerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdatePlayer on the update-one builder.
func (u *PlayerUpdateOne) SetInput(i UpdatePlayer) *PlayerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreatePlayerIdentifier represents a mutation input for creating playeridentifiers.
type CreatePlayerIdentifier struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Value       string
	Player      *int
}

// Mutate applies the CreatePlayerIdentifier on the PlayerIdentifierCreate builder.
func (i *CreatePlayerIdentifier) Mutate(m *PlayerIdentifierCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetValue(i.Value)
	if v := i.Player; v != nil {
		m.SetPlayerID(*v)
	}
}

// SetInput applies the change-set in the CreatePlayerIdentifier on the create builder.
func (c *PlayerIdentifierCreate) SetInput(i CreatePlayerIdentifier) *PlayerIdentifierCreate {
	i.Mutate(c)
	return c
}

// UpdatePlayerIdentifier represents a mutation input for updating playeridentifiers.
type UpdatePlayerIdentifier struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Player           *int
	ClearPlayer      bool
}

// Mutate applies the UpdatePlayerIdentifier on the PlayerIdentifierMutation.
func (i *UpdatePlayerIdentifier) Mutate(m *PlayerIdentifierMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if i.ClearPlayer {
		m.ClearPlayer()
	}
	if v := i.Player; v != nil {
		m.SetPlayerID(*v)
	}
}

// SetInput applies the change-set in the UpdatePlayerIdentifier on the update builder.
func (u *PlayerIdentifierUpdate) SetInput(i UpdatePlayerIdentifier) *PlayerIdentifierUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdatePlayerIdentifier on the update-one builder.
func (u *PlayerIdentifierUpdateOne) SetInput(i UpdatePlayerIdentifier) *PlayerIdentifierUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateRace represents a mutation input for creating races.
type CreateRace struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	People      []int
}

// Mutate applies the CreateRace on the RaceCreate builder.
func (i *CreateRace) Mutate(m *RaceCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.People; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateRace on the create builder.
func (c *RaceCreate) SetInput(i CreateRace) *RaceCreate {
	i.Mutate(c)
	return c
}

// UpdateRace represents a mutation input for updating races.
type UpdateRace struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	AddPersonIDs     []int
	RemovePersonIDs  []int
}

// Mutate applies the UpdateRace on the RaceMutation.
func (i *UpdateRace) Mutate(m *RaceMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.AddPersonIDs; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
	if ids := i.RemovePersonIDs; len(ids) > 0 {
		m.RemovePersonIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateRace on the update builder.
func (u *RaceUpdate) SetInput(i UpdateRace) *RaceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateRace on the update-one builder.
func (u *RaceUpdateOne) SetInput(i UpdateRace) *RaceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSession represents a mutation input for creating sessions.
type CreateSession struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	StartedAt   time.Time
	StartedFrom *string
	IPAddress   *string
	EndedAt     time.Time
}

// Mutate applies the CreateSession on the SessionCreate builder.
func (i *CreateSession) Mutate(m *SessionCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetStartedAt(i.StartedAt)
	if v := i.StartedFrom; v != nil {
		m.SetStartedFrom(*v)
	}
	if v := i.IPAddress; v != nil {
		m.SetIPAddress(*v)
	}
	m.SetEndedAt(i.EndedAt)
}

// SetInput applies the change-set in the CreateSession on the create builder.
func (c *SessionCreate) SetInput(i CreateSession) *SessionCreate {
	i.Mutate(c)
	return c
}

// UpdateSession represents a mutation input for updating sessions.
type UpdateSession struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	StartedAt        *time.Time
	StartedFrom      *string
	ClearStartedFrom bool
	IPAddress        *string
	ClearIPAddress   bool
	EndedAt          *time.Time
}

// Mutate applies the UpdateSession on the SessionMutation.
func (i *UpdateSession) Mutate(m *SessionMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.StartedAt; v != nil {
		m.SetStartedAt(*v)
	}
	if i.ClearStartedFrom {
		m.ClearStartedFrom()
	}
	if v := i.StartedFrom; v != nil {
		m.SetStartedFrom(*v)
	}
	if i.ClearIPAddress {
		m.ClearIPAddress()
	}
	if v := i.IPAddress; v != nil {
		m.SetIPAddress(*v)
	}
	if v := i.EndedAt; v != nil {
		m.SetEndedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateSession on the update builder.
func (u *SessionUpdate) SetInput(i UpdateSession) *SessionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSession on the update-one builder.
func (u *SessionUpdateOne) SetInput(i UpdateSession) *SessionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSetting represents a mutation input for creating settings.
type CreateSetting struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Key         string
	Data        *structs.SettingData
}

// Mutate applies the CreateSetting on the SettingCreate builder.
func (i *CreateSetting) Mutate(m *SettingCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetKey(i.Key)
	if v := i.Data; v != nil {
		m.SetData(*v)
	}
}

// SetInput applies the change-set in the CreateSetting on the create builder.
func (c *SettingCreate) SetInput(i CreateSetting) *SettingCreate {
	i.Mutate(c)
	return c
}

// UpdateSetting represents a mutation input for updating settings.
type UpdateSetting struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Key              *string
	Data             *structs.SettingData
	ClearData        bool
}

// Mutate applies the UpdateSetting on the SettingMutation.
func (i *UpdateSetting) Mutate(m *SettingMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	if i.ClearData {
		m.ClearData()
	}
	if v := i.Data; v != nil {
		m.SetData(*v)
	}
}

// SetInput applies the change-set in the UpdateSetting on the update builder.
func (u *SettingUpdate) SetInput(i UpdateSetting) *SettingUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSetting on the update-one builder.
func (u *SettingUpdateOne) SetInput(i UpdateSetting) *SettingUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSex represents a mutation input for creating sexes.
type CreateSex struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	Metadata    *int
	People      []int
}

// Mutate applies the CreateSex on the SexCreate builder.
func (i *CreateSex) Mutate(m *SexCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.People; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateSex on the create builder.
func (c *SexCreate) SetInput(i CreateSex) *SexCreate {
	i.Mutate(c)
	return c
}

// UpdateSex represents a mutation input for updating sexes.
type UpdateSex struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	Metadata         *int
	ClearMetadata    bool
	AddPersonIDs     []int
	RemovePersonIDs  []int
}

// Mutate applies the UpdateSex on the SexMutation.
func (i *UpdateSex) Mutate(m *SexMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddPersonIDs; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
	if ids := i.RemovePersonIDs; len(ids) > 0 {
		m.RemovePersonIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateSex on the update builder.
func (u *SexUpdate) SetInput(i UpdateSex) *SexUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSex on the update-one builder.
func (u *SexUpdateOne) SetInput(i UpdateSex) *SexUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateState represents a mutation input for creating states.
type CreateState struct {
	CreatedAt            *time.Time
	CreatedBy            *int
	CreatedWith          *string
	UpdatedAt            *time.Time
	UpdatedBy            *int
	UpdatedWith          *string
	Short                string
	Title                string
	Description          *string
	VehicleRegistrations []int
}

// Mutate applies the CreateState on the StateCreate builder.
func (i *CreateState) Mutate(m *StateCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.VehicleRegistrations; len(ids) > 0 {
		m.AddVehicleRegistrationIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateState on the create builder.
func (c *StateCreate) SetInput(i CreateState) *StateCreate {
	i.Mutate(c)
	return c
}

// UpdateState represents a mutation input for updating states.
type UpdateState struct {
	CreatedBy                    *int
	ClearCreatedBy               bool
	CreatedWith                  *string
	ClearCreatedWith             bool
	UpdatedAt                    *time.Time
	UpdatedBy                    *int
	ClearUpdatedBy               bool
	UpdatedWith                  *string
	ClearUpdatedWith             bool
	Short                        *string
	Title                        *string
	Description                  *string
	ClearDescription             bool
	AddVehicleRegistrationIDs    []int
	RemoveVehicleRegistrationIDs []int
}

// Mutate applies the UpdateState on the StateMutation.
func (i *UpdateState) Mutate(m *StateMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.AddVehicleRegistrationIDs; len(ids) > 0 {
		m.AddVehicleRegistrationIDs(ids...)
	}
	if ids := i.RemoveVehicleRegistrationIDs; len(ids) > 0 {
		m.RemoveVehicleRegistrationIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateState on the update builder.
func (u *StateUpdate) SetInput(i UpdateState) *StateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateState on the update-one builder.
func (u *StateUpdateOne) SetInput(i UpdateState) *StateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUser represents a mutation input for creating users.
type CreateUser struct {
	CreatedAt        *time.Time
	CreatedBy        *int
	CreatedWith      *string
	UpdatedAt        *time.Time
	UpdatedBy        *int
	UpdatedWith      *string
	Name             string
	Email            string
	Password         *string
	AvatarURL        *string
	Permissions      *[]int
	FirstSetupAt     *time.Time
	Metadata         *int
	OauthConnections []int
	People           []int
}

// Mutate applies the CreateUser on the UserCreate builder.
func (i *CreateUser) Mutate(m *UserCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if v := i.Permissions; v != nil {
		m.SetPermissions(*v)
	}
	if v := i.FirstSetupAt; v != nil {
		m.SetFirstSetupAt(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.OauthConnections; len(ids) > 0 {
		m.AddOauthConnectionIDs(ids...)
	}
	if ids := i.People; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUser on the create builder.
func (c *UserCreate) SetInput(i CreateUser) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUser represents a mutation input for updating users.
type UpdateUser struct {
	CreatedBy                *int
	ClearCreatedBy           bool
	CreatedWith              *string
	ClearCreatedWith         bool
	UpdatedAt                *time.Time
	UpdatedBy                *int
	ClearUpdatedBy           bool
	UpdatedWith              *string
	ClearUpdatedWith         bool
	Name                     *string
	Email                    *string
	Password                 *string
	ClearPassword            bool
	AvatarURL                *string
	ClearAvatarURL           bool
	Permissions              *[]int
	ClearPermissions         bool
	FirstSetupAt             *time.Time
	ClearFirstSetupAt        bool
	Metadata                 *int
	ClearMetadata            bool
	AddOauthConnectionIDs    []int
	RemoveOauthConnectionIDs []int
	AddPersonIDs             []int
	RemovePersonIDs          []int
}

// Mutate applies the UpdateUser on the UserMutation.
func (i *UpdateUser) Mutate(m *UserMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearAvatarURL {
		m.ClearAvatarURL()
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if i.ClearPermissions {
		m.ClearPermissions()
	}
	if v := i.Permissions; v != nil {
		m.SetPermissions(*v)
	}
	if i.ClearFirstSetupAt {
		m.ClearFirstSetupAt()
	}
	if v := i.FirstSetupAt; v != nil {
		m.SetFirstSetupAt(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddOauthConnectionIDs; len(ids) > 0 {
		m.AddOauthConnectionIDs(ids...)
	}
	if ids := i.RemoveOauthConnectionIDs; len(ids) > 0 {
		m.RemoveOauthConnectionIDs(ids...)
	}
	if ids := i.AddPersonIDs; len(ids) > 0 {
		m.AddPersonIDs(ids...)
	}
	if ids := i.RemovePersonIDs; len(ids) > 0 {
		m.RemovePersonIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUser on the update builder.
func (u *UserUpdate) SetInput(i UpdateUser) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUser on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUser) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicle represents a mutation input for creating vehicles.
type CreateVehicle struct {
	CreatedAt     *time.Time
	CreatedBy     *int
	CreatedWith   *string
	UpdatedAt     *time.Time
	UpdatedBy     *int
	UpdatedWith   *string
	Vin           *string
	Style         *string
	ExtraFeatures *time.Time
	PrivateNotes  *string
	Metadata      *int
	Registrations []int
	Make          *int
	Model         *int
	MajorColor    *int
	MinorColor    *int
	Class         *int
}

// Mutate applies the CreateVehicle on the VehicleCreate builder.
func (i *CreateVehicle) Mutate(m *VehicleCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Vin; v != nil {
		m.SetVin(*v)
	}
	if v := i.Style; v != nil {
		m.SetStyle(*v)
	}
	if v := i.ExtraFeatures; v != nil {
		m.SetExtraFeatures(*v)
	}
	if v := i.PrivateNotes; v != nil {
		m.SetPrivateNotes(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.Registrations; len(ids) > 0 {
		m.AddRegistrationIDs(ids...)
	}
	if v := i.Make; v != nil {
		m.SetMakeID(*v)
	}
	if v := i.Model; v != nil {
		m.SetModelID(*v)
	}
	if v := i.MajorColor; v != nil {
		m.SetMajorColorID(*v)
	}
	if v := i.MinorColor; v != nil {
		m.SetMinorColorID(*v)
	}
	if v := i.Class; v != nil {
		m.SetClassID(*v)
	}
}

// SetInput applies the change-set in the CreateVehicle on the create builder.
func (c *VehicleCreate) SetInput(i CreateVehicle) *VehicleCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicle represents a mutation input for updating vehicles.
type UpdateVehicle struct {
	CreatedBy             *int
	ClearCreatedBy        bool
	CreatedWith           *string
	ClearCreatedWith      bool
	UpdatedAt             *time.Time
	UpdatedBy             *int
	ClearUpdatedBy        bool
	UpdatedWith           *string
	ClearUpdatedWith      bool
	Vin                   *string
	ClearVin              bool
	Style                 *string
	ClearStyle            bool
	ExtraFeatures         *time.Time
	ClearExtraFeatures    bool
	PrivateNotes          *string
	ClearPrivateNotes     bool
	Metadata              *int
	ClearMetadata         bool
	AddRegistrationIDs    []int
	RemoveRegistrationIDs []int
	Make                  *int
	ClearMake             bool
	Model                 *int
	ClearModel            bool
	MajorColor            *int
	ClearMajorColor       bool
	MinorColor            *int
	ClearMinorColor       bool
	Class                 *int
	ClearClass            bool
}

// Mutate applies the UpdateVehicle on the VehicleMutation.
func (i *UpdateVehicle) Mutate(m *VehicleMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if i.ClearVin {
		m.ClearVin()
	}
	if v := i.Vin; v != nil {
		m.SetVin(*v)
	}
	if i.ClearStyle {
		m.ClearStyle()
	}
	if v := i.Style; v != nil {
		m.SetStyle(*v)
	}
	if i.ClearExtraFeatures {
		m.ClearExtraFeatures()
	}
	if v := i.ExtraFeatures; v != nil {
		m.SetExtraFeatures(*v)
	}
	if i.ClearPrivateNotes {
		m.ClearPrivateNotes()
	}
	if v := i.PrivateNotes; v != nil {
		m.SetPrivateNotes(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddRegistrationIDs; len(ids) > 0 {
		m.AddRegistrationIDs(ids...)
	}
	if ids := i.RemoveRegistrationIDs; len(ids) > 0 {
		m.RemoveRegistrationIDs(ids...)
	}
	if i.ClearMake {
		m.ClearMake()
	}
	if v := i.Make; v != nil {
		m.SetMakeID(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.Model; v != nil {
		m.SetModelID(*v)
	}
	if i.ClearMajorColor {
		m.ClearMajorColor()
	}
	if v := i.MajorColor; v != nil {
		m.SetMajorColorID(*v)
	}
	if i.ClearMinorColor {
		m.ClearMinorColor()
	}
	if v := i.MinorColor; v != nil {
		m.SetMinorColorID(*v)
	}
	if i.ClearClass {
		m.ClearClass()
	}
	if v := i.Class; v != nil {
		m.SetClassID(*v)
	}
}

// SetInput applies the change-set in the UpdateVehicle on the update builder.
func (u *VehicleUpdate) SetInput(i UpdateVehicle) *VehicleUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicle on the update-one builder.
func (u *VehicleUpdateOne) SetInput(i UpdateVehicle) *VehicleUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicleClass represents a mutation input for creating vehicleclasses.
type CreateVehicleClass struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	Metadata    *int
	Vehicles    []int
}

// Mutate applies the CreateVehicleClass on the VehicleClassCreate builder.
func (i *CreateVehicleClass) Mutate(m *VehicleClassCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.Vehicles; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateVehicleClass on the create builder.
func (c *VehicleClassCreate) SetInput(i CreateVehicleClass) *VehicleClassCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicleClass represents a mutation input for updating vehicleclasses.
type UpdateVehicleClass struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	Metadata         *int
	ClearMetadata    bool
	AddVehicleIDs    []int
	RemoveVehicleIDs []int
}

// Mutate applies the UpdateVehicleClass on the VehicleClassMutation.
func (i *UpdateVehicleClass) Mutate(m *VehicleClassMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddVehicleIDs; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
	if ids := i.RemoveVehicleIDs; len(ids) > 0 {
		m.RemoveVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateVehicleClass on the update builder.
func (u *VehicleClassUpdate) SetInput(i UpdateVehicleClass) *VehicleClassUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicleClass on the update-one builder.
func (u *VehicleClassUpdateOne) SetInput(i UpdateVehicleClass) *VehicleClassUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicleColor represents a mutation input for creating vehiclecolors.
type CreateVehicleColor struct {
	CreatedAt     *time.Time
	CreatedBy     *int
	CreatedWith   *string
	UpdatedAt     *time.Time
	UpdatedBy     *int
	UpdatedWith   *string
	Short         string
	Title         string
	Description   *string
	Metadata      *int
	VehiclesMajor []int
	VehiclesMinor []int
}

// Mutate applies the CreateVehicleColor on the VehicleColorCreate builder.
func (i *CreateVehicleColor) Mutate(m *VehicleColorCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.VehiclesMajor; len(ids) > 0 {
		m.AddVehiclesMajorIDs(ids...)
	}
	if ids := i.VehiclesMinor; len(ids) > 0 {
		m.AddVehiclesMinorIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateVehicleColor on the create builder.
func (c *VehicleColorCreate) SetInput(i CreateVehicleColor) *VehicleColorCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicleColor represents a mutation input for updating vehiclecolors.
type UpdateVehicleColor struct {
	CreatedBy              *int
	ClearCreatedBy         bool
	CreatedWith            *string
	ClearCreatedWith       bool
	UpdatedAt              *time.Time
	UpdatedBy              *int
	ClearUpdatedBy         bool
	UpdatedWith            *string
	ClearUpdatedWith       bool
	Short                  *string
	Title                  *string
	Description            *string
	ClearDescription       bool
	Metadata               *int
	ClearMetadata          bool
	AddVehiclesMajorIDs    []int
	RemoveVehiclesMajorIDs []int
	AddVehiclesMinorIDs    []int
	RemoveVehiclesMinorIDs []int
}

// Mutate applies the UpdateVehicleColor on the VehicleColorMutation.
func (i *UpdateVehicleColor) Mutate(m *VehicleColorMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddVehiclesMajorIDs; len(ids) > 0 {
		m.AddVehiclesMajorIDs(ids...)
	}
	if ids := i.RemoveVehiclesMajorIDs; len(ids) > 0 {
		m.RemoveVehiclesMajorIDs(ids...)
	}
	if ids := i.AddVehiclesMinorIDs; len(ids) > 0 {
		m.AddVehiclesMinorIDs(ids...)
	}
	if ids := i.RemoveVehiclesMinorIDs; len(ids) > 0 {
		m.RemoveVehiclesMinorIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateVehicleColor on the update builder.
func (u *VehicleColorUpdate) SetInput(i UpdateVehicleColor) *VehicleColorUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicleColor on the update-one builder.
func (u *VehicleColorUpdateOne) SetInput(i UpdateVehicleColor) *VehicleColorUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicleMake represents a mutation input for creating vehiclemakes.
type CreateVehicleMake struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	Vehicles    []int
}

// Mutate applies the CreateVehicleMake on the VehicleMakeCreate builder.
func (i *CreateVehicleMake) Mutate(m *VehicleMakeCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.Vehicles; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateVehicleMake on the create builder.
func (c *VehicleMakeCreate) SetInput(i CreateVehicleMake) *VehicleMakeCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicleMake represents a mutation input for updating vehiclemakes.
type UpdateVehicleMake struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	AddVehicleIDs    []int
	RemoveVehicleIDs []int
}

// Mutate applies the UpdateVehicleMake on the VehicleMakeMutation.
func (i *UpdateVehicleMake) Mutate(m *VehicleMakeMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.AddVehicleIDs; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
	if ids := i.RemoveVehicleIDs; len(ids) > 0 {
		m.RemoveVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateVehicleMake on the update builder.
func (u *VehicleMakeUpdate) SetInput(i UpdateVehicleMake) *VehicleMakeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicleMake on the update-one builder.
func (u *VehicleMakeUpdateOne) SetInput(i UpdateVehicleMake) *VehicleMakeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicleModel represents a mutation input for creating vehiclemodels.
type CreateVehicleModel struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Short       string
	Title       string
	Description *string
	Metadata    *int
	Vehicles    []int
}

// Mutate applies the CreateVehicleModel on the VehicleModelCreate builder.
func (i *CreateVehicleModel) Mutate(m *VehicleModelCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetShort(i.Short)
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.Vehicles; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateVehicleModel on the create builder.
func (c *VehicleModelCreate) SetInput(i CreateVehicleModel) *VehicleModelCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicleModel represents a mutation input for updating vehiclemodels.
type UpdateVehicleModel struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Short            *string
	Title            *string
	Description      *string
	ClearDescription bool
	Metadata         *int
	ClearMetadata    bool
	AddVehicleIDs    []int
	RemoveVehicleIDs []int
}

// Mutate applies the UpdateVehicleModel on the VehicleModelMutation.
func (i *UpdateVehicleModel) Mutate(m *VehicleModelMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Short; v != nil {
		m.SetShort(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if ids := i.AddVehicleIDs; len(ids) > 0 {
		m.AddVehicleIDs(ids...)
	}
	if ids := i.RemoveVehicleIDs; len(ids) > 0 {
		m.RemoveVehicleIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateVehicleModel on the update builder.
func (u *VehicleModelUpdate) SetInput(i UpdateVehicleModel) *VehicleModelUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicleModel on the update-one builder.
func (u *VehicleModelUpdateOne) SetInput(i UpdateVehicleModel) *VehicleModelUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateVehicleRegistration represents a mutation input for creating vehicleregistrations.
type CreateVehicleRegistration struct {
	CreatedAt   *time.Time
	CreatedBy   *int
	CreatedWith *string
	UpdatedAt   *time.Time
	UpdatedBy   *int
	UpdatedWith *string
	Plate       string
	ExpiredAt   time.Time
	Metadata    *int
	State       int
	Person      int
	Vehicle     int
}

// Mutate applies the CreateVehicleRegistration on the VehicleRegistrationCreate builder.
func (i *CreateVehicleRegistration) Mutate(m *VehicleRegistrationCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	m.SetPlate(i.Plate)
	m.SetExpiredAt(i.ExpiredAt)
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	m.SetStateID(i.State)
	m.SetPersonID(i.Person)
	m.SetVehicleID(i.Vehicle)
}

// SetInput applies the change-set in the CreateVehicleRegistration on the create builder.
func (c *VehicleRegistrationCreate) SetInput(i CreateVehicleRegistration) *VehicleRegistrationCreate {
	i.Mutate(c)
	return c
}

// UpdateVehicleRegistration represents a mutation input for updating vehicleregistrations.
type UpdateVehicleRegistration struct {
	CreatedBy        *int
	ClearCreatedBy   bool
	CreatedWith      *string
	ClearCreatedWith bool
	UpdatedAt        *time.Time
	UpdatedBy        *int
	ClearUpdatedBy   bool
	UpdatedWith      *string
	ClearUpdatedWith bool
	Plate            *string
	ExpiredAt        *time.Time
	Metadata         *int
	ClearMetadata    bool
	State            *int
	ClearState       bool
	Person           *int
	ClearPerson      bool
	Vehicle          *int
	ClearVehicle     bool
}

// Mutate applies the UpdateVehicleRegistration on the VehicleRegistrationMutation.
func (i *UpdateVehicleRegistration) Mutate(m *VehicleRegistrationMutation) {
	if i.ClearCreatedBy {
		m.ClearCreatedBy()
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearCreatedWith {
		m.ClearCreatedWith()
	}
	if v := i.CreatedWith; v != nil {
		m.SetCreatedWith(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearUpdatedWith {
		m.ClearUpdatedWith()
	}
	if v := i.UpdatedWith; v != nil {
		m.SetUpdatedWith(*v)
	}
	if v := i.Plate; v != nil {
		m.SetPlate(*v)
	}
	if v := i.ExpiredAt; v != nil {
		m.SetExpiredAt(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadataID(*v)
	}
	if i.ClearState {
		m.ClearState()
	}
	if v := i.State; v != nil {
		m.SetStateID(*v)
	}
	if i.ClearPerson {
		m.ClearPerson()
	}
	if v := i.Person; v != nil {
		m.SetPersonID(*v)
	}
	if i.ClearVehicle {
		m.ClearVehicle()
	}
	if v := i.Vehicle; v != nil {
		m.SetVehicleID(*v)
	}
}

// SetInput applies the change-set in the UpdateVehicleRegistration on the update builder.
func (u *VehicleRegistrationUpdate) SetInput(i UpdateVehicleRegistration) *VehicleRegistrationUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateVehicleRegistration on the update-one builder.
func (u *VehicleRegistrationUpdateOne) SetInput(i UpdateVehicleRegistration) *VehicleRegistrationUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
