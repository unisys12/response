// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/metadata"
)

// DeathCertifierCreate is the builder for creating a DeathCertifier entity.
type DeathCertifierCreate struct {
	config
	mutation *DeathCertifierMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DeathCertifierCreate) SetCreatedAt(t time.Time) *DeathCertifierCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableCreatedAt(t *time.Time) *DeathCertifierCreate {
	if t != nil {
		dcc.SetCreatedAt(*t)
	}
	return dcc
}

// SetCreatedBy sets the "created_by" field.
func (dcc *DeathCertifierCreate) SetCreatedBy(i int) *DeathCertifierCreate {
	dcc.mutation.SetCreatedBy(i)
	return dcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableCreatedBy(i *int) *DeathCertifierCreate {
	if i != nil {
		dcc.SetCreatedBy(*i)
	}
	return dcc
}

// SetCreatedWith sets the "created_with" field.
func (dcc *DeathCertifierCreate) SetCreatedWith(s string) *DeathCertifierCreate {
	dcc.mutation.SetCreatedWith(s)
	return dcc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableCreatedWith(s *string) *DeathCertifierCreate {
	if s != nil {
		dcc.SetCreatedWith(*s)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DeathCertifierCreate) SetUpdatedAt(t time.Time) *DeathCertifierCreate {
	dcc.mutation.SetUpdatedAt(t)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableUpdatedAt(t *time.Time) *DeathCertifierCreate {
	if t != nil {
		dcc.SetUpdatedAt(*t)
	}
	return dcc
}

// SetUpdatedBy sets the "updated_by" field.
func (dcc *DeathCertifierCreate) SetUpdatedBy(i int) *DeathCertifierCreate {
	dcc.mutation.SetUpdatedBy(i)
	return dcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableUpdatedBy(i *int) *DeathCertifierCreate {
	if i != nil {
		dcc.SetUpdatedBy(*i)
	}
	return dcc
}

// SetUpdatedWith sets the "updated_with" field.
func (dcc *DeathCertifierCreate) SetUpdatedWith(s string) *DeathCertifierCreate {
	dcc.mutation.SetUpdatedWith(s)
	return dcc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableUpdatedWith(s *string) *DeathCertifierCreate {
	if s != nil {
		dcc.SetUpdatedWith(*s)
	}
	return dcc
}

// SetShort sets the "short" field.
func (dcc *DeathCertifierCreate) SetShort(s string) *DeathCertifierCreate {
	dcc.mutation.SetShort(s)
	return dcc
}

// SetTitle sets the "title" field.
func (dcc *DeathCertifierCreate) SetTitle(s string) *DeathCertifierCreate {
	dcc.mutation.SetTitle(s)
	return dcc
}

// SetDescription sets the "description" field.
func (dcc *DeathCertifierCreate) SetDescription(s string) *DeathCertifierCreate {
	dcc.mutation.SetDescription(s)
	return dcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableDescription(s *string) *DeathCertifierCreate {
	if s != nil {
		dcc.SetDescription(*s)
	}
	return dcc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dcc *DeathCertifierCreate) SetMetadataID(id int) *DeathCertifierCreate {
	dcc.mutation.SetMetadataID(id)
	return dcc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dcc *DeathCertifierCreate) SetNillableMetadataID(id *int) *DeathCertifierCreate {
	if id != nil {
		dcc = dcc.SetMetadataID(*id)
	}
	return dcc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dcc *DeathCertifierCreate) SetMetadata(m *Metadata) *DeathCertifierCreate {
	return dcc.SetMetadataID(m.ID)
}

// AddDeathCertificateIDs adds the "death_certificates" edge to the DeathCertificate entity by IDs.
func (dcc *DeathCertifierCreate) AddDeathCertificateIDs(ids ...int) *DeathCertifierCreate {
	dcc.mutation.AddDeathCertificateIDs(ids...)
	return dcc
}

// AddDeathCertificates adds the "death_certificates" edges to the DeathCertificate entity.
func (dcc *DeathCertifierCreate) AddDeathCertificates(d ...*DeathCertificate) *DeathCertifierCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcc.AddDeathCertificateIDs(ids...)
}

// Mutation returns the DeathCertifierMutation object of the builder.
func (dcc *DeathCertifierCreate) Mutation() *DeathCertifierMutation {
	return dcc.mutation
}

// Save creates the DeathCertifier in the database.
func (dcc *DeathCertifierCreate) Save(ctx context.Context) (*DeathCertifier, error) {
	var (
		err  error
		node *DeathCertifier
	)
	if err := dcc.defaults(); err != nil {
		return nil, err
	}
	if len(dcc.hooks) == 0 {
		if err = dcc.check(); err != nil {
			return nil, err
		}
		node, err = dcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathCertifierMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcc.check(); err != nil {
				return nil, err
			}
			dcc.mutation = mutation
			if node, err = dcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dcc.hooks) - 1; i >= 0; i-- {
			if dcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DeathCertifierCreate) SaveX(ctx context.Context) *DeathCertifier {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DeathCertifierCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DeathCertifierCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DeathCertifierCreate) defaults() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		if deathcertifier.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertifier.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertifier.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		if deathcertifier.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathcertifier.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathcertifier.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DeathCertifierCreate) check() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := dcc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "short"`)}
	}
	if v, ok := dcc.mutation.Short(); ok {
		if err := deathcertifier.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "short": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := dcc.mutation.Title(); ok {
		if err := deathcertifier.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if v, ok := dcc.mutation.Description(); ok {
		if err := deathcertifier.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "description": %w`, err)}
		}
	}
	return nil
}

func (dcc *DeathCertifierCreate) sqlSave(ctx context.Context) (*DeathCertifier, error) {
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dcc *DeathCertifierCreate) createSpec() (*DeathCertifier, *sqlgraph.CreateSpec) {
	var (
		_node = &DeathCertifier{config: dcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deathcertifier.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertifier.FieldID,
			},
		}
	)
	_spec.OnConflict = dcc.conflict
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertifier.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertifier.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := dcc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertifier.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathcertifier.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathcertifier.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := dcc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertifier.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := dcc.mutation.Short(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertifier.FieldShort,
		})
		_node.Short = value
	}
	if value, ok := dcc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertifier.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := dcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathcertifier.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := dcc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertifier.MetadataTable,
			Columns: []string{deathcertifier.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.death_certifier_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dcc.mutation.DeathCertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathcertifier.DeathCertificatesTable,
			Columns: []string{deathcertifier.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeathCertifier.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeathCertifierUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dcc *DeathCertifierCreate) OnConflict(opts ...sql.ConflictOption) *DeathCertifierUpsertOne {
	dcc.conflict = opts
	return &DeathCertifierUpsertOne{
		create: dcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeathCertifier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcc *DeathCertifierCreate) OnConflictColumns(columns ...string) *DeathCertifierUpsertOne {
	dcc.conflict = append(dcc.conflict, sql.ConflictColumns(columns...))
	return &DeathCertifierUpsertOne{
		create: dcc,
	}
}

type (
	// DeathCertifierUpsertOne is the builder for "upsert"-ing
	//  one DeathCertifier node.
	DeathCertifierUpsertOne struct {
		create *DeathCertifierCreate
	}

	// DeathCertifierUpsert is the "OnConflict" setter.
	DeathCertifierUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertifierUpsert) SetCreatedAt(v time.Time) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateCreatedAt() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertifierUpsert) SetCreatedBy(v int) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateCreatedBy() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertifierUpsert) ClearCreatedBy() *DeathCertifierUpsert {
	u.SetNull(deathcertifier.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertifierUpsert) SetCreatedWith(v string) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateCreatedWith() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertifierUpsert) ClearCreatedWith() *DeathCertifierUpsert {
	u.SetNull(deathcertifier.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertifierUpsert) SetUpdatedAt(v time.Time) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateUpdatedAt() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertifierUpsert) SetUpdatedBy(v int) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateUpdatedBy() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertifierUpsert) ClearUpdatedBy() *DeathCertifierUpsert {
	u.SetNull(deathcertifier.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertifierUpsert) SetUpdatedWith(v string) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateUpdatedWith() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertifierUpsert) ClearUpdatedWith() *DeathCertifierUpsert {
	u.SetNull(deathcertifier.FieldUpdatedWith)
	return u
}

// SetShort sets the "short" field.
func (u *DeathCertifierUpsert) SetShort(v string) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateShort() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldShort)
	return u
}

// SetTitle sets the "title" field.
func (u *DeathCertifierUpsert) SetTitle(v string) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateTitle() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *DeathCertifierUpsert) SetDescription(v string) *DeathCertifierUpsert {
	u.Set(deathcertifier.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeathCertifierUpsert) UpdateDescription() *DeathCertifierUpsert {
	u.SetExcluded(deathcertifier.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DeathCertifierUpsert) ClearDescription() *DeathCertifierUpsert {
	u.SetNull(deathcertifier.FieldDescription)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DeathCertifier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DeathCertifierUpsertOne) UpdateNewValues() *DeathCertifierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeathCertifier.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeathCertifierUpsertOne) Ignore() *DeathCertifierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeathCertifierUpsertOne) DoNothing() *DeathCertifierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeathCertifierCreate.OnConflict
// documentation for more info.
func (u *DeathCertifierUpsertOne) Update(set func(*DeathCertifierUpsert)) *DeathCertifierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeathCertifierUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertifierUpsertOne) SetCreatedAt(v time.Time) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateCreatedAt() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertifierUpsertOne) SetCreatedBy(v int) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateCreatedBy() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertifierUpsertOne) ClearCreatedBy() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertifierUpsertOne) SetCreatedWith(v string) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateCreatedWith() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertifierUpsertOne) ClearCreatedWith() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertifierUpsertOne) SetUpdatedAt(v time.Time) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateUpdatedAt() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertifierUpsertOne) SetUpdatedBy(v int) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateUpdatedBy() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertifierUpsertOne) ClearUpdatedBy() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertifierUpsertOne) SetUpdatedWith(v string) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateUpdatedWith() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertifierUpsertOne) ClearUpdatedWith() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *DeathCertifierUpsertOne) SetShort(v string) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateShort() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *DeathCertifierUpsertOne) SetTitle(v string) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateTitle() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *DeathCertifierUpsertOne) SetDescription(v string) *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeathCertifierUpsertOne) UpdateDescription() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DeathCertifierUpsertOne) ClearDescription() *DeathCertifierUpsertOne {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DeathCertifierUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeathCertifierCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeathCertifierUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeathCertifierUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeathCertifierUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeathCertifierCreateBulk is the builder for creating many DeathCertifier entities in bulk.
type DeathCertifierCreateBulk struct {
	config
	builders []*DeathCertifierCreate
	conflict []sql.ConflictOption
}

// Save creates the DeathCertifier entities in the database.
func (dccb *DeathCertifierCreateBulk) Save(ctx context.Context) ([]*DeathCertifier, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DeathCertifier, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeathCertifierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DeathCertifierCreateBulk) SaveX(ctx context.Context) []*DeathCertifier {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DeathCertifierCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DeathCertifierCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeathCertifier.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeathCertifierUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dccb *DeathCertifierCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeathCertifierUpsertBulk {
	dccb.conflict = opts
	return &DeathCertifierUpsertBulk{
		create: dccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeathCertifier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dccb *DeathCertifierCreateBulk) OnConflictColumns(columns ...string) *DeathCertifierUpsertBulk {
	dccb.conflict = append(dccb.conflict, sql.ConflictColumns(columns...))
	return &DeathCertifierUpsertBulk{
		create: dccb,
	}
}

// DeathCertifierUpsertBulk is the builder for "upsert"-ing
// a bulk of DeathCertifier nodes.
type DeathCertifierUpsertBulk struct {
	create *DeathCertifierCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeathCertifier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *DeathCertifierUpsertBulk) UpdateNewValues() *DeathCertifierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeathCertifier.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeathCertifierUpsertBulk) Ignore() *DeathCertifierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeathCertifierUpsertBulk) DoNothing() *DeathCertifierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeathCertifierCreateBulk.OnConflict
// documentation for more info.
func (u *DeathCertifierUpsertBulk) Update(set func(*DeathCertifierUpsert)) *DeathCertifierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeathCertifierUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeathCertifierUpsertBulk) SetCreatedAt(v time.Time) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateCreatedAt() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *DeathCertifierUpsertBulk) SetCreatedBy(v int) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateCreatedBy() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *DeathCertifierUpsertBulk) ClearCreatedBy() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *DeathCertifierUpsertBulk) SetCreatedWith(v string) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateCreatedWith() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *DeathCertifierUpsertBulk) ClearCreatedWith() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeathCertifierUpsertBulk) SetUpdatedAt(v time.Time) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateUpdatedAt() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *DeathCertifierUpsertBulk) SetUpdatedBy(v int) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateUpdatedBy() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *DeathCertifierUpsertBulk) ClearUpdatedBy() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *DeathCertifierUpsertBulk) SetUpdatedWith(v string) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateUpdatedWith() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *DeathCertifierUpsertBulk) ClearUpdatedWith() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *DeathCertifierUpsertBulk) SetShort(v string) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateShort() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *DeathCertifierUpsertBulk) SetTitle(v string) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateTitle() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *DeathCertifierUpsertBulk) SetDescription(v string) *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DeathCertifierUpsertBulk) UpdateDescription() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DeathCertifierUpsertBulk) ClearDescription() *DeathCertifierUpsertBulk {
	return u.Update(func(s *DeathCertifierUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DeathCertifierUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeathCertifierCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeathCertifierCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeathCertifierUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
