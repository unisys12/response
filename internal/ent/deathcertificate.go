// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
)

// DeathCertificate is the model entity for the DeathCertificate schema.
type DeathCertificate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Cause holds the value of the "cause" field.
	Cause string `json:"cause,omitempty"`
	// Comments holds the value of the "comments" field.
	Comments string `json:"comments,omitempty"`
	// CertifiedAt holds the value of the "certified_at" field.
	CertifiedAt *time.Time `json:"certified_at,omitempty"`
	// CertifierComments holds the value of the "certifier_comments" field.
	CertifierComments string `json:"certifier_comments,omitempty"`
	// RequiresCertification holds the value of the "requires_certification" field.
	RequiresCertification bool `json:"requires_certification,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeathCertificateQuery when eager-loading is set.
	Edges                              DeathCertificateEdges `json:"edges"`
	death_certificate_metadata         *int
	death_certifier_death_certificates *int
	death_manner_death_certificates    *int
	death_place_death_certificates     *int
	person_death_certificate           *int
	person_certified_deaths            *int
}

// DeathCertificateEdges holds the relations/edges for other nodes in the graph.
type DeathCertificateEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Decedent holds the value of the decedent edge.
	Decedent *Person `json:"decedent,omitempty"`
	// Manner holds the value of the manner edge.
	Manner *DeathManner `json:"manner,omitempty"`
	// Place holds the value of the place edge.
	Place *DeathPlace `json:"place,omitempty"`
	// Certifier holds the value of the certifier edge.
	Certifier *DeathCertifier `json:"certifier,omitempty"`
	// CertifiedBy holds the value of the certified_by edge.
	CertifiedBy *Person `json:"certified_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// DecedentOrErr returns the Decedent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) DecedentOrErr() (*Person, error) {
	if e.loadedTypes[1] {
		if e.Decedent == nil {
			// The edge decedent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Decedent, nil
	}
	return nil, &NotLoadedError{edge: "decedent"}
}

// MannerOrErr returns the Manner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) MannerOrErr() (*DeathManner, error) {
	if e.loadedTypes[2] {
		if e.Manner == nil {
			// The edge manner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deathmanner.Label}
		}
		return e.Manner, nil
	}
	return nil, &NotLoadedError{edge: "manner"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) PlaceOrErr() (*DeathPlace, error) {
	if e.loadedTypes[3] {
		if e.Place == nil {
			// The edge place was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deathplace.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// CertifierOrErr returns the Certifier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) CertifierOrErr() (*DeathCertifier, error) {
	if e.loadedTypes[4] {
		if e.Certifier == nil {
			// The edge certifier was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deathcertifier.Label}
		}
		return e.Certifier, nil
	}
	return nil, &NotLoadedError{edge: "certifier"}
}

// CertifiedByOrErr returns the CertifiedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeathCertificateEdges) CertifiedByOrErr() (*Person, error) {
	if e.loadedTypes[5] {
		if e.CertifiedBy == nil {
			// The edge certified_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.CertifiedBy, nil
	}
	return nil, &NotLoadedError{edge: "certified_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeathCertificate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deathcertificate.FieldRequiresCertification:
			values[i] = new(sql.NullBool)
		case deathcertificate.FieldID, deathcertificate.FieldCreatedBy, deathcertificate.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case deathcertificate.FieldCreatedWith, deathcertificate.FieldUpdatedWith, deathcertificate.FieldCause, deathcertificate.FieldComments, deathcertificate.FieldCertifierComments:
			values[i] = new(sql.NullString)
		case deathcertificate.FieldCreatedAt, deathcertificate.FieldUpdatedAt, deathcertificate.FieldCertifiedAt:
			values[i] = new(sql.NullTime)
		case deathcertificate.ForeignKeys[0]: // death_certificate_metadata
			values[i] = new(sql.NullInt64)
		case deathcertificate.ForeignKeys[1]: // death_certifier_death_certificates
			values[i] = new(sql.NullInt64)
		case deathcertificate.ForeignKeys[2]: // death_manner_death_certificates
			values[i] = new(sql.NullInt64)
		case deathcertificate.ForeignKeys[3]: // death_place_death_certificates
			values[i] = new(sql.NullInt64)
		case deathcertificate.ForeignKeys[4]: // person_death_certificate
			values[i] = new(sql.NullInt64)
		case deathcertificate.ForeignKeys[5]: // person_certified_deaths
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeathCertificate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeathCertificate fields.
func (dc *DeathCertificate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deathcertificate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case deathcertificate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dc.CreatedAt = value.Time
			}
		case deathcertificate.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dc.CreatedBy = int(value.Int64)
			}
		case deathcertificate.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				dc.CreatedWith = value.String
			}
		case deathcertificate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dc.UpdatedAt = value.Time
			}
		case deathcertificate.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dc.UpdatedBy = int(value.Int64)
			}
		case deathcertificate.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				dc.UpdatedWith = value.String
			}
		case deathcertificate.FieldCause:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cause", values[i])
			} else if value.Valid {
				dc.Cause = value.String
			}
		case deathcertificate.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				dc.Comments = value.String
			}
		case deathcertificate.FieldCertifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field certified_at", values[i])
			} else if value.Valid {
				dc.CertifiedAt = new(time.Time)
				*dc.CertifiedAt = value.Time
			}
		case deathcertificate.FieldCertifierComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certifier_comments", values[i])
			} else if value.Valid {
				dc.CertifierComments = value.String
			}
		case deathcertificate.FieldRequiresCertification:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_certification", values[i])
			} else if value.Valid {
				dc.RequiresCertification = value.Bool
			}
		case deathcertificate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field death_certificate_metadata", value)
			} else if value.Valid {
				dc.death_certificate_metadata = new(int)
				*dc.death_certificate_metadata = int(value.Int64)
			}
		case deathcertificate.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field death_certifier_death_certificates", value)
			} else if value.Valid {
				dc.death_certifier_death_certificates = new(int)
				*dc.death_certifier_death_certificates = int(value.Int64)
			}
		case deathcertificate.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field death_manner_death_certificates", value)
			} else if value.Valid {
				dc.death_manner_death_certificates = new(int)
				*dc.death_manner_death_certificates = int(value.Int64)
			}
		case deathcertificate.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field death_place_death_certificates", value)
			} else if value.Valid {
				dc.death_place_death_certificates = new(int)
				*dc.death_place_death_certificates = int(value.Int64)
			}
		case deathcertificate.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_death_certificate", value)
			} else if value.Valid {
				dc.person_death_certificate = new(int)
				*dc.person_death_certificate = int(value.Int64)
			}
		case deathcertificate.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_certified_deaths", value)
			} else if value.Valid {
				dc.person_certified_deaths = new(int)
				*dc.person_certified_deaths = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryMetadata() *MetadataQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryMetadata(dc)
}

// QueryDecedent queries the "decedent" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryDecedent() *PersonQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryDecedent(dc)
}

// QueryManner queries the "manner" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryManner() *DeathMannerQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryManner(dc)
}

// QueryPlace queries the "place" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryPlace() *DeathPlaceQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryPlace(dc)
}

// QueryCertifier queries the "certifier" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryCertifier() *DeathCertifierQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryCertifier(dc)
}

// QueryCertifiedBy queries the "certified_by" edge of the DeathCertificate entity.
func (dc *DeathCertificate) QueryCertifiedBy() *PersonQuery {
	return (&DeathCertificateClient{config: dc.config}).QueryCertifiedBy(dc)
}

// Update returns a builder for updating this DeathCertificate.
// Note that you need to call DeathCertificate.Unwrap() before calling this method if this DeathCertificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DeathCertificate) Update() *DeathCertificateUpdateOne {
	return (&DeathCertificateClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the DeathCertificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DeathCertificate) Unwrap() *DeathCertificate {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeathCertificate is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DeathCertificate) String() string {
	var builder strings.Builder
	builder.WriteString("DeathCertificate(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(dc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", dc.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(dc.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(dc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", dc.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(dc.UpdatedWith)
	builder.WriteString(", cause=")
	builder.WriteString(dc.Cause)
	builder.WriteString(", comments=")
	builder.WriteString(dc.Comments)
	if v := dc.CertifiedAt; v != nil {
		builder.WriteString(", certified_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", certifier_comments=")
	builder.WriteString(dc.CertifierComments)
	builder.WriteString(", requires_certification=")
	builder.WriteString(fmt.Sprintf("%v", dc.RequiresCertification))
	builder.WriteByte(')')
	return builder.String()
}

// DeathCertificates is a parsable slice of DeathCertificate.
type DeathCertificates []*DeathCertificate

func (dc DeathCertificates) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
