// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
)

// DeathCertificateQuery is the builder for querying DeathCertificate entities.
type DeathCertificateQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DeathCertificate
	// eager-loading edges.
	withMetadata    *MetadataQuery
	withDecedent    *PersonQuery
	withManner      *DeathMannerQuery
	withPlace       *DeathPlaceQuery
	withCertifier   *DeathCertifierQuery
	withCertifiedBy *PersonQuery
	withFKs         bool
	modifiers       []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeathCertificateQuery builder.
func (dcq *DeathCertificateQuery) Where(ps ...predicate.DeathCertificate) *DeathCertificateQuery {
	dcq.predicates = append(dcq.predicates, ps...)
	return dcq
}

// Limit adds a limit step to the query.
func (dcq *DeathCertificateQuery) Limit(limit int) *DeathCertificateQuery {
	dcq.limit = &limit
	return dcq
}

// Offset adds an offset step to the query.
func (dcq *DeathCertificateQuery) Offset(offset int) *DeathCertificateQuery {
	dcq.offset = &offset
	return dcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dcq *DeathCertificateQuery) Unique(unique bool) *DeathCertificateQuery {
	dcq.unique = &unique
	return dcq
}

// Order adds an order step to the query.
func (dcq *DeathCertificateQuery) Order(o ...OrderFunc) *DeathCertificateQuery {
	dcq.order = append(dcq.order, o...)
	return dcq
}

// QueryMetadata chains the current query on the "metadata" edge.
func (dcq *DeathCertificateQuery) QueryMetadata() *MetadataQuery {
	query := &MetadataQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deathcertificate.MetadataTable, deathcertificate.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDecedent chains the current query on the "decedent" edge.
func (dcq *DeathCertificateQuery) QueryDecedent() *PersonQuery {
	query := &PersonQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deathcertificate.DecedentTable, deathcertificate.DecedentColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryManner chains the current query on the "manner" edge.
func (dcq *DeathCertificateQuery) QueryManner() *DeathMannerQuery {
	query := &DeathMannerQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(deathmanner.Table, deathmanner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.MannerTable, deathcertificate.MannerColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlace chains the current query on the "place" edge.
func (dcq *DeathCertificateQuery) QueryPlace() *DeathPlaceQuery {
	query := &DeathPlaceQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(deathplace.Table, deathplace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.PlaceTable, deathcertificate.PlaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertifier chains the current query on the "certifier" edge.
func (dcq *DeathCertificateQuery) QueryCertifier() *DeathCertifierQuery {
	query := &DeathCertifierQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(deathcertifier.Table, deathcertifier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.CertifierTable, deathcertificate.CertifierColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCertifiedBy chains the current query on the "certified_by" edge.
func (dcq *DeathCertificateQuery) QueryCertifiedBy() *PersonQuery {
	query := &PersonQuery{config: dcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.CertifiedByTable, deathcertificate.CertifiedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(dcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeathCertificate entity from the query.
// Returns a *NotFoundError when no DeathCertificate was found.
func (dcq *DeathCertificateQuery) First(ctx context.Context) (*DeathCertificate, error) {
	nodes, err := dcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deathcertificate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dcq *DeathCertificateQuery) FirstX(ctx context.Context) *DeathCertificate {
	node, err := dcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeathCertificate ID from the query.
// Returns a *NotFoundError when no DeathCertificate ID was found.
func (dcq *DeathCertificateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deathcertificate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dcq *DeathCertificateQuery) FirstIDX(ctx context.Context) int {
	id, err := dcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeathCertificate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one DeathCertificate entity is not found.
// Returns a *NotFoundError when no DeathCertificate entities are found.
func (dcq *DeathCertificateQuery) Only(ctx context.Context) (*DeathCertificate, error) {
	nodes, err := dcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deathcertificate.Label}
	default:
		return nil, &NotSingularError{deathcertificate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dcq *DeathCertificateQuery) OnlyX(ctx context.Context) *DeathCertificate {
	node, err := dcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeathCertificate ID in the query.
// Returns a *NotSingularError when exactly one DeathCertificate ID is not found.
// Returns a *NotFoundError when no entities are found.
func (dcq *DeathCertificateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = &NotSingularError{deathcertificate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dcq *DeathCertificateQuery) OnlyIDX(ctx context.Context) int {
	id, err := dcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeathCertificates.
func (dcq *DeathCertificateQuery) All(ctx context.Context) ([]*DeathCertificate, error) {
	if err := dcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dcq *DeathCertificateQuery) AllX(ctx context.Context) []*DeathCertificate {
	nodes, err := dcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeathCertificate IDs.
func (dcq *DeathCertificateQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := dcq.Select(deathcertificate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dcq *DeathCertificateQuery) IDsX(ctx context.Context) []int {
	ids, err := dcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dcq *DeathCertificateQuery) Count(ctx context.Context) (int, error) {
	if err := dcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dcq *DeathCertificateQuery) CountX(ctx context.Context) int {
	count, err := dcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dcq *DeathCertificateQuery) Exist(ctx context.Context) (bool, error) {
	if err := dcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dcq *DeathCertificateQuery) ExistX(ctx context.Context) bool {
	exist, err := dcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeathCertificateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dcq *DeathCertificateQuery) Clone() *DeathCertificateQuery {
	if dcq == nil {
		return nil
	}
	return &DeathCertificateQuery{
		config:          dcq.config,
		limit:           dcq.limit,
		offset:          dcq.offset,
		order:           append([]OrderFunc{}, dcq.order...),
		predicates:      append([]predicate.DeathCertificate{}, dcq.predicates...),
		withMetadata:    dcq.withMetadata.Clone(),
		withDecedent:    dcq.withDecedent.Clone(),
		withManner:      dcq.withManner.Clone(),
		withPlace:       dcq.withPlace.Clone(),
		withCertifier:   dcq.withCertifier.Clone(),
		withCertifiedBy: dcq.withCertifiedBy.Clone(),
		// clone intermediate query.
		sql:  dcq.sql.Clone(),
		path: dcq.path,
	}
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithMetadata(opts ...func(*MetadataQuery)) *DeathCertificateQuery {
	query := &MetadataQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withMetadata = query
	return dcq
}

// WithDecedent tells the query-builder to eager-load the nodes that are connected to
// the "decedent" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithDecedent(opts ...func(*PersonQuery)) *DeathCertificateQuery {
	query := &PersonQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withDecedent = query
	return dcq
}

// WithManner tells the query-builder to eager-load the nodes that are connected to
// the "manner" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithManner(opts ...func(*DeathMannerQuery)) *DeathCertificateQuery {
	query := &DeathMannerQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withManner = query
	return dcq
}

// WithPlace tells the query-builder to eager-load the nodes that are connected to
// the "place" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithPlace(opts ...func(*DeathPlaceQuery)) *DeathCertificateQuery {
	query := &DeathPlaceQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withPlace = query
	return dcq
}

// WithCertifier tells the query-builder to eager-load the nodes that are connected to
// the "certifier" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithCertifier(opts ...func(*DeathCertifierQuery)) *DeathCertificateQuery {
	query := &DeathCertifierQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withCertifier = query
	return dcq
}

// WithCertifiedBy tells the query-builder to eager-load the nodes that are connected to
// the "certified_by" edge. The optional arguments are used to configure the query builder of the edge.
func (dcq *DeathCertificateQuery) WithCertifiedBy(opts ...func(*PersonQuery)) *DeathCertificateQuery {
	query := &PersonQuery{config: dcq.config}
	for _, opt := range opts {
		opt(query)
	}
	dcq.withCertifiedBy = query
	return dcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeathCertificate.Query().
//		GroupBy(deathcertificate.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (dcq *DeathCertificateQuery) GroupBy(field string, fields ...string) *DeathCertificateGroupBy {
	group := &DeathCertificateGroupBy{config: dcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DeathCertificate.Query().
//		Select(deathcertificate.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (dcq *DeathCertificateQuery) Select(fields ...string) *DeathCertificateSelect {
	dcq.fields = append(dcq.fields, fields...)
	return &DeathCertificateSelect{DeathCertificateQuery: dcq}
}

func (dcq *DeathCertificateQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dcq.fields {
		if !deathcertificate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dcq.path != nil {
		prev, err := dcq.path(ctx)
		if err != nil {
			return err
		}
		dcq.sql = prev
	}
	return nil
}

func (dcq *DeathCertificateQuery) sqlAll(ctx context.Context) ([]*DeathCertificate, error) {
	var (
		nodes       = []*DeathCertificate{}
		withFKs     = dcq.withFKs
		_spec       = dcq.querySpec()
		loadedTypes = [6]bool{
			dcq.withMetadata != nil,
			dcq.withDecedent != nil,
			dcq.withManner != nil,
			dcq.withPlace != nil,
			dcq.withCertifier != nil,
			dcq.withCertifiedBy != nil,
		}
	)
	if dcq.withMetadata != nil || dcq.withDecedent != nil || dcq.withManner != nil || dcq.withPlace != nil || dcq.withCertifier != nil || dcq.withCertifiedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deathcertificate.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &DeathCertificate{config: dcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, dcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := dcq.withMetadata; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].death_certificate_metadata == nil {
				continue
			}
			fk := *nodes[i].death_certificate_metadata
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(metadata.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "death_certificate_metadata" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Metadata = n
			}
		}
	}

	if query := dcq.withDecedent; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].person_death_certificate == nil {
				continue
			}
			fk := *nodes[i].person_death_certificate
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(person.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "person_death_certificate" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Decedent = n
			}
		}
	}

	if query := dcq.withManner; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].death_manner_death_certificates == nil {
				continue
			}
			fk := *nodes[i].death_manner_death_certificates
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(deathmanner.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "death_manner_death_certificates" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Manner = n
			}
		}
	}

	if query := dcq.withPlace; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].death_place_death_certificates == nil {
				continue
			}
			fk := *nodes[i].death_place_death_certificates
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(deathplace.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "death_place_death_certificates" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Place = n
			}
		}
	}

	if query := dcq.withCertifier; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].death_certifier_death_certificates == nil {
				continue
			}
			fk := *nodes[i].death_certifier_death_certificates
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(deathcertifier.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "death_certifier_death_certificates" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Certifier = n
			}
		}
	}

	if query := dcq.withCertifiedBy; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DeathCertificate)
		for i := range nodes {
			if nodes[i].person_certified_deaths == nil {
				continue
			}
			fk := *nodes[i].person_certified_deaths
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(person.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "person_certified_deaths" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.CertifiedBy = n
			}
		}
	}

	return nodes, nil
}

func (dcq *DeathCertificateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dcq.querySpec()
	if len(dcq.modifiers) > 0 {
		_spec.Modifiers = dcq.modifiers
	}
	return sqlgraph.CountNodes(ctx, dcq.driver, _spec)
}

func (dcq *DeathCertificateQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (dcq *DeathCertificateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathcertificate.Table,
			Columns: deathcertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertificate.FieldID,
			},
		},
		From:   dcq.sql,
		Unique: true,
	}
	if unique := dcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deathcertificate.FieldID)
		for i := range fields {
			if fields[i] != deathcertificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dcq *DeathCertificateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dcq.driver.Dialect())
	t1 := builder.Table(deathcertificate.Table)
	columns := dcq.fields
	if len(columns) == 0 {
		columns = deathcertificate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dcq.sql != nil {
		selector = dcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, m := range dcq.modifiers {
		m(selector)
	}
	for _, p := range dcq.predicates {
		p(selector)
	}
	for _, p := range dcq.order {
		p(selector)
	}
	if offset := dcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (dcq *DeathCertificateQuery) ForUpdate(opts ...sql.LockOption) *DeathCertificateQuery {
	if dcq.driver.Dialect() == dialect.Postgres {
		dcq.Unique(false)
	}
	dcq.modifiers = append(dcq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return dcq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (dcq *DeathCertificateQuery) ForShare(opts ...sql.LockOption) *DeathCertificateQuery {
	if dcq.driver.Dialect() == dialect.Postgres {
		dcq.Unique(false)
	}
	dcq.modifiers = append(dcq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return dcq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dcq *DeathCertificateQuery) Modify(modifiers ...func(s *sql.Selector)) *DeathCertificateSelect {
	dcq.modifiers = append(dcq.modifiers, modifiers...)
	return dcq.Select()
}

// DeathCertificateGroupBy is the group-by builder for DeathCertificate entities.
type DeathCertificateGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dcgb *DeathCertificateGroupBy) Aggregate(fns ...AggregateFunc) *DeathCertificateGroupBy {
	dcgb.fns = append(dcgb.fns, fns...)
	return dcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dcgb *DeathCertificateGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dcgb.path(ctx)
	if err != nil {
		return err
	}
	dcgb.sql = query
	return dcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := dcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(dcgb.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := dcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) StringsX(ctx context.Context) []string {
	v, err := dcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) StringX(ctx context.Context) string {
	v, err := dcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(dcgb.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := dcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) IntsX(ctx context.Context) []int {
	v, err := dcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) IntX(ctx context.Context) int {
	v, err := dcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(dcgb.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := dcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := dcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) Float64X(ctx context.Context) float64 {
	v, err := dcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(dcgb.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := dcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := dcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (dcgb *DeathCertificateGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dcgb *DeathCertificateGroupBy) BoolX(ctx context.Context) bool {
	v, err := dcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dcgb *DeathCertificateGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dcgb.fields {
		if !deathcertificate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dcgb *DeathCertificateGroupBy) sqlQuery() *sql.Selector {
	selector := dcgb.sql.Select()
	aggregation := make([]string, 0, len(dcgb.fns))
	for _, fn := range dcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dcgb.fields)+len(dcgb.fns))
		for _, f := range dcgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dcgb.fields...)...)
}

// DeathCertificateSelect is the builder for selecting fields of DeathCertificate entities.
type DeathCertificateSelect struct {
	*DeathCertificateQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (dcs *DeathCertificateSelect) Scan(ctx context.Context, v interface{}) error {
	if err := dcs.prepareQuery(ctx); err != nil {
		return err
	}
	dcs.sql = dcs.DeathCertificateQuery.sqlQuery(ctx)
	return dcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dcs *DeathCertificateSelect) ScanX(ctx context.Context, v interface{}) {
	if err := dcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Strings(ctx context.Context) ([]string, error) {
	if len(dcs.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := dcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dcs *DeathCertificateSelect) StringsX(ctx context.Context) []string {
	v, err := dcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dcs *DeathCertificateSelect) StringX(ctx context.Context) string {
	v, err := dcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Ints(ctx context.Context) ([]int, error) {
	if len(dcs.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := dcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dcs *DeathCertificateSelect) IntsX(ctx context.Context) []int {
	v, err := dcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dcs *DeathCertificateSelect) IntX(ctx context.Context) int {
	v, err := dcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(dcs.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := dcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dcs *DeathCertificateSelect) Float64sX(ctx context.Context) []float64 {
	v, err := dcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dcs *DeathCertificateSelect) Float64X(ctx context.Context) float64 {
	v, err := dcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(dcs.fields) > 1 {
		return nil, errors.New("ent: DeathCertificateSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := dcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dcs *DeathCertificateSelect) BoolsX(ctx context.Context) []bool {
	v, err := dcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (dcs *DeathCertificateSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{deathcertificate.Label}
	default:
		err = fmt.Errorf("ent: DeathCertificateSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dcs *DeathCertificateSelect) BoolX(ctx context.Context) bool {
	v, err := dcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dcs *DeathCertificateSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := dcs.sql.Query()
	if err := dcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (dcs *DeathCertificateSelect) Modify(modifiers ...func(s *sql.Selector)) *DeathCertificateSelect {
	dcs.modifiers = append(dcs.modifiers, modifiers...)
	return dcs
}
