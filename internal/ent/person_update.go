// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/race"
	"github.com/responserms/response/internal/ent/sex"
	"github.com/responserms/response/internal/ent/user"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PersonUpdate) SetCreatedBy(i int) *PersonUpdate {
	pu.mutation.ResetCreatedBy()
	pu.mutation.SetCreatedBy(i)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableCreatedBy(i *int) *PersonUpdate {
	if i != nil {
		pu.SetCreatedBy(*i)
	}
	return pu
}

// AddCreatedBy adds i to the "created_by" field.
func (pu *PersonUpdate) AddCreatedBy(i int) *PersonUpdate {
	pu.mutation.AddCreatedBy(i)
	return pu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (pu *PersonUpdate) ClearCreatedBy() *PersonUpdate {
	pu.mutation.ClearCreatedBy()
	return pu
}

// SetCreatedWith sets the "created_with" field.
func (pu *PersonUpdate) SetCreatedWith(s string) *PersonUpdate {
	pu.mutation.SetCreatedWith(s)
	return pu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableCreatedWith(s *string) *PersonUpdate {
	if s != nil {
		pu.SetCreatedWith(*s)
	}
	return pu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (pu *PersonUpdate) ClearCreatedWith() *PersonUpdate {
	pu.mutation.ClearCreatedWith()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PersonUpdate) SetUpdatedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PersonUpdate) SetUpdatedBy(i int) *PersonUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableUpdatedBy(i *int) *PersonUpdate {
	if i != nil {
		pu.SetUpdatedBy(*i)
	}
	return pu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pu *PersonUpdate) AddUpdatedBy(i int) *PersonUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PersonUpdate) ClearUpdatedBy() *PersonUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetUpdatedWith sets the "updated_with" field.
func (pu *PersonUpdate) SetUpdatedWith(s string) *PersonUpdate {
	pu.mutation.SetUpdatedWith(s)
	return pu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableUpdatedWith(s *string) *PersonUpdate {
	if s != nil {
		pu.SetUpdatedWith(*s)
	}
	return pu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (pu *PersonUpdate) ClearUpdatedWith() *PersonUpdate {
	pu.mutation.ClearUpdatedWith()
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *PersonUpdate) SetFirstName(s string) *PersonUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableFirstName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *PersonUpdate) ClearFirstName() *PersonUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetMiddleName sets the "middle_name" field.
func (pu *PersonUpdate) SetMiddleName(s string) *PersonUpdate {
	pu.mutation.SetMiddleName(s)
	return pu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMiddleName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetMiddleName(*s)
	}
	return pu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (pu *PersonUpdate) ClearMiddleName() *PersonUpdate {
	pu.mutation.ClearMiddleName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *PersonUpdate) SetLastName(s string) *PersonUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastName(s *string) *PersonUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *PersonUpdate) ClearLastName() *PersonUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetSuffix sets the "suffix" field.
func (pu *PersonUpdate) SetSuffix(s string) *PersonUpdate {
	pu.mutation.SetSuffix(s)
	return pu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableSuffix(s *string) *PersonUpdate {
	if s != nil {
		pu.SetSuffix(*s)
	}
	return pu
}

// ClearSuffix clears the value of the "suffix" field.
func (pu *PersonUpdate) ClearSuffix() *PersonUpdate {
	pu.mutation.ClearSuffix()
	return pu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pu *PersonUpdate) SetDateOfBirth(t time.Time) *PersonUpdate {
	pu.mutation.SetDateOfBirth(t)
	return pu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDateOfBirth(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetDateOfBirth(*t)
	}
	return pu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (pu *PersonUpdate) ClearDateOfBirth() *PersonUpdate {
	pu.mutation.ClearDateOfBirth()
	return pu
}

// SetBirthplace sets the "birthplace" field.
func (pu *PersonUpdate) SetBirthplace(s string) *PersonUpdate {
	pu.mutation.SetBirthplace(s)
	return pu
}

// SetNillableBirthplace sets the "birthplace" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBirthplace(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBirthplace(*s)
	}
	return pu
}

// ClearBirthplace clears the value of the "birthplace" field.
func (pu *PersonUpdate) ClearBirthplace() *PersonUpdate {
	pu.mutation.ClearBirthplace()
	return pu
}

// SetDeceasedAt sets the "deceased_at" field.
func (pu *PersonUpdate) SetDeceasedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetDeceasedAt(t)
	return pu
}

// SetNillableDeceasedAt sets the "deceased_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeceasedAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetDeceasedAt(*t)
	}
	return pu
}

// ClearDeceasedAt clears the value of the "deceased_at" field.
func (pu *PersonUpdate) ClearDeceasedAt() *PersonUpdate {
	pu.mutation.ClearDeceasedAt()
	return pu
}

// SetArchivedAt sets the "archived_at" field.
func (pu *PersonUpdate) SetArchivedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetArchivedAt(t)
	return pu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableArchivedAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetArchivedAt(*t)
	}
	return pu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (pu *PersonUpdate) ClearArchivedAt() *PersonUpdate {
	pu.mutation.ClearArchivedAt()
	return pu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (pu *PersonUpdate) SetMetadataID(id int) *PersonUpdate {
	pu.mutation.SetMetadataID(id)
	return pu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableMetadataID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetMetadataID(*id)
	}
	return pu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (pu *PersonUpdate) SetMetadata(m *Metadata) *PersonUpdate {
	return pu.SetMetadataID(m.ID)
}

// AddVehicleRegistrationIDs adds the "vehicle_registrations" edge to the VehicleRegistration entity by IDs.
func (pu *PersonUpdate) AddVehicleRegistrationIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddVehicleRegistrationIDs(ids...)
	return pu
}

// AddVehicleRegistrations adds the "vehicle_registrations" edges to the VehicleRegistration entity.
func (pu *PersonUpdate) AddVehicleRegistrations(v ...*VehicleRegistration) *PersonUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVehicleRegistrationIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (pu *PersonUpdate) SetRaceID(id int) *PersonUpdate {
	pu.mutation.SetRaceID(id)
	return pu
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableRaceID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetRaceID(*id)
	}
	return pu
}

// SetRace sets the "race" edge to the Race entity.
func (pu *PersonUpdate) SetRace(r *Race) *PersonUpdate {
	return pu.SetRaceID(r.ID)
}

// SetEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID.
func (pu *PersonUpdate) SetEthnicityID(id int) *PersonUpdate {
	pu.mutation.SetEthnicityID(id)
	return pu
}

// SetNillableEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableEthnicityID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetEthnicityID(*id)
	}
	return pu
}

// SetEthnicity sets the "ethnicity" edge to the Ethnicity entity.
func (pu *PersonUpdate) SetEthnicity(e *Ethnicity) *PersonUpdate {
	return pu.SetEthnicityID(e.ID)
}

// SetSexID sets the "sex" edge to the Sex entity by ID.
func (pu *PersonUpdate) SetSexID(id int) *PersonUpdate {
	pu.mutation.SetSexID(id)
	return pu
}

// SetNillableSexID sets the "sex" edge to the Sex entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableSexID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetSexID(*id)
	}
	return pu
}

// SetSex sets the "sex" edge to the Sex entity.
func (pu *PersonUpdate) SetSex(s *Sex) *PersonUpdate {
	return pu.SetSexID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PersonUpdate) SetUserID(id int) *PersonUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableUserID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PersonUpdate) SetUser(u *User) *PersonUpdate {
	return pu.SetUserID(u.ID)
}

// SetDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID.
func (pu *PersonUpdate) SetDeathCertificateID(id int) *PersonUpdate {
	pu.mutation.SetDeathCertificateID(id)
	return pu
}

// SetNillableDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeathCertificateID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetDeathCertificateID(*id)
	}
	return pu
}

// SetDeathCertificate sets the "death_certificate" edge to the DeathCertificate entity.
func (pu *PersonUpdate) SetDeathCertificate(d *DeathCertificate) *PersonUpdate {
	return pu.SetDeathCertificateID(d.ID)
}

// AddCertifiedDeathIDs adds the "certified_deaths" edge to the DeathCertificate entity by IDs.
func (pu *PersonUpdate) AddCertifiedDeathIDs(ids ...int) *PersonUpdate {
	pu.mutation.AddCertifiedDeathIDs(ids...)
	return pu
}

// AddCertifiedDeaths adds the "certified_deaths" edges to the DeathCertificate entity.
func (pu *PersonUpdate) AddCertifiedDeaths(d ...*DeathCertificate) *PersonUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddCertifiedDeathIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (pu *PersonUpdate) ClearMetadata() *PersonUpdate {
	pu.mutation.ClearMetadata()
	return pu
}

// ClearVehicleRegistrations clears all "vehicle_registrations" edges to the VehicleRegistration entity.
func (pu *PersonUpdate) ClearVehicleRegistrations() *PersonUpdate {
	pu.mutation.ClearVehicleRegistrations()
	return pu
}

// RemoveVehicleRegistrationIDs removes the "vehicle_registrations" edge to VehicleRegistration entities by IDs.
func (pu *PersonUpdate) RemoveVehicleRegistrationIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveVehicleRegistrationIDs(ids...)
	return pu
}

// RemoveVehicleRegistrations removes "vehicle_registrations" edges to VehicleRegistration entities.
func (pu *PersonUpdate) RemoveVehicleRegistrations(v ...*VehicleRegistration) *PersonUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVehicleRegistrationIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (pu *PersonUpdate) ClearRace() *PersonUpdate {
	pu.mutation.ClearRace()
	return pu
}

// ClearEthnicity clears the "ethnicity" edge to the Ethnicity entity.
func (pu *PersonUpdate) ClearEthnicity() *PersonUpdate {
	pu.mutation.ClearEthnicity()
	return pu
}

// ClearSex clears the "sex" edge to the Sex entity.
func (pu *PersonUpdate) ClearSex() *PersonUpdate {
	pu.mutation.ClearSex()
	return pu
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PersonUpdate) ClearUser() *PersonUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearDeathCertificate clears the "death_certificate" edge to the DeathCertificate entity.
func (pu *PersonUpdate) ClearDeathCertificate() *PersonUpdate {
	pu.mutation.ClearDeathCertificate()
	return pu
}

// ClearCertifiedDeaths clears all "certified_deaths" edges to the DeathCertificate entity.
func (pu *PersonUpdate) ClearCertifiedDeaths() *PersonUpdate {
	pu.mutation.ClearCertifiedDeaths()
	return pu
}

// RemoveCertifiedDeathIDs removes the "certified_deaths" edge to DeathCertificate entities by IDs.
func (pu *PersonUpdate) RemoveCertifiedDeathIDs(ids ...int) *PersonUpdate {
	pu.mutation.RemoveCertifiedDeathIDs(ids...)
	return pu
}

// RemoveCertifiedDeaths removes "certified_deaths" edges to DeathCertificate entities.
func (pu *PersonUpdate) RemoveCertifiedDeaths(d ...*DeathCertificate) *PersonUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveCertifiedDeathIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if person.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCreatedBy,
		})
	}
	if value, ok := pu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCreatedBy,
		})
	}
	if pu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldCreatedBy,
		})
	}
	if value, ok := pu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldCreatedWith,
		})
	}
	if pu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldCreatedWith,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldUpdatedBy,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldUpdatedBy,
		})
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldUpdatedBy,
		})
	}
	if value, ok := pu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldUpdatedWith,
		})
	}
	if pu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldUpdatedWith,
		})
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstName,
		})
	}
	if pu.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstName,
		})
	}
	if value, ok := pu.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleName,
		})
	}
	if pu.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleName,
		})
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastName,
		})
	}
	if pu.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastName,
		})
	}
	if value, ok := pu.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSuffix,
		})
	}
	if pu.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSuffix,
		})
	}
	if value, ok := pu.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDateOfBirth,
		})
	}
	if pu.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDateOfBirth,
		})
	}
	if value, ok := pu.mutation.Birthplace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBirthplace,
		})
	}
	if pu.mutation.BirthplaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBirthplace,
		})
	}
	if value, ok := pu.mutation.DeceasedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeceasedAt,
		})
	}
	if pu.mutation.DeceasedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeceasedAt,
		})
	}
	if value, ok := pu.mutation.ArchivedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldArchivedAt,
		})
	}
	if pu.mutation.ArchivedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldArchivedAt,
		})
	}
	if pu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVehicleRegistrationsIDs(); len(nodes) > 0 && !pu.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VehicleRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: race.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: race.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EthnicityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ethnicity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EthnicityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ethnicity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeathCertificateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeathCertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CertifiedDeathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCertifiedDeathsIDs(); len(nodes) > 0 && !pu.mutation.CertifiedDeathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CertifiedDeathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PersonUpdateOne) SetCreatedBy(i int) *PersonUpdateOne {
	puo.mutation.ResetCreatedBy()
	puo.mutation.SetCreatedBy(i)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableCreatedBy(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetCreatedBy(*i)
	}
	return puo
}

// AddCreatedBy adds i to the "created_by" field.
func (puo *PersonUpdateOne) AddCreatedBy(i int) *PersonUpdateOne {
	puo.mutation.AddCreatedBy(i)
	return puo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (puo *PersonUpdateOne) ClearCreatedBy() *PersonUpdateOne {
	puo.mutation.ClearCreatedBy()
	return puo
}

// SetCreatedWith sets the "created_with" field.
func (puo *PersonUpdateOne) SetCreatedWith(s string) *PersonUpdateOne {
	puo.mutation.SetCreatedWith(s)
	return puo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableCreatedWith(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetCreatedWith(*s)
	}
	return puo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (puo *PersonUpdateOne) ClearCreatedWith() *PersonUpdateOne {
	puo.mutation.ClearCreatedWith()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PersonUpdateOne) SetUpdatedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PersonUpdateOne) SetUpdatedBy(i int) *PersonUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableUpdatedBy(i *int) *PersonUpdateOne {
	if i != nil {
		puo.SetUpdatedBy(*i)
	}
	return puo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (puo *PersonUpdateOne) AddUpdatedBy(i int) *PersonUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PersonUpdateOne) ClearUpdatedBy() *PersonUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetUpdatedWith sets the "updated_with" field.
func (puo *PersonUpdateOne) SetUpdatedWith(s string) *PersonUpdateOne {
	puo.mutation.SetUpdatedWith(s)
	return puo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableUpdatedWith(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetUpdatedWith(*s)
	}
	return puo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (puo *PersonUpdateOne) ClearUpdatedWith() *PersonUpdateOne {
	puo.mutation.ClearUpdatedWith()
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *PersonUpdateOne) SetFirstName(s string) *PersonUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableFirstName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *PersonUpdateOne) ClearFirstName() *PersonUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetMiddleName sets the "middle_name" field.
func (puo *PersonUpdateOne) SetMiddleName(s string) *PersonUpdateOne {
	puo.mutation.SetMiddleName(s)
	return puo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMiddleName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetMiddleName(*s)
	}
	return puo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (puo *PersonUpdateOne) ClearMiddleName() *PersonUpdateOne {
	puo.mutation.ClearMiddleName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *PersonUpdateOne) SetLastName(s string) *PersonUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastName(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *PersonUpdateOne) ClearLastName() *PersonUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetSuffix sets the "suffix" field.
func (puo *PersonUpdateOne) SetSuffix(s string) *PersonUpdateOne {
	puo.mutation.SetSuffix(s)
	return puo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSuffix(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetSuffix(*s)
	}
	return puo
}

// ClearSuffix clears the value of the "suffix" field.
func (puo *PersonUpdateOne) ClearSuffix() *PersonUpdateOne {
	puo.mutation.ClearSuffix()
	return puo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (puo *PersonUpdateOne) SetDateOfBirth(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDateOfBirth(t)
	return puo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDateOfBirth(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetDateOfBirth(*t)
	}
	return puo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (puo *PersonUpdateOne) ClearDateOfBirth() *PersonUpdateOne {
	puo.mutation.ClearDateOfBirth()
	return puo
}

// SetBirthplace sets the "birthplace" field.
func (puo *PersonUpdateOne) SetBirthplace(s string) *PersonUpdateOne {
	puo.mutation.SetBirthplace(s)
	return puo
}

// SetNillableBirthplace sets the "birthplace" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBirthplace(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBirthplace(*s)
	}
	return puo
}

// ClearBirthplace clears the value of the "birthplace" field.
func (puo *PersonUpdateOne) ClearBirthplace() *PersonUpdateOne {
	puo.mutation.ClearBirthplace()
	return puo
}

// SetDeceasedAt sets the "deceased_at" field.
func (puo *PersonUpdateOne) SetDeceasedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDeceasedAt(t)
	return puo
}

// SetNillableDeceasedAt sets the "deceased_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeceasedAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetDeceasedAt(*t)
	}
	return puo
}

// ClearDeceasedAt clears the value of the "deceased_at" field.
func (puo *PersonUpdateOne) ClearDeceasedAt() *PersonUpdateOne {
	puo.mutation.ClearDeceasedAt()
	return puo
}

// SetArchivedAt sets the "archived_at" field.
func (puo *PersonUpdateOne) SetArchivedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetArchivedAt(t)
	return puo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableArchivedAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetArchivedAt(*t)
	}
	return puo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (puo *PersonUpdateOne) ClearArchivedAt() *PersonUpdateOne {
	puo.mutation.ClearArchivedAt()
	return puo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (puo *PersonUpdateOne) SetMetadataID(id int) *PersonUpdateOne {
	puo.mutation.SetMetadataID(id)
	return puo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMetadataID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetMetadataID(*id)
	}
	return puo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (puo *PersonUpdateOne) SetMetadata(m *Metadata) *PersonUpdateOne {
	return puo.SetMetadataID(m.ID)
}

// AddVehicleRegistrationIDs adds the "vehicle_registrations" edge to the VehicleRegistration entity by IDs.
func (puo *PersonUpdateOne) AddVehicleRegistrationIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddVehicleRegistrationIDs(ids...)
	return puo
}

// AddVehicleRegistrations adds the "vehicle_registrations" edges to the VehicleRegistration entity.
func (puo *PersonUpdateOne) AddVehicleRegistrations(v ...*VehicleRegistration) *PersonUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVehicleRegistrationIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (puo *PersonUpdateOne) SetRaceID(id int) *PersonUpdateOne {
	puo.mutation.SetRaceID(id)
	return puo
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableRaceID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetRaceID(*id)
	}
	return puo
}

// SetRace sets the "race" edge to the Race entity.
func (puo *PersonUpdateOne) SetRace(r *Race) *PersonUpdateOne {
	return puo.SetRaceID(r.ID)
}

// SetEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID.
func (puo *PersonUpdateOne) SetEthnicityID(id int) *PersonUpdateOne {
	puo.mutation.SetEthnicityID(id)
	return puo
}

// SetNillableEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEthnicityID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetEthnicityID(*id)
	}
	return puo
}

// SetEthnicity sets the "ethnicity" edge to the Ethnicity entity.
func (puo *PersonUpdateOne) SetEthnicity(e *Ethnicity) *PersonUpdateOne {
	return puo.SetEthnicityID(e.ID)
}

// SetSexID sets the "sex" edge to the Sex entity by ID.
func (puo *PersonUpdateOne) SetSexID(id int) *PersonUpdateOne {
	puo.mutation.SetSexID(id)
	return puo
}

// SetNillableSexID sets the "sex" edge to the Sex entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSexID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetSexID(*id)
	}
	return puo
}

// SetSex sets the "sex" edge to the Sex entity.
func (puo *PersonUpdateOne) SetSex(s *Sex) *PersonUpdateOne {
	return puo.SetSexID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PersonUpdateOne) SetUserID(id int) *PersonUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableUserID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PersonUpdateOne) SetUser(u *User) *PersonUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID.
func (puo *PersonUpdateOne) SetDeathCertificateID(id int) *PersonUpdateOne {
	puo.mutation.SetDeathCertificateID(id)
	return puo
}

// SetNillableDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeathCertificateID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetDeathCertificateID(*id)
	}
	return puo
}

// SetDeathCertificate sets the "death_certificate" edge to the DeathCertificate entity.
func (puo *PersonUpdateOne) SetDeathCertificate(d *DeathCertificate) *PersonUpdateOne {
	return puo.SetDeathCertificateID(d.ID)
}

// AddCertifiedDeathIDs adds the "certified_deaths" edge to the DeathCertificate entity by IDs.
func (puo *PersonUpdateOne) AddCertifiedDeathIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.AddCertifiedDeathIDs(ids...)
	return puo
}

// AddCertifiedDeaths adds the "certified_deaths" edges to the DeathCertificate entity.
func (puo *PersonUpdateOne) AddCertifiedDeaths(d ...*DeathCertificate) *PersonUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddCertifiedDeathIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (puo *PersonUpdateOne) ClearMetadata() *PersonUpdateOne {
	puo.mutation.ClearMetadata()
	return puo
}

// ClearVehicleRegistrations clears all "vehicle_registrations" edges to the VehicleRegistration entity.
func (puo *PersonUpdateOne) ClearVehicleRegistrations() *PersonUpdateOne {
	puo.mutation.ClearVehicleRegistrations()
	return puo
}

// RemoveVehicleRegistrationIDs removes the "vehicle_registrations" edge to VehicleRegistration entities by IDs.
func (puo *PersonUpdateOne) RemoveVehicleRegistrationIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveVehicleRegistrationIDs(ids...)
	return puo
}

// RemoveVehicleRegistrations removes "vehicle_registrations" edges to VehicleRegistration entities.
func (puo *PersonUpdateOne) RemoveVehicleRegistrations(v ...*VehicleRegistration) *PersonUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVehicleRegistrationIDs(ids...)
}

// ClearRace clears the "race" edge to the Race entity.
func (puo *PersonUpdateOne) ClearRace() *PersonUpdateOne {
	puo.mutation.ClearRace()
	return puo
}

// ClearEthnicity clears the "ethnicity" edge to the Ethnicity entity.
func (puo *PersonUpdateOne) ClearEthnicity() *PersonUpdateOne {
	puo.mutation.ClearEthnicity()
	return puo
}

// ClearSex clears the "sex" edge to the Sex entity.
func (puo *PersonUpdateOne) ClearSex() *PersonUpdateOne {
	puo.mutation.ClearSex()
	return puo
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PersonUpdateOne) ClearUser() *PersonUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearDeathCertificate clears the "death_certificate" edge to the DeathCertificate entity.
func (puo *PersonUpdateOne) ClearDeathCertificate() *PersonUpdateOne {
	puo.mutation.ClearDeathCertificate()
	return puo
}

// ClearCertifiedDeaths clears all "certified_deaths" edges to the DeathCertificate entity.
func (puo *PersonUpdateOne) ClearCertifiedDeaths() *PersonUpdateOne {
	puo.mutation.ClearCertifiedDeaths()
	return puo
}

// RemoveCertifiedDeathIDs removes the "certified_deaths" edge to DeathCertificate entities by IDs.
func (puo *PersonUpdateOne) RemoveCertifiedDeathIDs(ids ...int) *PersonUpdateOne {
	puo.mutation.RemoveCertifiedDeathIDs(ids...)
	return puo
}

// RemoveCertifiedDeaths removes "certified_deaths" edges to DeathCertificate entities.
func (puo *PersonUpdateOne) RemoveCertifiedDeaths(d ...*DeathCertificate) *PersonUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveCertifiedDeathIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if person.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Person.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCreatedBy,
		})
	}
	if value, ok := puo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCreatedBy,
		})
	}
	if puo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldCreatedBy,
		})
	}
	if value, ok := puo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldCreatedWith,
		})
	}
	if puo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldCreatedWith,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldUpdatedBy,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldUpdatedBy,
		})
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: person.FieldUpdatedBy,
		})
	}
	if value, ok := puo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldUpdatedWith,
		})
	}
	if puo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldUpdatedWith,
		})
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstName,
		})
	}
	if puo.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldFirstName,
		})
	}
	if value, ok := puo.mutation.MiddleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleName,
		})
	}
	if puo.mutation.MiddleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldMiddleName,
		})
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastName,
		})
	}
	if puo.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldLastName,
		})
	}
	if value, ok := puo.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSuffix,
		})
	}
	if puo.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldSuffix,
		})
	}
	if value, ok := puo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDateOfBirth,
		})
	}
	if puo.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDateOfBirth,
		})
	}
	if value, ok := puo.mutation.Birthplace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBirthplace,
		})
	}
	if puo.mutation.BirthplaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBirthplace,
		})
	}
	if value, ok := puo.mutation.DeceasedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeceasedAt,
		})
	}
	if puo.mutation.DeceasedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeceasedAt,
		})
	}
	if value, ok := puo.mutation.ArchivedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldArchivedAt,
		})
	}
	if puo.mutation.ArchivedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldArchivedAt,
		})
	}
	if puo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVehicleRegistrationsIDs(); len(nodes) > 0 && !puo.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VehicleRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: race.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: race.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EthnicityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ethnicity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EthnicityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ethnicity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sex.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeathCertificateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeathCertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CertifiedDeathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCertifiedDeathsIDs(); len(nodes) > 0 && !puo.mutation.CertifiedDeathsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CertifiedDeathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
