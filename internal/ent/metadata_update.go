// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
)

// MetadataUpdate is the builder for updating Metadata entities.
type MetadataUpdate struct {
	config
	hooks    []Hook
	mutation *MetadataMutation
}

// Where appends a list predicates to the MetadataUpdate builder.
func (mu *MetadataUpdate) Where(ps ...predicate.Metadata) *MetadataUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MetadataUpdate) SetCreatedBy(i int) *MetadataUpdate {
	mu.mutation.ResetCreatedBy()
	mu.mutation.SetCreatedBy(i)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableCreatedBy(i *int) *MetadataUpdate {
	if i != nil {
		mu.SetCreatedBy(*i)
	}
	return mu
}

// AddCreatedBy adds i to the "created_by" field.
func (mu *MetadataUpdate) AddCreatedBy(i int) *MetadataUpdate {
	mu.mutation.AddCreatedBy(i)
	return mu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (mu *MetadataUpdate) ClearCreatedBy() *MetadataUpdate {
	mu.mutation.ClearCreatedBy()
	return mu
}

// SetCreatedWith sets the "created_with" field.
func (mu *MetadataUpdate) SetCreatedWith(s string) *MetadataUpdate {
	mu.mutation.SetCreatedWith(s)
	return mu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableCreatedWith(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetCreatedWith(*s)
	}
	return mu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (mu *MetadataUpdate) ClearCreatedWith() *MetadataUpdate {
	mu.mutation.ClearCreatedWith()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MetadataUpdate) SetUpdatedAt(t time.Time) *MetadataUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MetadataUpdate) SetUpdatedBy(i int) *MetadataUpdate {
	mu.mutation.ResetUpdatedBy()
	mu.mutation.SetUpdatedBy(i)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableUpdatedBy(i *int) *MetadataUpdate {
	if i != nil {
		mu.SetUpdatedBy(*i)
	}
	return mu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mu *MetadataUpdate) AddUpdatedBy(i int) *MetadataUpdate {
	mu.mutation.AddUpdatedBy(i)
	return mu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mu *MetadataUpdate) ClearUpdatedBy() *MetadataUpdate {
	mu.mutation.ClearUpdatedBy()
	return mu
}

// SetUpdatedWith sets the "updated_with" field.
func (mu *MetadataUpdate) SetUpdatedWith(s string) *MetadataUpdate {
	mu.mutation.SetUpdatedWith(s)
	return mu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (mu *MetadataUpdate) SetNillableUpdatedWith(s *string) *MetadataUpdate {
	if s != nil {
		mu.SetUpdatedWith(*s)
	}
	return mu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (mu *MetadataUpdate) ClearUpdatedWith() *MetadataUpdate {
	mu.mutation.ClearUpdatedWith()
	return mu
}

// SetData sets the "data" field.
func (mu *MetadataUpdate) SetData(m map[string]interface{}) *MetadataUpdate {
	mu.mutation.SetData(m)
	return mu
}

// Mutation returns the MetadataMutation object of the builder.
func (mu *MetadataUpdate) Mutation() *MetadataMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetadataUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetadataUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MetadataUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if metadata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized metadata.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := metadata.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (mu *MetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadata.Table,
			Columns: metadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metadata.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldCreatedBy,
		})
	}
	if value, ok := mu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldCreatedBy,
		})
	}
	if mu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: metadata.FieldCreatedBy,
		})
	}
	if value, ok := mu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldCreatedWith,
		})
	}
	if mu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadata.FieldCreatedWith,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if value, ok := mu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if mu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if value, ok := mu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldUpdatedWith,
		})
	}
	if mu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadata.FieldUpdatedWith,
		})
	}
	if value, ok := mu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: metadata.FieldData,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MetadataUpdateOne is the builder for updating a single Metadata entity.
type MetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetadataMutation
}

// SetCreatedBy sets the "created_by" field.
func (muo *MetadataUpdateOne) SetCreatedBy(i int) *MetadataUpdateOne {
	muo.mutation.ResetCreatedBy()
	muo.mutation.SetCreatedBy(i)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableCreatedBy(i *int) *MetadataUpdateOne {
	if i != nil {
		muo.SetCreatedBy(*i)
	}
	return muo
}

// AddCreatedBy adds i to the "created_by" field.
func (muo *MetadataUpdateOne) AddCreatedBy(i int) *MetadataUpdateOne {
	muo.mutation.AddCreatedBy(i)
	return muo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (muo *MetadataUpdateOne) ClearCreatedBy() *MetadataUpdateOne {
	muo.mutation.ClearCreatedBy()
	return muo
}

// SetCreatedWith sets the "created_with" field.
func (muo *MetadataUpdateOne) SetCreatedWith(s string) *MetadataUpdateOne {
	muo.mutation.SetCreatedWith(s)
	return muo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableCreatedWith(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetCreatedWith(*s)
	}
	return muo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (muo *MetadataUpdateOne) ClearCreatedWith() *MetadataUpdateOne {
	muo.mutation.ClearCreatedWith()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MetadataUpdateOne) SetUpdatedAt(t time.Time) *MetadataUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MetadataUpdateOne) SetUpdatedBy(i int) *MetadataUpdateOne {
	muo.mutation.ResetUpdatedBy()
	muo.mutation.SetUpdatedBy(i)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableUpdatedBy(i *int) *MetadataUpdateOne {
	if i != nil {
		muo.SetUpdatedBy(*i)
	}
	return muo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (muo *MetadataUpdateOne) AddUpdatedBy(i int) *MetadataUpdateOne {
	muo.mutation.AddUpdatedBy(i)
	return muo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (muo *MetadataUpdateOne) ClearUpdatedBy() *MetadataUpdateOne {
	muo.mutation.ClearUpdatedBy()
	return muo
}

// SetUpdatedWith sets the "updated_with" field.
func (muo *MetadataUpdateOne) SetUpdatedWith(s string) *MetadataUpdateOne {
	muo.mutation.SetUpdatedWith(s)
	return muo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (muo *MetadataUpdateOne) SetNillableUpdatedWith(s *string) *MetadataUpdateOne {
	if s != nil {
		muo.SetUpdatedWith(*s)
	}
	return muo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (muo *MetadataUpdateOne) ClearUpdatedWith() *MetadataUpdateOne {
	muo.mutation.ClearUpdatedWith()
	return muo
}

// SetData sets the "data" field.
func (muo *MetadataUpdateOne) SetData(m map[string]interface{}) *MetadataUpdateOne {
	muo.mutation.SetData(m)
	return muo
}

// Mutation returns the MetadataMutation object of the builder.
func (muo *MetadataUpdateOne) Mutation() *MetadataMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetadataUpdateOne) Select(field string, fields ...string) *MetadataUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metadata entity.
func (muo *MetadataUpdateOne) Save(ctx context.Context) (*Metadata, error) {
	var (
		err  error
		node *Metadata
	)
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetadataUpdateOne) SaveX(ctx context.Context) *Metadata {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetadataUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MetadataUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if metadata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized metadata.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := metadata.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (muo *MetadataUpdateOne) sqlSave(ctx context.Context) (_node *Metadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   metadata.Table,
			Columns: metadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metadata.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Metadata.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metadata.FieldID)
		for _, f := range fields {
			if !metadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldCreatedBy,
		})
	}
	if value, ok := muo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldCreatedBy,
		})
	}
	if muo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: metadata.FieldCreatedBy,
		})
	}
	if value, ok := muo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldCreatedWith,
		})
	}
	if muo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadata.FieldCreatedWith,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: metadata.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if value, ok := muo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if muo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: metadata.FieldUpdatedBy,
		})
	}
	if value, ok := muo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metadata.FieldUpdatedWith,
		})
	}
	if muo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: metadata.FieldUpdatedWith,
		})
	}
	if value, ok := muo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: metadata.FieldData,
		})
	}
	_node = &Metadata{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
