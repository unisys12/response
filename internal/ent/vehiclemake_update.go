// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehiclemake"
)

// VehicleMakeUpdate is the builder for updating VehicleMake entities.
type VehicleMakeUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMakeMutation
}

// Where appends a list predicates to the VehicleMakeUpdate builder.
func (vmu *VehicleMakeUpdate) Where(ps ...predicate.VehicleMake) *VehicleMakeUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetCreatedBy sets the "created_by" field.
func (vmu *VehicleMakeUpdate) SetCreatedBy(i int) *VehicleMakeUpdate {
	vmu.mutation.ResetCreatedBy()
	vmu.mutation.SetCreatedBy(i)
	return vmu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vmu *VehicleMakeUpdate) SetNillableCreatedBy(i *int) *VehicleMakeUpdate {
	if i != nil {
		vmu.SetCreatedBy(*i)
	}
	return vmu
}

// AddCreatedBy adds i to the "created_by" field.
func (vmu *VehicleMakeUpdate) AddCreatedBy(i int) *VehicleMakeUpdate {
	vmu.mutation.AddCreatedBy(i)
	return vmu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vmu *VehicleMakeUpdate) ClearCreatedBy() *VehicleMakeUpdate {
	vmu.mutation.ClearCreatedBy()
	return vmu
}

// SetCreatedWith sets the "created_with" field.
func (vmu *VehicleMakeUpdate) SetCreatedWith(s string) *VehicleMakeUpdate {
	vmu.mutation.SetCreatedWith(s)
	return vmu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vmu *VehicleMakeUpdate) SetNillableCreatedWith(s *string) *VehicleMakeUpdate {
	if s != nil {
		vmu.SetCreatedWith(*s)
	}
	return vmu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vmu *VehicleMakeUpdate) ClearCreatedWith() *VehicleMakeUpdate {
	vmu.mutation.ClearCreatedWith()
	return vmu
}

// SetUpdatedAt sets the "updated_at" field.
func (vmu *VehicleMakeUpdate) SetUpdatedAt(t time.Time) *VehicleMakeUpdate {
	vmu.mutation.SetUpdatedAt(t)
	return vmu
}

// SetUpdatedBy sets the "updated_by" field.
func (vmu *VehicleMakeUpdate) SetUpdatedBy(i int) *VehicleMakeUpdate {
	vmu.mutation.ResetUpdatedBy()
	vmu.mutation.SetUpdatedBy(i)
	return vmu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vmu *VehicleMakeUpdate) SetNillableUpdatedBy(i *int) *VehicleMakeUpdate {
	if i != nil {
		vmu.SetUpdatedBy(*i)
	}
	return vmu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vmu *VehicleMakeUpdate) AddUpdatedBy(i int) *VehicleMakeUpdate {
	vmu.mutation.AddUpdatedBy(i)
	return vmu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vmu *VehicleMakeUpdate) ClearUpdatedBy() *VehicleMakeUpdate {
	vmu.mutation.ClearUpdatedBy()
	return vmu
}

// SetUpdatedWith sets the "updated_with" field.
func (vmu *VehicleMakeUpdate) SetUpdatedWith(s string) *VehicleMakeUpdate {
	vmu.mutation.SetUpdatedWith(s)
	return vmu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vmu *VehicleMakeUpdate) SetNillableUpdatedWith(s *string) *VehicleMakeUpdate {
	if s != nil {
		vmu.SetUpdatedWith(*s)
	}
	return vmu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vmu *VehicleMakeUpdate) ClearUpdatedWith() *VehicleMakeUpdate {
	vmu.mutation.ClearUpdatedWith()
	return vmu
}

// SetShort sets the "short" field.
func (vmu *VehicleMakeUpdate) SetShort(s string) *VehicleMakeUpdate {
	vmu.mutation.SetShort(s)
	return vmu
}

// SetTitle sets the "title" field.
func (vmu *VehicleMakeUpdate) SetTitle(s string) *VehicleMakeUpdate {
	vmu.mutation.SetTitle(s)
	return vmu
}

// SetDescription sets the "description" field.
func (vmu *VehicleMakeUpdate) SetDescription(s string) *VehicleMakeUpdate {
	vmu.mutation.SetDescription(s)
	return vmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vmu *VehicleMakeUpdate) SetNillableDescription(s *string) *VehicleMakeUpdate {
	if s != nil {
		vmu.SetDescription(*s)
	}
	return vmu
}

// ClearDescription clears the value of the "description" field.
func (vmu *VehicleMakeUpdate) ClearDescription() *VehicleMakeUpdate {
	vmu.mutation.ClearDescription()
	return vmu
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (vmu *VehicleMakeUpdate) AddVehicleIDs(ids ...int) *VehicleMakeUpdate {
	vmu.mutation.AddVehicleIDs(ids...)
	return vmu
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (vmu *VehicleMakeUpdate) AddVehicles(v ...*Vehicle) *VehicleMakeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.AddVehicleIDs(ids...)
}

// Mutation returns the VehicleMakeMutation object of the builder.
func (vmu *VehicleMakeUpdate) Mutation() *VehicleMakeMutation {
	return vmu.mutation
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (vmu *VehicleMakeUpdate) ClearVehicles() *VehicleMakeUpdate {
	vmu.mutation.ClearVehicles()
	return vmu
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (vmu *VehicleMakeUpdate) RemoveVehicleIDs(ids ...int) *VehicleMakeUpdate {
	vmu.mutation.RemoveVehicleIDs(ids...)
	return vmu
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (vmu *VehicleMakeUpdate) RemoveVehicles(v ...*Vehicle) *VehicleMakeUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmu.RemoveVehicleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VehicleMakeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := vmu.defaults(); err != nil {
		return 0, err
	}
	if len(vmu.hooks) == 0 {
		if err = vmu.check(); err != nil {
			return 0, err
		}
		affected, err = vmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMakeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vmu.check(); err != nil {
				return 0, err
			}
			vmu.mutation = mutation
			affected, err = vmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vmu.hooks) - 1; i >= 0; i-- {
			if vmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VehicleMakeUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VehicleMakeUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VehicleMakeUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmu *VehicleMakeUpdate) defaults() error {
	if _, ok := vmu.mutation.UpdatedAt(); !ok {
		if vehiclemake.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclemake.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclemake.UpdateDefaultUpdatedAt()
		vmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vmu *VehicleMakeUpdate) check() error {
	if v, ok := vmu.mutation.Short(); ok {
		if err := vehiclemake.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vmu.mutation.Title(); ok {
		if err := vehiclemake.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vmu.mutation.Description(); ok {
		if err := vehiclemake.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vmu *VehicleMakeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclemake.Table,
			Columns: vehiclemake.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclemake.FieldID,
			},
		},
	}
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if value, ok := vmu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if vmu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if value, ok := vmu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldCreatedWith,
		})
	}
	if vmu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldCreatedWith,
		})
	}
	if value, ok := vmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclemake.FieldUpdatedAt,
		})
	}
	if value, ok := vmu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if value, ok := vmu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if vmu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if value, ok := vmu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldUpdatedWith,
		})
	}
	if vmu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldUpdatedWith,
		})
	}
	if value, ok := vmu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldShort,
		})
	}
	if value, ok := vmu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldTitle,
		})
	}
	if value, ok := vmu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldDescription,
		})
	}
	if vmu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldDescription,
		})
	}
	if vmu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !vmu.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmu.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclemake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleMakeUpdateOne is the builder for updating a single VehicleMake entity.
type VehicleMakeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMakeMutation
}

// SetCreatedBy sets the "created_by" field.
func (vmuo *VehicleMakeUpdateOne) SetCreatedBy(i int) *VehicleMakeUpdateOne {
	vmuo.mutation.ResetCreatedBy()
	vmuo.mutation.SetCreatedBy(i)
	return vmuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vmuo *VehicleMakeUpdateOne) SetNillableCreatedBy(i *int) *VehicleMakeUpdateOne {
	if i != nil {
		vmuo.SetCreatedBy(*i)
	}
	return vmuo
}

// AddCreatedBy adds i to the "created_by" field.
func (vmuo *VehicleMakeUpdateOne) AddCreatedBy(i int) *VehicleMakeUpdateOne {
	vmuo.mutation.AddCreatedBy(i)
	return vmuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vmuo *VehicleMakeUpdateOne) ClearCreatedBy() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearCreatedBy()
	return vmuo
}

// SetCreatedWith sets the "created_with" field.
func (vmuo *VehicleMakeUpdateOne) SetCreatedWith(s string) *VehicleMakeUpdateOne {
	vmuo.mutation.SetCreatedWith(s)
	return vmuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vmuo *VehicleMakeUpdateOne) SetNillableCreatedWith(s *string) *VehicleMakeUpdateOne {
	if s != nil {
		vmuo.SetCreatedWith(*s)
	}
	return vmuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vmuo *VehicleMakeUpdateOne) ClearCreatedWith() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearCreatedWith()
	return vmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vmuo *VehicleMakeUpdateOne) SetUpdatedAt(t time.Time) *VehicleMakeUpdateOne {
	vmuo.mutation.SetUpdatedAt(t)
	return vmuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vmuo *VehicleMakeUpdateOne) SetUpdatedBy(i int) *VehicleMakeUpdateOne {
	vmuo.mutation.ResetUpdatedBy()
	vmuo.mutation.SetUpdatedBy(i)
	return vmuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vmuo *VehicleMakeUpdateOne) SetNillableUpdatedBy(i *int) *VehicleMakeUpdateOne {
	if i != nil {
		vmuo.SetUpdatedBy(*i)
	}
	return vmuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vmuo *VehicleMakeUpdateOne) AddUpdatedBy(i int) *VehicleMakeUpdateOne {
	vmuo.mutation.AddUpdatedBy(i)
	return vmuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vmuo *VehicleMakeUpdateOne) ClearUpdatedBy() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearUpdatedBy()
	return vmuo
}

// SetUpdatedWith sets the "updated_with" field.
func (vmuo *VehicleMakeUpdateOne) SetUpdatedWith(s string) *VehicleMakeUpdateOne {
	vmuo.mutation.SetUpdatedWith(s)
	return vmuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vmuo *VehicleMakeUpdateOne) SetNillableUpdatedWith(s *string) *VehicleMakeUpdateOne {
	if s != nil {
		vmuo.SetUpdatedWith(*s)
	}
	return vmuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vmuo *VehicleMakeUpdateOne) ClearUpdatedWith() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearUpdatedWith()
	return vmuo
}

// SetShort sets the "short" field.
func (vmuo *VehicleMakeUpdateOne) SetShort(s string) *VehicleMakeUpdateOne {
	vmuo.mutation.SetShort(s)
	return vmuo
}

// SetTitle sets the "title" field.
func (vmuo *VehicleMakeUpdateOne) SetTitle(s string) *VehicleMakeUpdateOne {
	vmuo.mutation.SetTitle(s)
	return vmuo
}

// SetDescription sets the "description" field.
func (vmuo *VehicleMakeUpdateOne) SetDescription(s string) *VehicleMakeUpdateOne {
	vmuo.mutation.SetDescription(s)
	return vmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vmuo *VehicleMakeUpdateOne) SetNillableDescription(s *string) *VehicleMakeUpdateOne {
	if s != nil {
		vmuo.SetDescription(*s)
	}
	return vmuo
}

// ClearDescription clears the value of the "description" field.
func (vmuo *VehicleMakeUpdateOne) ClearDescription() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearDescription()
	return vmuo
}

// AddVehicleIDs adds the "vehicles" edge to the Vehicle entity by IDs.
func (vmuo *VehicleMakeUpdateOne) AddVehicleIDs(ids ...int) *VehicleMakeUpdateOne {
	vmuo.mutation.AddVehicleIDs(ids...)
	return vmuo
}

// AddVehicles adds the "vehicles" edges to the Vehicle entity.
func (vmuo *VehicleMakeUpdateOne) AddVehicles(v ...*Vehicle) *VehicleMakeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.AddVehicleIDs(ids...)
}

// Mutation returns the VehicleMakeMutation object of the builder.
func (vmuo *VehicleMakeUpdateOne) Mutation() *VehicleMakeMutation {
	return vmuo.mutation
}

// ClearVehicles clears all "vehicles" edges to the Vehicle entity.
func (vmuo *VehicleMakeUpdateOne) ClearVehicles() *VehicleMakeUpdateOne {
	vmuo.mutation.ClearVehicles()
	return vmuo
}

// RemoveVehicleIDs removes the "vehicles" edge to Vehicle entities by IDs.
func (vmuo *VehicleMakeUpdateOne) RemoveVehicleIDs(ids ...int) *VehicleMakeUpdateOne {
	vmuo.mutation.RemoveVehicleIDs(ids...)
	return vmuo
}

// RemoveVehicles removes "vehicles" edges to Vehicle entities.
func (vmuo *VehicleMakeUpdateOne) RemoveVehicles(v ...*Vehicle) *VehicleMakeUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vmuo.RemoveVehicleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VehicleMakeUpdateOne) Select(field string, fields ...string) *VehicleMakeUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VehicleMake entity.
func (vmuo *VehicleMakeUpdateOne) Save(ctx context.Context) (*VehicleMake, error) {
	var (
		err  error
		node *VehicleMake
	)
	if err := vmuo.defaults(); err != nil {
		return nil, err
	}
	if len(vmuo.hooks) == 0 {
		if err = vmuo.check(); err != nil {
			return nil, err
		}
		node, err = vmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMakeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vmuo.check(); err != nil {
				return nil, err
			}
			vmuo.mutation = mutation
			node, err = vmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vmuo.hooks) - 1; i >= 0; i-- {
			if vmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VehicleMakeUpdateOne) SaveX(ctx context.Context) *VehicleMake {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VehicleMakeUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VehicleMakeUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmuo *VehicleMakeUpdateOne) defaults() error {
	if _, ok := vmuo.mutation.UpdatedAt(); !ok {
		if vehiclemake.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclemake.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclemake.UpdateDefaultUpdatedAt()
		vmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vmuo *VehicleMakeUpdateOne) check() error {
	if v, ok := vmuo.mutation.Short(); ok {
		if err := vehiclemake.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := vmuo.mutation.Title(); ok {
		if err := vehiclemake.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vmuo.mutation.Description(); ok {
		if err := vehiclemake.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (vmuo *VehicleMakeUpdateOne) sqlSave(ctx context.Context) (_node *VehicleMake, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehiclemake.Table,
			Columns: vehiclemake.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclemake.FieldID,
			},
		},
	}
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VehicleMake.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehiclemake.FieldID)
		for _, f := range fields {
			if !vehiclemake.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehiclemake.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if value, ok := vmuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if vmuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclemake.FieldCreatedBy,
		})
	}
	if value, ok := vmuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldCreatedWith,
		})
	}
	if vmuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldCreatedWith,
		})
	}
	if value, ok := vmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclemake.FieldUpdatedAt,
		})
	}
	if value, ok := vmuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if value, ok := vmuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if vmuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehiclemake.FieldUpdatedBy,
		})
	}
	if value, ok := vmuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldUpdatedWith,
		})
	}
	if vmuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldUpdatedWith,
		})
	}
	if value, ok := vmuo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldShort,
		})
	}
	if value, ok := vmuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldTitle,
		})
	}
	if value, ok := vmuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclemake.FieldDescription,
		})
	}
	if vmuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehiclemake.FieldDescription,
		})
	}
	if vmuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.RemovedVehiclesIDs(); len(nodes) > 0 && !vmuo.mutation.VehiclesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vmuo.mutation.VehiclesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VehicleMake{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclemake.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
