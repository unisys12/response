// Code generated by entc, DO NOT EDIT.

package gameserver

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the gameserver type in the database.
	Label = "game_server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedWith holds the string denoting the created_with field in the database.
	FieldCreatedWith = "created_with"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedWith holds the string denoting the updated_with field in the database.
	FieldUpdatedWith = "updated_with"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldMonitoring holds the string denoting the monitoring field in the database.
	FieldMonitoring = "monitoring"
	// FieldDisabledAt holds the string denoting the disabled_at field in the database.
	FieldDisabledAt = "disabled_at"
	// FieldLastContactAt holds the string denoting the last_contact_at field in the database.
	FieldLastContactAt = "last_contact_at"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// Table holds the table name of the gameserver in the database.
	Table = "game_servers"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "game_servers"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "game_server_metadata"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "player_servers"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
)

// Columns holds all SQL columns for gameserver fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldCreatedWith,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldUpdatedWith,
	FieldName,
	FieldDescription,
	FieldSecret,
	FieldIPAddress,
	FieldMonitoring,
	FieldDisabledAt,
	FieldLastContactAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_servers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_server_metadata",
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"player_id", "game_server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/responserms/response/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultMonitoring holds the default value on creation for the "monitoring" field.
	DefaultMonitoring bool
)
