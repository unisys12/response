// Code generated by entc, DO NOT EDIT.

package gameserver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/responserms/response/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedWith applies equality check predicate on the "created_with" field. It's identical to CreatedWithEQ.
func CreatedWith(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedWith applies equality check predicate on the "updated_with" field. It's identical to UpdatedWithEQ.
func UpdatedWith(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecret), v))
	})
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// Monitoring applies equality check predicate on the "monitoring" field. It's identical to MonitoringEQ.
func Monitoring(v bool) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonitoring), v))
	})
}

// DisabledAt applies equality check predicate on the "disabled_at" field. It's identical to DisabledAtEQ.
func DisabledAt(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabledAt), v))
	})
}

// LastContactAt applies equality check predicate on the "last_contact_at" field. It's identical to LastContactAtEQ.
func LastContactAt(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastContactAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedWithEQ applies the EQ predicate on the "created_with" field.
func CreatedWithEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithNEQ applies the NEQ predicate on the "created_with" field.
func CreatedWithNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIn applies the In predicate on the "created_with" field.
func CreatedWithIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithNotIn applies the NotIn predicate on the "created_with" field.
func CreatedWithNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithGT applies the GT predicate on the "created_with" field.
func CreatedWithGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithGTE applies the GTE predicate on the "created_with" field.
func CreatedWithGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLT applies the LT predicate on the "created_with" field.
func CreatedWithLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLTE applies the LTE predicate on the "created_with" field.
func CreatedWithLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContains applies the Contains predicate on the "created_with" field.
func CreatedWithContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasPrefix applies the HasPrefix predicate on the "created_with" field.
func CreatedWithHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasSuffix applies the HasSuffix predicate on the "created_with" field.
func CreatedWithHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIsNil applies the IsNil predicate on the "created_with" field.
func CreatedWithIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithNotNil applies the NotNil predicate on the "created_with" field.
func CreatedWithNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithEqualFold applies the EqualFold predicate on the "created_with" field.
func CreatedWithEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContainsFold applies the ContainsFold predicate on the "created_with" field.
func CreatedWithContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedWithEQ applies the EQ predicate on the "updated_with" field.
func UpdatedWithEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithNEQ applies the NEQ predicate on the "updated_with" field.
func UpdatedWithNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIn applies the In predicate on the "updated_with" field.
func UpdatedWithIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithNotIn applies the NotIn predicate on the "updated_with" field.
func UpdatedWithNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithGT applies the GT predicate on the "updated_with" field.
func UpdatedWithGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithGTE applies the GTE predicate on the "updated_with" field.
func UpdatedWithGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLT applies the LT predicate on the "updated_with" field.
func UpdatedWithLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLTE applies the LTE predicate on the "updated_with" field.
func UpdatedWithLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContains applies the Contains predicate on the "updated_with" field.
func UpdatedWithContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasPrefix applies the HasPrefix predicate on the "updated_with" field.
func UpdatedWithHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasSuffix applies the HasSuffix predicate on the "updated_with" field.
func UpdatedWithHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIsNil applies the IsNil predicate on the "updated_with" field.
func UpdatedWithIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithNotNil applies the NotNil predicate on the "updated_with" field.
func UpdatedWithNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithEqualFold applies the EqualFold predicate on the "updated_with" field.
func UpdatedWithEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContainsFold applies the ContainsFold predicate on the "updated_with" field.
func UpdatedWithContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedWith), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecret), v))
	})
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecret), v))
	})
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecret), v...))
	})
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecret), v...))
	})
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecret), v))
	})
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecret), v))
	})
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecret), v))
	})
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecret), v))
	})
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSecret), v))
	})
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSecret), v))
	})
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSecret), v))
	})
}

// SecretIsNil applies the IsNil predicate on the "secret" field.
func SecretIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSecret)))
	})
}

// SecretNotNil applies the NotNil predicate on the "secret" field.
func SecretNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSecret)))
	})
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSecret), v))
	})
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSecret), v))
	})
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIPAddress), v))
	})
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIPAddress), v...))
	})
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIPAddress), v...))
	})
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIPAddress), v))
	})
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIPAddress), v))
	})
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIPAddress), v))
	})
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIPAddress), v))
	})
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIPAddress), v))
	})
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIPAddress), v))
	})
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIPAddress), v))
	})
}

// MonitoringEQ applies the EQ predicate on the "monitoring" field.
func MonitoringEQ(v bool) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonitoring), v))
	})
}

// MonitoringNEQ applies the NEQ predicate on the "monitoring" field.
func MonitoringNEQ(v bool) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonitoring), v))
	})
}

// MonitoringIsNil applies the IsNil predicate on the "monitoring" field.
func MonitoringIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonitoring)))
	})
}

// MonitoringNotNil applies the NotNil predicate on the "monitoring" field.
func MonitoringNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonitoring)))
	})
}

// DisabledAtEQ applies the EQ predicate on the "disabled_at" field.
func DisabledAtEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtNEQ applies the NEQ predicate on the "disabled_at" field.
func DisabledAtNEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtIn applies the In predicate on the "disabled_at" field.
func DisabledAtIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisabledAt), v...))
	})
}

// DisabledAtNotIn applies the NotIn predicate on the "disabled_at" field.
func DisabledAtNotIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisabledAt), v...))
	})
}

// DisabledAtGT applies the GT predicate on the "disabled_at" field.
func DisabledAtGT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtGTE applies the GTE predicate on the "disabled_at" field.
func DisabledAtGTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtLT applies the LT predicate on the "disabled_at" field.
func DisabledAtLT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtLTE applies the LTE predicate on the "disabled_at" field.
func DisabledAtLTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisabledAt), v))
	})
}

// DisabledAtIsNil applies the IsNil predicate on the "disabled_at" field.
func DisabledAtIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisabledAt)))
	})
}

// DisabledAtNotNil applies the NotNil predicate on the "disabled_at" field.
func DisabledAtNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisabledAt)))
	})
}

// LastContactAtEQ applies the EQ predicate on the "last_contact_at" field.
func LastContactAtEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtNEQ applies the NEQ predicate on the "last_contact_at" field.
func LastContactAtNEQ(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtIn applies the In predicate on the "last_contact_at" field.
func LastContactAtIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastContactAt), v...))
	})
}

// LastContactAtNotIn applies the NotIn predicate on the "last_contact_at" field.
func LastContactAtNotIn(vs ...time.Time) predicate.GameServer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GameServer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastContactAt), v...))
	})
}

// LastContactAtGT applies the GT predicate on the "last_contact_at" field.
func LastContactAtGT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtGTE applies the GTE predicate on the "last_contact_at" field.
func LastContactAtGTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtLT applies the LT predicate on the "last_contact_at" field.
func LastContactAtLT(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtLTE applies the LTE predicate on the "last_contact_at" field.
func LastContactAtLTE(v time.Time) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastContactAt), v))
	})
}

// LastContactAtIsNil applies the IsNil predicate on the "last_contact_at" field.
func LastContactAtIsNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastContactAt)))
	})
}

// LastContactAtNotNil applies the NotNil predicate on the "last_contact_at" field.
func LastContactAtNotNil() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastContactAt)))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayers applies the HasEdge predicate on the "players" edge.
func HasPlayers() predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlayersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlayersTable, PlayersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayersWith applies the HasEdge predicate on the "players" edge with a given conditions (other predicates).
func HasPlayersWith(preds ...predicate.Player) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlayersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlayersTable, PlayersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameServer) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameServer) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameServer) predicate.GameServer {
	return predicate.GameServer(func(s *sql.Selector) {
		p(s.Not())
	})
}
