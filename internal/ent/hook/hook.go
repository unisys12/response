// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/responserms/response/internal/ent"
)

// The DeathCertificateFunc type is an adapter to allow the use of ordinary
// function as DeathCertificate mutator.
type DeathCertificateFunc func(context.Context, *ent.DeathCertificateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeathCertificateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeathCertificateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeathCertificateMutation", m)
	}
	return f(ctx, mv)
}

// The DeathCertifierFunc type is an adapter to allow the use of ordinary
// function as DeathCertifier mutator.
type DeathCertifierFunc func(context.Context, *ent.DeathCertifierMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeathCertifierFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeathCertifierMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeathCertifierMutation", m)
	}
	return f(ctx, mv)
}

// The DeathMannerFunc type is an adapter to allow the use of ordinary
// function as DeathManner mutator.
type DeathMannerFunc func(context.Context, *ent.DeathMannerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeathMannerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeathMannerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeathMannerMutation", m)
	}
	return f(ctx, mv)
}

// The DeathPlaceFunc type is an adapter to allow the use of ordinary
// function as DeathPlace mutator.
type DeathPlaceFunc func(context.Context, *ent.DeathPlaceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeathPlaceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeathPlaceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeathPlaceMutation", m)
	}
	return f(ctx, mv)
}

// The EthnicityFunc type is an adapter to allow the use of ordinary
// function as Ethnicity mutator.
type EthnicityFunc func(context.Context, *ent.EthnicityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EthnicityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EthnicityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EthnicityMutation", m)
	}
	return f(ctx, mv)
}

// The GameServerFunc type is an adapter to allow the use of ordinary
// function as GameServer mutator.
type GameServerFunc func(context.Context, *ent.GameServerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GameServerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.GameServerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GameServerMutation", m)
	}
	return f(ctx, mv)
}

// The MetadataFunc type is an adapter to allow the use of ordinary
// function as Metadata mutator.
type MetadataFunc func(context.Context, *ent.MetadataMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MetadataFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.MetadataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MetadataMutation", m)
	}
	return f(ctx, mv)
}

// The OAuthConnectionFunc type is an adapter to allow the use of ordinary
// function as OAuthConnection mutator.
type OAuthConnectionFunc func(context.Context, *ent.OAuthConnectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OAuthConnectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OAuthConnectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OAuthConnectionMutation", m)
	}
	return f(ctx, mv)
}

// The PersonFunc type is an adapter to allow the use of ordinary
// function as Person mutator.
type PersonFunc func(context.Context, *ent.PersonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PersonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonMutation", m)
	}
	return f(ctx, mv)
}

// The PlayerFunc type is an adapter to allow the use of ordinary
// function as Player mutator.
type PlayerFunc func(context.Context, *ent.PlayerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlayerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PlayerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlayerMutation", m)
	}
	return f(ctx, mv)
}

// The PlayerIdentifierFunc type is an adapter to allow the use of ordinary
// function as PlayerIdentifier mutator.
type PlayerIdentifierFunc func(context.Context, *ent.PlayerIdentifierMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlayerIdentifierFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PlayerIdentifierMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlayerIdentifierMutation", m)
	}
	return f(ctx, mv)
}

// The RaceFunc type is an adapter to allow the use of ordinary
// function as Race mutator.
type RaceFunc func(context.Context, *ent.RaceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RaceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RaceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RaceMutation", m)
	}
	return f(ctx, mv)
}

// The SessionFunc type is an adapter to allow the use of ordinary
// function as Session mutator.
type SessionFunc func(context.Context, *ent.SessionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SessionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SessionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SessionMutation", m)
	}
	return f(ctx, mv)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
	}
	return f(ctx, mv)
}

// The SexFunc type is an adapter to allow the use of ordinary
// function as Sex mutator.
type SexFunc func(context.Context, *ent.SexMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SexFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SexMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SexMutation", m)
	}
	return f(ctx, mv)
}

// The StateFunc type is an adapter to allow the use of ordinary
// function as State mutator.
type StateFunc func(context.Context, *ent.StateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StateMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleFunc type is an adapter to allow the use of ordinary
// function as Vehicle mutator.
type VehicleFunc func(context.Context, *ent.VehicleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleClassFunc type is an adapter to allow the use of ordinary
// function as VehicleClass mutator.
type VehicleClassFunc func(context.Context, *ent.VehicleClassMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleClassFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleClassMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleClassMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleColorFunc type is an adapter to allow the use of ordinary
// function as VehicleColor mutator.
type VehicleColorFunc func(context.Context, *ent.VehicleColorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleColorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleColorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleColorMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleMakeFunc type is an adapter to allow the use of ordinary
// function as VehicleMake mutator.
type VehicleMakeFunc func(context.Context, *ent.VehicleMakeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleMakeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleMakeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleMakeMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleModelFunc type is an adapter to allow the use of ordinary
// function as VehicleModel mutator.
type VehicleModelFunc func(context.Context, *ent.VehicleModelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleModelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleModelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleModelMutation", m)
	}
	return f(ctx, mv)
}

// The VehicleRegistrationFunc type is an adapter to allow the use of ordinary
// function as VehicleRegistration mutator.
type VehicleRegistrationFunc func(context.Context, *ent.VehicleRegistrationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleRegistrationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VehicleRegistrationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VehicleRegistrationMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
