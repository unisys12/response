// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/responserms/response/internal/ent/migrate"

	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/oauthconnection"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/player"
	"github.com/responserms/response/internal/ent/playeridentifier"
	"github.com/responserms/response/internal/ent/race"
	"github.com/responserms/response/internal/ent/session"
	"github.com/responserms/response/internal/ent/setting"
	"github.com/responserms/response/internal/ent/sex"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/user"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
	"github.com/responserms/response/internal/ent/vehicleregistration"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DeathCertificate is the client for interacting with the DeathCertificate builders.
	DeathCertificate *DeathCertificateClient
	// DeathCertifier is the client for interacting with the DeathCertifier builders.
	DeathCertifier *DeathCertifierClient
	// DeathManner is the client for interacting with the DeathManner builders.
	DeathManner *DeathMannerClient
	// DeathPlace is the client for interacting with the DeathPlace builders.
	DeathPlace *DeathPlaceClient
	// Ethnicity is the client for interacting with the Ethnicity builders.
	Ethnicity *EthnicityClient
	// GameServer is the client for interacting with the GameServer builders.
	GameServer *GameServerClient
	// Metadata is the client for interacting with the Metadata builders.
	Metadata *MetadataClient
	// OAuthConnection is the client for interacting with the OAuthConnection builders.
	OAuthConnection *OAuthConnectionClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// PlayerIdentifier is the client for interacting with the PlayerIdentifier builders.
	PlayerIdentifier *PlayerIdentifierClient
	// Race is the client for interacting with the Race builders.
	Race *RaceClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Sex is the client for interacting with the Sex builders.
	Sex *SexClient
	// State is the client for interacting with the State builders.
	State *StateClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vehicle is the client for interacting with the Vehicle builders.
	Vehicle *VehicleClient
	// VehicleClass is the client for interacting with the VehicleClass builders.
	VehicleClass *VehicleClassClient
	// VehicleColor is the client for interacting with the VehicleColor builders.
	VehicleColor *VehicleColorClient
	// VehicleMake is the client for interacting with the VehicleMake builders.
	VehicleMake *VehicleMakeClient
	// VehicleModel is the client for interacting with the VehicleModel builders.
	VehicleModel *VehicleModelClient
	// VehicleRegistration is the client for interacting with the VehicleRegistration builders.
	VehicleRegistration *VehicleRegistrationClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DeathCertificate = NewDeathCertificateClient(c.config)
	c.DeathCertifier = NewDeathCertifierClient(c.config)
	c.DeathManner = NewDeathMannerClient(c.config)
	c.DeathPlace = NewDeathPlaceClient(c.config)
	c.Ethnicity = NewEthnicityClient(c.config)
	c.GameServer = NewGameServerClient(c.config)
	c.Metadata = NewMetadataClient(c.config)
	c.OAuthConnection = NewOAuthConnectionClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.Player = NewPlayerClient(c.config)
	c.PlayerIdentifier = NewPlayerIdentifierClient(c.config)
	c.Race = NewRaceClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Sex = NewSexClient(c.config)
	c.State = NewStateClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vehicle = NewVehicleClient(c.config)
	c.VehicleClass = NewVehicleClassClient(c.config)
	c.VehicleColor = NewVehicleColorClient(c.config)
	c.VehicleMake = NewVehicleMakeClient(c.config)
	c.VehicleModel = NewVehicleModelClient(c.config)
	c.VehicleRegistration = NewVehicleRegistrationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		DeathCertificate:    NewDeathCertificateClient(cfg),
		DeathCertifier:      NewDeathCertifierClient(cfg),
		DeathManner:         NewDeathMannerClient(cfg),
		DeathPlace:          NewDeathPlaceClient(cfg),
		Ethnicity:           NewEthnicityClient(cfg),
		GameServer:          NewGameServerClient(cfg),
		Metadata:            NewMetadataClient(cfg),
		OAuthConnection:     NewOAuthConnectionClient(cfg),
		Person:              NewPersonClient(cfg),
		Player:              NewPlayerClient(cfg),
		PlayerIdentifier:    NewPlayerIdentifierClient(cfg),
		Race:                NewRaceClient(cfg),
		Session:             NewSessionClient(cfg),
		Setting:             NewSettingClient(cfg),
		Sex:                 NewSexClient(cfg),
		State:               NewStateClient(cfg),
		User:                NewUserClient(cfg),
		Vehicle:             NewVehicleClient(cfg),
		VehicleClass:        NewVehicleClassClient(cfg),
		VehicleColor:        NewVehicleColorClient(cfg),
		VehicleMake:         NewVehicleMakeClient(cfg),
		VehicleModel:        NewVehicleModelClient(cfg),
		VehicleRegistration: NewVehicleRegistrationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:              cfg,
		DeathCertificate:    NewDeathCertificateClient(cfg),
		DeathCertifier:      NewDeathCertifierClient(cfg),
		DeathManner:         NewDeathMannerClient(cfg),
		DeathPlace:          NewDeathPlaceClient(cfg),
		Ethnicity:           NewEthnicityClient(cfg),
		GameServer:          NewGameServerClient(cfg),
		Metadata:            NewMetadataClient(cfg),
		OAuthConnection:     NewOAuthConnectionClient(cfg),
		Person:              NewPersonClient(cfg),
		Player:              NewPlayerClient(cfg),
		PlayerIdentifier:    NewPlayerIdentifierClient(cfg),
		Race:                NewRaceClient(cfg),
		Session:             NewSessionClient(cfg),
		Setting:             NewSettingClient(cfg),
		Sex:                 NewSexClient(cfg),
		State:               NewStateClient(cfg),
		User:                NewUserClient(cfg),
		Vehicle:             NewVehicleClient(cfg),
		VehicleClass:        NewVehicleClassClient(cfg),
		VehicleColor:        NewVehicleColorClient(cfg),
		VehicleMake:         NewVehicleMakeClient(cfg),
		VehicleModel:        NewVehicleModelClient(cfg),
		VehicleRegistration: NewVehicleRegistrationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DeathCertificate.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DeathCertificate.Use(hooks...)
	c.DeathCertifier.Use(hooks...)
	c.DeathManner.Use(hooks...)
	c.DeathPlace.Use(hooks...)
	c.Ethnicity.Use(hooks...)
	c.GameServer.Use(hooks...)
	c.Metadata.Use(hooks...)
	c.OAuthConnection.Use(hooks...)
	c.Person.Use(hooks...)
	c.Player.Use(hooks...)
	c.PlayerIdentifier.Use(hooks...)
	c.Race.Use(hooks...)
	c.Session.Use(hooks...)
	c.Setting.Use(hooks...)
	c.Sex.Use(hooks...)
	c.State.Use(hooks...)
	c.User.Use(hooks...)
	c.Vehicle.Use(hooks...)
	c.VehicleClass.Use(hooks...)
	c.VehicleColor.Use(hooks...)
	c.VehicleMake.Use(hooks...)
	c.VehicleModel.Use(hooks...)
	c.VehicleRegistration.Use(hooks...)
}

// DeathCertificateClient is a client for the DeathCertificate schema.
type DeathCertificateClient struct {
	config
}

// NewDeathCertificateClient returns a client for the DeathCertificate from the given config.
func NewDeathCertificateClient(c config) *DeathCertificateClient {
	return &DeathCertificateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deathcertificate.Hooks(f(g(h())))`.
func (c *DeathCertificateClient) Use(hooks ...Hook) {
	c.hooks.DeathCertificate = append(c.hooks.DeathCertificate, hooks...)
}

// Create returns a create builder for DeathCertificate.
func (c *DeathCertificateClient) Create() *DeathCertificateCreate {
	mutation := newDeathCertificateMutation(c.config, OpCreate)
	return &DeathCertificateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeathCertificate entities.
func (c *DeathCertificateClient) CreateBulk(builders ...*DeathCertificateCreate) *DeathCertificateCreateBulk {
	return &DeathCertificateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeathCertificate.
func (c *DeathCertificateClient) Update() *DeathCertificateUpdate {
	mutation := newDeathCertificateMutation(c.config, OpUpdate)
	return &DeathCertificateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeathCertificateClient) UpdateOne(dc *DeathCertificate) *DeathCertificateUpdateOne {
	mutation := newDeathCertificateMutation(c.config, OpUpdateOne, withDeathCertificate(dc))
	return &DeathCertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeathCertificateClient) UpdateOneID(id int) *DeathCertificateUpdateOne {
	mutation := newDeathCertificateMutation(c.config, OpUpdateOne, withDeathCertificateID(id))
	return &DeathCertificateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeathCertificate.
func (c *DeathCertificateClient) Delete() *DeathCertificateDelete {
	mutation := newDeathCertificateMutation(c.config, OpDelete)
	return &DeathCertificateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeathCertificateClient) DeleteOne(dc *DeathCertificate) *DeathCertificateDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeathCertificateClient) DeleteOneID(id int) *DeathCertificateDeleteOne {
	builder := c.Delete().Where(deathcertificate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeathCertificateDeleteOne{builder}
}

// Query returns a query builder for DeathCertificate.
func (c *DeathCertificateClient) Query() *DeathCertificateQuery {
	return &DeathCertificateQuery{
		config: c.config,
	}
}

// Get returns a DeathCertificate entity by its id.
func (c *DeathCertificateClient) Get(ctx context.Context, id int) (*DeathCertificate, error) {
	return c.Query().Where(deathcertificate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeathCertificateClient) GetX(ctx context.Context, id int) *DeathCertificate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryMetadata(dc *DeathCertificate) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deathcertificate.MetadataTable, deathcertificate.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDecedent queries the decedent edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryDecedent(dc *DeathCertificate) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deathcertificate.DecedentTable, deathcertificate.DecedentColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManner queries the manner edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryManner(dc *DeathCertificate) *DeathMannerQuery {
	query := &DeathMannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(deathmanner.Table, deathmanner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.MannerTable, deathcertificate.MannerColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlace queries the place edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryPlace(dc *DeathCertificate) *DeathPlaceQuery {
	query := &DeathPlaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(deathplace.Table, deathplace.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.PlaceTable, deathcertificate.PlaceColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertifier queries the certifier edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryCertifier(dc *DeathCertificate) *DeathCertifierQuery {
	query := &DeathCertifierQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(deathcertifier.Table, deathcertifier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.CertifierTable, deathcertificate.CertifierColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertifiedBy queries the certified_by edge of a DeathCertificate.
func (c *DeathCertificateClient) QueryCertifiedBy(dc *DeathCertificate) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertificate.Table, deathcertificate.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deathcertificate.CertifiedByTable, deathcertificate.CertifiedByColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeathCertificateClient) Hooks() []Hook {
	hooks := c.hooks.DeathCertificate
	return append(hooks[:len(hooks):len(hooks)], deathcertificate.Hooks[:]...)
}

// DeathCertifierClient is a client for the DeathCertifier schema.
type DeathCertifierClient struct {
	config
}

// NewDeathCertifierClient returns a client for the DeathCertifier from the given config.
func NewDeathCertifierClient(c config) *DeathCertifierClient {
	return &DeathCertifierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deathcertifier.Hooks(f(g(h())))`.
func (c *DeathCertifierClient) Use(hooks ...Hook) {
	c.hooks.DeathCertifier = append(c.hooks.DeathCertifier, hooks...)
}

// Create returns a create builder for DeathCertifier.
func (c *DeathCertifierClient) Create() *DeathCertifierCreate {
	mutation := newDeathCertifierMutation(c.config, OpCreate)
	return &DeathCertifierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeathCertifier entities.
func (c *DeathCertifierClient) CreateBulk(builders ...*DeathCertifierCreate) *DeathCertifierCreateBulk {
	return &DeathCertifierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeathCertifier.
func (c *DeathCertifierClient) Update() *DeathCertifierUpdate {
	mutation := newDeathCertifierMutation(c.config, OpUpdate)
	return &DeathCertifierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeathCertifierClient) UpdateOne(dc *DeathCertifier) *DeathCertifierUpdateOne {
	mutation := newDeathCertifierMutation(c.config, OpUpdateOne, withDeathCertifier(dc))
	return &DeathCertifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeathCertifierClient) UpdateOneID(id int) *DeathCertifierUpdateOne {
	mutation := newDeathCertifierMutation(c.config, OpUpdateOne, withDeathCertifierID(id))
	return &DeathCertifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeathCertifier.
func (c *DeathCertifierClient) Delete() *DeathCertifierDelete {
	mutation := newDeathCertifierMutation(c.config, OpDelete)
	return &DeathCertifierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeathCertifierClient) DeleteOne(dc *DeathCertifier) *DeathCertifierDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeathCertifierClient) DeleteOneID(id int) *DeathCertifierDeleteOne {
	builder := c.Delete().Where(deathcertifier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeathCertifierDeleteOne{builder}
}

// Query returns a query builder for DeathCertifier.
func (c *DeathCertifierClient) Query() *DeathCertifierQuery {
	return &DeathCertifierQuery{
		config: c.config,
	}
}

// Get returns a DeathCertifier entity by its id.
func (c *DeathCertifierClient) Get(ctx context.Context, id int) (*DeathCertifier, error) {
	return c.Query().Where(deathcertifier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeathCertifierClient) GetX(ctx context.Context, id int) *DeathCertifier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a DeathCertifier.
func (c *DeathCertifierClient) QueryMetadata(dc *DeathCertifier) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertifier.Table, deathcertifier.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deathcertifier.MetadataTable, deathcertifier.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeathCertificates queries the death_certificates edge of a DeathCertifier.
func (c *DeathCertifierClient) QueryDeathCertificates(dc *DeathCertifier) *DeathCertificateQuery {
	query := &DeathCertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathcertifier.Table, deathcertifier.FieldID, id),
			sqlgraph.To(deathcertificate.Table, deathcertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deathcertifier.DeathCertificatesTable, deathcertifier.DeathCertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeathCertifierClient) Hooks() []Hook {
	hooks := c.hooks.DeathCertifier
	return append(hooks[:len(hooks):len(hooks)], deathcertifier.Hooks[:]...)
}

// DeathMannerClient is a client for the DeathManner schema.
type DeathMannerClient struct {
	config
}

// NewDeathMannerClient returns a client for the DeathManner from the given config.
func NewDeathMannerClient(c config) *DeathMannerClient {
	return &DeathMannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deathmanner.Hooks(f(g(h())))`.
func (c *DeathMannerClient) Use(hooks ...Hook) {
	c.hooks.DeathManner = append(c.hooks.DeathManner, hooks...)
}

// Create returns a create builder for DeathManner.
func (c *DeathMannerClient) Create() *DeathMannerCreate {
	mutation := newDeathMannerMutation(c.config, OpCreate)
	return &DeathMannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeathManner entities.
func (c *DeathMannerClient) CreateBulk(builders ...*DeathMannerCreate) *DeathMannerCreateBulk {
	return &DeathMannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeathManner.
func (c *DeathMannerClient) Update() *DeathMannerUpdate {
	mutation := newDeathMannerMutation(c.config, OpUpdate)
	return &DeathMannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeathMannerClient) UpdateOne(dm *DeathManner) *DeathMannerUpdateOne {
	mutation := newDeathMannerMutation(c.config, OpUpdateOne, withDeathManner(dm))
	return &DeathMannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeathMannerClient) UpdateOneID(id int) *DeathMannerUpdateOne {
	mutation := newDeathMannerMutation(c.config, OpUpdateOne, withDeathMannerID(id))
	return &DeathMannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeathManner.
func (c *DeathMannerClient) Delete() *DeathMannerDelete {
	mutation := newDeathMannerMutation(c.config, OpDelete)
	return &DeathMannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeathMannerClient) DeleteOne(dm *DeathManner) *DeathMannerDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeathMannerClient) DeleteOneID(id int) *DeathMannerDeleteOne {
	builder := c.Delete().Where(deathmanner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeathMannerDeleteOne{builder}
}

// Query returns a query builder for DeathManner.
func (c *DeathMannerClient) Query() *DeathMannerQuery {
	return &DeathMannerQuery{
		config: c.config,
	}
}

// Get returns a DeathManner entity by its id.
func (c *DeathMannerClient) Get(ctx context.Context, id int) (*DeathManner, error) {
	return c.Query().Where(deathmanner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeathMannerClient) GetX(ctx context.Context, id int) *DeathManner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a DeathManner.
func (c *DeathMannerClient) QueryMetadata(dm *DeathManner) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathmanner.Table, deathmanner.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deathmanner.MetadataTable, deathmanner.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeathCertificates queries the death_certificates edge of a DeathManner.
func (c *DeathMannerClient) QueryDeathCertificates(dm *DeathManner) *DeathCertificateQuery {
	query := &DeathCertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathmanner.Table, deathmanner.FieldID, id),
			sqlgraph.To(deathcertificate.Table, deathcertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deathmanner.DeathCertificatesTable, deathmanner.DeathCertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeathMannerClient) Hooks() []Hook {
	hooks := c.hooks.DeathManner
	return append(hooks[:len(hooks):len(hooks)], deathmanner.Hooks[:]...)
}

// DeathPlaceClient is a client for the DeathPlace schema.
type DeathPlaceClient struct {
	config
}

// NewDeathPlaceClient returns a client for the DeathPlace from the given config.
func NewDeathPlaceClient(c config) *DeathPlaceClient {
	return &DeathPlaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deathplace.Hooks(f(g(h())))`.
func (c *DeathPlaceClient) Use(hooks ...Hook) {
	c.hooks.DeathPlace = append(c.hooks.DeathPlace, hooks...)
}

// Create returns a create builder for DeathPlace.
func (c *DeathPlaceClient) Create() *DeathPlaceCreate {
	mutation := newDeathPlaceMutation(c.config, OpCreate)
	return &DeathPlaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeathPlace entities.
func (c *DeathPlaceClient) CreateBulk(builders ...*DeathPlaceCreate) *DeathPlaceCreateBulk {
	return &DeathPlaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeathPlace.
func (c *DeathPlaceClient) Update() *DeathPlaceUpdate {
	mutation := newDeathPlaceMutation(c.config, OpUpdate)
	return &DeathPlaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeathPlaceClient) UpdateOne(dp *DeathPlace) *DeathPlaceUpdateOne {
	mutation := newDeathPlaceMutation(c.config, OpUpdateOne, withDeathPlace(dp))
	return &DeathPlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeathPlaceClient) UpdateOneID(id int) *DeathPlaceUpdateOne {
	mutation := newDeathPlaceMutation(c.config, OpUpdateOne, withDeathPlaceID(id))
	return &DeathPlaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeathPlace.
func (c *DeathPlaceClient) Delete() *DeathPlaceDelete {
	mutation := newDeathPlaceMutation(c.config, OpDelete)
	return &DeathPlaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeathPlaceClient) DeleteOne(dp *DeathPlace) *DeathPlaceDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeathPlaceClient) DeleteOneID(id int) *DeathPlaceDeleteOne {
	builder := c.Delete().Where(deathplace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeathPlaceDeleteOne{builder}
}

// Query returns a query builder for DeathPlace.
func (c *DeathPlaceClient) Query() *DeathPlaceQuery {
	return &DeathPlaceQuery{
		config: c.config,
	}
}

// Get returns a DeathPlace entity by its id.
func (c *DeathPlaceClient) Get(ctx context.Context, id int) (*DeathPlace, error) {
	return c.Query().Where(deathplace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeathPlaceClient) GetX(ctx context.Context, id int) *DeathPlace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a DeathPlace.
func (c *DeathPlaceClient) QueryMetadata(dp *DeathPlace) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathplace.Table, deathplace.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deathplace.MetadataTable, deathplace.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeathCertificates queries the death_certificates edge of a DeathPlace.
func (c *DeathPlaceClient) QueryDeathCertificates(dp *DeathPlace) *DeathCertificateQuery {
	query := &DeathCertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deathplace.Table, deathplace.FieldID, id),
			sqlgraph.To(deathcertificate.Table, deathcertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deathplace.DeathCertificatesTable, deathplace.DeathCertificatesColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeathPlaceClient) Hooks() []Hook {
	hooks := c.hooks.DeathPlace
	return append(hooks[:len(hooks):len(hooks)], deathplace.Hooks[:]...)
}

// EthnicityClient is a client for the Ethnicity schema.
type EthnicityClient struct {
	config
}

// NewEthnicityClient returns a client for the Ethnicity from the given config.
func NewEthnicityClient(c config) *EthnicityClient {
	return &EthnicityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ethnicity.Hooks(f(g(h())))`.
func (c *EthnicityClient) Use(hooks ...Hook) {
	c.hooks.Ethnicity = append(c.hooks.Ethnicity, hooks...)
}

// Create returns a create builder for Ethnicity.
func (c *EthnicityClient) Create() *EthnicityCreate {
	mutation := newEthnicityMutation(c.config, OpCreate)
	return &EthnicityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ethnicity entities.
func (c *EthnicityClient) CreateBulk(builders ...*EthnicityCreate) *EthnicityCreateBulk {
	return &EthnicityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ethnicity.
func (c *EthnicityClient) Update() *EthnicityUpdate {
	mutation := newEthnicityMutation(c.config, OpUpdate)
	return &EthnicityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EthnicityClient) UpdateOne(e *Ethnicity) *EthnicityUpdateOne {
	mutation := newEthnicityMutation(c.config, OpUpdateOne, withEthnicity(e))
	return &EthnicityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EthnicityClient) UpdateOneID(id int) *EthnicityUpdateOne {
	mutation := newEthnicityMutation(c.config, OpUpdateOne, withEthnicityID(id))
	return &EthnicityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ethnicity.
func (c *EthnicityClient) Delete() *EthnicityDelete {
	mutation := newEthnicityMutation(c.config, OpDelete)
	return &EthnicityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EthnicityClient) DeleteOne(e *Ethnicity) *EthnicityDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EthnicityClient) DeleteOneID(id int) *EthnicityDeleteOne {
	builder := c.Delete().Where(ethnicity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EthnicityDeleteOne{builder}
}

// Query returns a query builder for Ethnicity.
func (c *EthnicityClient) Query() *EthnicityQuery {
	return &EthnicityQuery{
		config: c.config,
	}
}

// Get returns a Ethnicity entity by its id.
func (c *EthnicityClient) Get(ctx context.Context, id int) (*Ethnicity, error) {
	return c.Query().Where(ethnicity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EthnicityClient) GetX(ctx context.Context, id int) *Ethnicity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Ethnicity.
func (c *EthnicityClient) QueryMetadata(e *Ethnicity) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ethnicity.Table, ethnicity.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ethnicity.MetadataTable, ethnicity.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeople queries the people edge of a Ethnicity.
func (c *EthnicityClient) QueryPeople(e *Ethnicity) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ethnicity.Table, ethnicity.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ethnicity.PeopleTable, ethnicity.PeopleColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EthnicityClient) Hooks() []Hook {
	hooks := c.hooks.Ethnicity
	return append(hooks[:len(hooks):len(hooks)], ethnicity.Hooks[:]...)
}

// GameServerClient is a client for the GameServer schema.
type GameServerClient struct {
	config
}

// NewGameServerClient returns a client for the GameServer from the given config.
func NewGameServerClient(c config) *GameServerClient {
	return &GameServerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gameserver.Hooks(f(g(h())))`.
func (c *GameServerClient) Use(hooks ...Hook) {
	c.hooks.GameServer = append(c.hooks.GameServer, hooks...)
}

// Create returns a create builder for GameServer.
func (c *GameServerClient) Create() *GameServerCreate {
	mutation := newGameServerMutation(c.config, OpCreate)
	return &GameServerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameServer entities.
func (c *GameServerClient) CreateBulk(builders ...*GameServerCreate) *GameServerCreateBulk {
	return &GameServerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameServer.
func (c *GameServerClient) Update() *GameServerUpdate {
	mutation := newGameServerMutation(c.config, OpUpdate)
	return &GameServerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameServerClient) UpdateOne(gs *GameServer) *GameServerUpdateOne {
	mutation := newGameServerMutation(c.config, OpUpdateOne, withGameServer(gs))
	return &GameServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameServerClient) UpdateOneID(id int) *GameServerUpdateOne {
	mutation := newGameServerMutation(c.config, OpUpdateOne, withGameServerID(id))
	return &GameServerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameServer.
func (c *GameServerClient) Delete() *GameServerDelete {
	mutation := newGameServerMutation(c.config, OpDelete)
	return &GameServerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GameServerClient) DeleteOne(gs *GameServer) *GameServerDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GameServerClient) DeleteOneID(id int) *GameServerDeleteOne {
	builder := c.Delete().Where(gameserver.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameServerDeleteOne{builder}
}

// Query returns a query builder for GameServer.
func (c *GameServerClient) Query() *GameServerQuery {
	return &GameServerQuery{
		config: c.config,
	}
}

// Get returns a GameServer entity by its id.
func (c *GameServerClient) Get(ctx context.Context, id int) (*GameServer, error) {
	return c.Query().Where(gameserver.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameServerClient) GetX(ctx context.Context, id int) *GameServer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a GameServer.
func (c *GameServerClient) QueryMetadata(gs *GameServer) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameserver.Table, gameserver.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gameserver.MetadataTable, gameserver.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayers queries the players edge of a GameServer.
func (c *GameServerClient) QueryPlayers(gs *GameServer) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameserver.Table, gameserver.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, gameserver.PlayersTable, gameserver.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameServerClient) Hooks() []Hook {
	hooks := c.hooks.GameServer
	return append(hooks[:len(hooks):len(hooks)], gameserver.Hooks[:]...)
}

// MetadataClient is a client for the Metadata schema.
type MetadataClient struct {
	config
}

// NewMetadataClient returns a client for the Metadata from the given config.
func NewMetadataClient(c config) *MetadataClient {
	return &MetadataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `metadata.Hooks(f(g(h())))`.
func (c *MetadataClient) Use(hooks ...Hook) {
	c.hooks.Metadata = append(c.hooks.Metadata, hooks...)
}

// Create returns a create builder for Metadata.
func (c *MetadataClient) Create() *MetadataCreate {
	mutation := newMetadataMutation(c.config, OpCreate)
	return &MetadataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Metadata entities.
func (c *MetadataClient) CreateBulk(builders ...*MetadataCreate) *MetadataCreateBulk {
	return &MetadataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Metadata.
func (c *MetadataClient) Update() *MetadataUpdate {
	mutation := newMetadataMutation(c.config, OpUpdate)
	return &MetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MetadataClient) UpdateOne(m *Metadata) *MetadataUpdateOne {
	mutation := newMetadataMutation(c.config, OpUpdateOne, withMetadata(m))
	return &MetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MetadataClient) UpdateOneID(id int) *MetadataUpdateOne {
	mutation := newMetadataMutation(c.config, OpUpdateOne, withMetadataID(id))
	return &MetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Metadata.
func (c *MetadataClient) Delete() *MetadataDelete {
	mutation := newMetadataMutation(c.config, OpDelete)
	return &MetadataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MetadataClient) DeleteOne(m *Metadata) *MetadataDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MetadataClient) DeleteOneID(id int) *MetadataDeleteOne {
	builder := c.Delete().Where(metadata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MetadataDeleteOne{builder}
}

// Query returns a query builder for Metadata.
func (c *MetadataClient) Query() *MetadataQuery {
	return &MetadataQuery{
		config: c.config,
	}
}

// Get returns a Metadata entity by its id.
func (c *MetadataClient) Get(ctx context.Context, id int) (*Metadata, error) {
	return c.Query().Where(metadata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MetadataClient) GetX(ctx context.Context, id int) *Metadata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MetadataClient) Hooks() []Hook {
	hooks := c.hooks.Metadata
	return append(hooks[:len(hooks):len(hooks)], metadata.Hooks[:]...)
}

// OAuthConnectionClient is a client for the OAuthConnection schema.
type OAuthConnectionClient struct {
	config
}

// NewOAuthConnectionClient returns a client for the OAuthConnection from the given config.
func NewOAuthConnectionClient(c config) *OAuthConnectionClient {
	return &OAuthConnectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthconnection.Hooks(f(g(h())))`.
func (c *OAuthConnectionClient) Use(hooks ...Hook) {
	c.hooks.OAuthConnection = append(c.hooks.OAuthConnection, hooks...)
}

// Create returns a create builder for OAuthConnection.
func (c *OAuthConnectionClient) Create() *OAuthConnectionCreate {
	mutation := newOAuthConnectionMutation(c.config, OpCreate)
	return &OAuthConnectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthConnection entities.
func (c *OAuthConnectionClient) CreateBulk(builders ...*OAuthConnectionCreate) *OAuthConnectionCreateBulk {
	return &OAuthConnectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthConnection.
func (c *OAuthConnectionClient) Update() *OAuthConnectionUpdate {
	mutation := newOAuthConnectionMutation(c.config, OpUpdate)
	return &OAuthConnectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthConnectionClient) UpdateOne(oc *OAuthConnection) *OAuthConnectionUpdateOne {
	mutation := newOAuthConnectionMutation(c.config, OpUpdateOne, withOAuthConnection(oc))
	return &OAuthConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthConnectionClient) UpdateOneID(id int) *OAuthConnectionUpdateOne {
	mutation := newOAuthConnectionMutation(c.config, OpUpdateOne, withOAuthConnectionID(id))
	return &OAuthConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthConnection.
func (c *OAuthConnectionClient) Delete() *OAuthConnectionDelete {
	mutation := newOAuthConnectionMutation(c.config, OpDelete)
	return &OAuthConnectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OAuthConnectionClient) DeleteOne(oc *OAuthConnection) *OAuthConnectionDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OAuthConnectionClient) DeleteOneID(id int) *OAuthConnectionDeleteOne {
	builder := c.Delete().Where(oauthconnection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthConnectionDeleteOne{builder}
}

// Query returns a query builder for OAuthConnection.
func (c *OAuthConnectionClient) Query() *OAuthConnectionQuery {
	return &OAuthConnectionQuery{
		config: c.config,
	}
}

// Get returns a OAuthConnection entity by its id.
func (c *OAuthConnectionClient) Get(ctx context.Context, id int) (*OAuthConnection, error) {
	return c.Query().Where(oauthconnection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthConnectionClient) GetX(ctx context.Context, id int) *OAuthConnection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a OAuthConnection.
func (c *OAuthConnectionClient) QueryUser(oc *OAuthConnection) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := oc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthconnection.Table, oauthconnection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthconnection.UserTable, oauthconnection.UserColumn),
		)
		fromV = sqlgraph.Neighbors(oc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthConnectionClient) Hooks() []Hook {
	hooks := c.hooks.OAuthConnection
	return append(hooks[:len(hooks):len(hooks)], oauthconnection.Hooks[:]...)
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id int) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id int) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id int) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id int) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Person.
func (c *PersonClient) QueryMetadata(pe *Person) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, person.MetadataTable, person.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicleRegistrations queries the vehicle_registrations edge of a Person.
func (c *PersonClient) QueryVehicleRegistrations(pe *Person) *VehicleRegistrationQuery {
	query := &VehicleRegistrationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(vehicleregistration.Table, vehicleregistration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.VehicleRegistrationsTable, person.VehicleRegistrationsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRace queries the race edge of a Person.
func (c *PersonClient) QueryRace(pe *Person) *RaceQuery {
	query := &RaceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(race.Table, race.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.RaceTable, person.RaceColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEthnicity queries the ethnicity edge of a Person.
func (c *PersonClient) QueryEthnicity(pe *Person) *EthnicityQuery {
	query := &EthnicityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(ethnicity.Table, ethnicity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.EthnicityTable, person.EthnicityColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySex queries the sex edge of a Person.
func (c *PersonClient) QuerySex(pe *Person) *SexQuery {
	query := &SexQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(sex.Table, sex.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.SexTable, person.SexColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Person.
func (c *PersonClient) QueryUser(pe *Person) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, person.UserTable, person.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeathCertificate queries the death_certificate edge of a Person.
func (c *PersonClient) QueryDeathCertificate(pe *Person) *DeathCertificateQuery {
	query := &DeathCertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(deathcertificate.Table, deathcertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, person.DeathCertificateTable, person.DeathCertificateColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCertifiedDeaths queries the certified_deaths edge of a Person.
func (c *PersonClient) QueryCertifiedDeaths(pe *Person) *DeathCertificateQuery {
	query := &DeathCertificateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(deathcertificate.Table, deathcertificate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.CertifiedDeathsTable, person.CertifiedDeathsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	hooks := c.hooks.Person
	return append(hooks[:len(hooks):len(hooks)], person.Hooks[:]...)
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Create returns a create builder for Player.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id int) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlayerClient) DeleteOneID(id int) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{
		config: c.config,
	}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id int) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id int) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Player.
func (c *PlayerClient) QueryMetadata(pl *Player) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, player.MetadataTable, player.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServers queries the servers edge of a Player.
func (c *PlayerClient) QueryServers(pl *Player) *GameServerQuery {
	query := &GameServerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(gameserver.Table, gameserver.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, player.ServersTable, player.ServersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdentifiers queries the identifiers edge of a Player.
func (c *PlayerClient) QueryIdentifiers(pl *Player) *PlayerIdentifierQuery {
	query := &PlayerIdentifierQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(playeridentifier.Table, playeridentifier.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.IdentifiersTable, player.IdentifiersColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	hooks := c.hooks.Player
	return append(hooks[:len(hooks):len(hooks)], player.Hooks[:]...)
}

// PlayerIdentifierClient is a client for the PlayerIdentifier schema.
type PlayerIdentifierClient struct {
	config
}

// NewPlayerIdentifierClient returns a client for the PlayerIdentifier from the given config.
func NewPlayerIdentifierClient(c config) *PlayerIdentifierClient {
	return &PlayerIdentifierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playeridentifier.Hooks(f(g(h())))`.
func (c *PlayerIdentifierClient) Use(hooks ...Hook) {
	c.hooks.PlayerIdentifier = append(c.hooks.PlayerIdentifier, hooks...)
}

// Create returns a create builder for PlayerIdentifier.
func (c *PlayerIdentifierClient) Create() *PlayerIdentifierCreate {
	mutation := newPlayerIdentifierMutation(c.config, OpCreate)
	return &PlayerIdentifierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerIdentifier entities.
func (c *PlayerIdentifierClient) CreateBulk(builders ...*PlayerIdentifierCreate) *PlayerIdentifierCreateBulk {
	return &PlayerIdentifierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerIdentifier.
func (c *PlayerIdentifierClient) Update() *PlayerIdentifierUpdate {
	mutation := newPlayerIdentifierMutation(c.config, OpUpdate)
	return &PlayerIdentifierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerIdentifierClient) UpdateOne(pi *PlayerIdentifier) *PlayerIdentifierUpdateOne {
	mutation := newPlayerIdentifierMutation(c.config, OpUpdateOne, withPlayerIdentifier(pi))
	return &PlayerIdentifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerIdentifierClient) UpdateOneID(id int) *PlayerIdentifierUpdateOne {
	mutation := newPlayerIdentifierMutation(c.config, OpUpdateOne, withPlayerIdentifierID(id))
	return &PlayerIdentifierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerIdentifier.
func (c *PlayerIdentifierClient) Delete() *PlayerIdentifierDelete {
	mutation := newPlayerIdentifierMutation(c.config, OpDelete)
	return &PlayerIdentifierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlayerIdentifierClient) DeleteOne(pi *PlayerIdentifier) *PlayerIdentifierDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlayerIdentifierClient) DeleteOneID(id int) *PlayerIdentifierDeleteOne {
	builder := c.Delete().Where(playeridentifier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerIdentifierDeleteOne{builder}
}

// Query returns a query builder for PlayerIdentifier.
func (c *PlayerIdentifierClient) Query() *PlayerIdentifierQuery {
	return &PlayerIdentifierQuery{
		config: c.config,
	}
}

// Get returns a PlayerIdentifier entity by its id.
func (c *PlayerIdentifierClient) Get(ctx context.Context, id int) (*PlayerIdentifier, error) {
	return c.Query().Where(playeridentifier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerIdentifierClient) GetX(ctx context.Context, id int) *PlayerIdentifier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayer queries the player edge of a PlayerIdentifier.
func (c *PlayerIdentifierClient) QueryPlayer(pi *PlayerIdentifier) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playeridentifier.Table, playeridentifier.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playeridentifier.PlayerTable, playeridentifier.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerIdentifierClient) Hooks() []Hook {
	hooks := c.hooks.PlayerIdentifier
	return append(hooks[:len(hooks):len(hooks)], playeridentifier.Hooks[:]...)
}

// RaceClient is a client for the Race schema.
type RaceClient struct {
	config
}

// NewRaceClient returns a client for the Race from the given config.
func NewRaceClient(c config) *RaceClient {
	return &RaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `race.Hooks(f(g(h())))`.
func (c *RaceClient) Use(hooks ...Hook) {
	c.hooks.Race = append(c.hooks.Race, hooks...)
}

// Create returns a create builder for Race.
func (c *RaceClient) Create() *RaceCreate {
	mutation := newRaceMutation(c.config, OpCreate)
	return &RaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Race entities.
func (c *RaceClient) CreateBulk(builders ...*RaceCreate) *RaceCreateBulk {
	return &RaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Race.
func (c *RaceClient) Update() *RaceUpdate {
	mutation := newRaceMutation(c.config, OpUpdate)
	return &RaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RaceClient) UpdateOne(r *Race) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRace(r))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RaceClient) UpdateOneID(id int) *RaceUpdateOne {
	mutation := newRaceMutation(c.config, OpUpdateOne, withRaceID(id))
	return &RaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Race.
func (c *RaceClient) Delete() *RaceDelete {
	mutation := newRaceMutation(c.config, OpDelete)
	return &RaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RaceClient) DeleteOne(r *Race) *RaceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RaceClient) DeleteOneID(id int) *RaceDeleteOne {
	builder := c.Delete().Where(race.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RaceDeleteOne{builder}
}

// Query returns a query builder for Race.
func (c *RaceClient) Query() *RaceQuery {
	return &RaceQuery{
		config: c.config,
	}
}

// Get returns a Race entity by its id.
func (c *RaceClient) Get(ctx context.Context, id int) (*Race, error) {
	return c.Query().Where(race.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RaceClient) GetX(ctx context.Context, id int) *Race {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPeople queries the people edge of a Race.
func (c *RaceClient) QueryPeople(r *Race) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(race.Table, race.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, race.PeopleTable, race.PeopleColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RaceClient) Hooks() []Hook {
	hooks := c.hooks.Race
	return append(hooks[:len(hooks):len(hooks)], race.Hooks[:]...)
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	hooks := c.hooks.Session
	return append(hooks[:len(hooks):len(hooks)], session.Hooks[:]...)
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Create returns a create builder for Setting.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id int) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingClient) DeleteOneID(id int) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id int) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id int) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	hooks := c.hooks.Setting
	return append(hooks[:len(hooks):len(hooks)], setting.Hooks[:]...)
}

// SexClient is a client for the Sex schema.
type SexClient struct {
	config
}

// NewSexClient returns a client for the Sex from the given config.
func NewSexClient(c config) *SexClient {
	return &SexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sex.Hooks(f(g(h())))`.
func (c *SexClient) Use(hooks ...Hook) {
	c.hooks.Sex = append(c.hooks.Sex, hooks...)
}

// Create returns a create builder for Sex.
func (c *SexClient) Create() *SexCreate {
	mutation := newSexMutation(c.config, OpCreate)
	return &SexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sex entities.
func (c *SexClient) CreateBulk(builders ...*SexCreate) *SexCreateBulk {
	return &SexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sex.
func (c *SexClient) Update() *SexUpdate {
	mutation := newSexMutation(c.config, OpUpdate)
	return &SexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SexClient) UpdateOne(s *Sex) *SexUpdateOne {
	mutation := newSexMutation(c.config, OpUpdateOne, withSex(s))
	return &SexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SexClient) UpdateOneID(id int) *SexUpdateOne {
	mutation := newSexMutation(c.config, OpUpdateOne, withSexID(id))
	return &SexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sex.
func (c *SexClient) Delete() *SexDelete {
	mutation := newSexMutation(c.config, OpDelete)
	return &SexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SexClient) DeleteOne(s *Sex) *SexDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SexClient) DeleteOneID(id int) *SexDeleteOne {
	builder := c.Delete().Where(sex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SexDeleteOne{builder}
}

// Query returns a query builder for Sex.
func (c *SexClient) Query() *SexQuery {
	return &SexQuery{
		config: c.config,
	}
}

// Get returns a Sex entity by its id.
func (c *SexClient) Get(ctx context.Context, id int) (*Sex, error) {
	return c.Query().Where(sex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SexClient) GetX(ctx context.Context, id int) *Sex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Sex.
func (c *SexClient) QueryMetadata(s *Sex) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sex.Table, sex.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sex.MetadataTable, sex.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeople queries the people edge of a Sex.
func (c *SexClient) QueryPeople(s *Sex) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sex.Table, sex.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sex.PeopleTable, sex.PeopleColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SexClient) Hooks() []Hook {
	hooks := c.hooks.Sex
	return append(hooks[:len(hooks):len(hooks)], sex.Hooks[:]...)
}

// StateClient is a client for the State schema.
type StateClient struct {
	config
}

// NewStateClient returns a client for the State from the given config.
func NewStateClient(c config) *StateClient {
	return &StateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `state.Hooks(f(g(h())))`.
func (c *StateClient) Use(hooks ...Hook) {
	c.hooks.State = append(c.hooks.State, hooks...)
}

// Create returns a create builder for State.
func (c *StateClient) Create() *StateCreate {
	mutation := newStateMutation(c.config, OpCreate)
	return &StateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of State entities.
func (c *StateClient) CreateBulk(builders ...*StateCreate) *StateCreateBulk {
	return &StateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for State.
func (c *StateClient) Update() *StateUpdate {
	mutation := newStateMutation(c.config, OpUpdate)
	return &StateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StateClient) UpdateOne(s *State) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withState(s))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StateClient) UpdateOneID(id int) *StateUpdateOne {
	mutation := newStateMutation(c.config, OpUpdateOne, withStateID(id))
	return &StateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for State.
func (c *StateClient) Delete() *StateDelete {
	mutation := newStateMutation(c.config, OpDelete)
	return &StateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StateClient) DeleteOne(s *State) *StateDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StateClient) DeleteOneID(id int) *StateDeleteOne {
	builder := c.Delete().Where(state.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StateDeleteOne{builder}
}

// Query returns a query builder for State.
func (c *StateClient) Query() *StateQuery {
	return &StateQuery{
		config: c.config,
	}
}

// Get returns a State entity by its id.
func (c *StateClient) Get(ctx context.Context, id int) (*State, error) {
	return c.Query().Where(state.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StateClient) GetX(ctx context.Context, id int) *State {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVehicleRegistrations queries the vehicle_registrations edge of a State.
func (c *StateClient) QueryVehicleRegistrations(s *State) *VehicleRegistrationQuery {
	query := &VehicleRegistrationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(state.Table, state.FieldID, id),
			sqlgraph.To(vehicleregistration.Table, vehicleregistration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, state.VehicleRegistrationsTable, state.VehicleRegistrationsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StateClient) Hooks() []Hook {
	hooks := c.hooks.State
	return append(hooks[:len(hooks):len(hooks)], state.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a User.
func (c *UserClient) QueryMetadata(u *User) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.MetadataTable, user.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthConnections queries the oauth_connections edge of a User.
func (c *UserClient) QueryOauthConnections(u *User) *OAuthConnectionQuery {
	query := &OAuthConnectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(oauthconnection.Table, oauthconnection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OauthConnectionsTable, user.OauthConnectionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeople queries the people edge of a User.
func (c *UserClient) QueryPeople(u *User) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PeopleTable, user.PeopleColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// VehicleClient is a client for the Vehicle schema.
type VehicleClient struct {
	config
}

// NewVehicleClient returns a client for the Vehicle from the given config.
func NewVehicleClient(c config) *VehicleClient {
	return &VehicleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicle.Hooks(f(g(h())))`.
func (c *VehicleClient) Use(hooks ...Hook) {
	c.hooks.Vehicle = append(c.hooks.Vehicle, hooks...)
}

// Create returns a create builder for Vehicle.
func (c *VehicleClient) Create() *VehicleCreate {
	mutation := newVehicleMutation(c.config, OpCreate)
	return &VehicleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vehicle entities.
func (c *VehicleClient) CreateBulk(builders ...*VehicleCreate) *VehicleCreateBulk {
	return &VehicleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vehicle.
func (c *VehicleClient) Update() *VehicleUpdate {
	mutation := newVehicleMutation(c.config, OpUpdate)
	return &VehicleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClient) UpdateOne(v *Vehicle) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicle(v))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClient) UpdateOneID(id int) *VehicleUpdateOne {
	mutation := newVehicleMutation(c.config, OpUpdateOne, withVehicleID(id))
	return &VehicleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vehicle.
func (c *VehicleClient) Delete() *VehicleDelete {
	mutation := newVehicleMutation(c.config, OpDelete)
	return &VehicleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleClient) DeleteOne(v *Vehicle) *VehicleDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleClient) DeleteOneID(id int) *VehicleDeleteOne {
	builder := c.Delete().Where(vehicle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleDeleteOne{builder}
}

// Query returns a query builder for Vehicle.
func (c *VehicleClient) Query() *VehicleQuery {
	return &VehicleQuery{
		config: c.config,
	}
}

// Get returns a Vehicle entity by its id.
func (c *VehicleClient) Get(ctx context.Context, id int) (*Vehicle, error) {
	return c.Query().Where(vehicle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClient) GetX(ctx context.Context, id int) *Vehicle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a Vehicle.
func (c *VehicleClient) QueryMetadata(v *Vehicle) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehicle.MetadataTable, vehicle.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegistrations queries the registrations edge of a Vehicle.
func (c *VehicleClient) QueryRegistrations(v *Vehicle) *VehicleRegistrationQuery {
	query := &VehicleRegistrationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehicleregistration.Table, vehicleregistration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicle.RegistrationsTable, vehicle.RegistrationsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMake queries the make edge of a Vehicle.
func (c *VehicleClient) QueryMake(v *Vehicle) *VehicleMakeQuery {
	query := &VehicleMakeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehiclemake.Table, vehiclemake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.MakeTable, vehicle.MakeColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModel queries the model edge of a Vehicle.
func (c *VehicleClient) QueryModel(v *Vehicle) *VehicleModelQuery {
	query := &VehicleModelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehiclemodel.Table, vehiclemodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.ModelTable, vehicle.ModelColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMajorColor queries the major_color edge of a Vehicle.
func (c *VehicleClient) QueryMajorColor(v *Vehicle) *VehicleColorQuery {
	query := &VehicleColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehiclecolor.Table, vehiclecolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.MajorColorTable, vehicle.MajorColorColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMinorColor queries the minor_color edge of a Vehicle.
func (c *VehicleClient) QueryMinorColor(v *Vehicle) *VehicleColorQuery {
	query := &VehicleColorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehiclecolor.Table, vehiclecolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.MinorColorTable, vehicle.MinorColorColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClass queries the class edge of a Vehicle.
func (c *VehicleClient) QueryClass(v *Vehicle) *VehicleClassQuery {
	query := &VehicleClassQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicle.Table, vehicle.FieldID, id),
			sqlgraph.To(vehicleclass.Table, vehicleclass.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicle.ClassTable, vehicle.ClassColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleClient) Hooks() []Hook {
	hooks := c.hooks.Vehicle
	return append(hooks[:len(hooks):len(hooks)], vehicle.Hooks[:]...)
}

// VehicleClassClient is a client for the VehicleClass schema.
type VehicleClassClient struct {
	config
}

// NewVehicleClassClient returns a client for the VehicleClass from the given config.
func NewVehicleClassClient(c config) *VehicleClassClient {
	return &VehicleClassClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicleclass.Hooks(f(g(h())))`.
func (c *VehicleClassClient) Use(hooks ...Hook) {
	c.hooks.VehicleClass = append(c.hooks.VehicleClass, hooks...)
}

// Create returns a create builder for VehicleClass.
func (c *VehicleClassClient) Create() *VehicleClassCreate {
	mutation := newVehicleClassMutation(c.config, OpCreate)
	return &VehicleClassCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleClass entities.
func (c *VehicleClassClient) CreateBulk(builders ...*VehicleClassCreate) *VehicleClassCreateBulk {
	return &VehicleClassCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleClass.
func (c *VehicleClassClient) Update() *VehicleClassUpdate {
	mutation := newVehicleClassMutation(c.config, OpUpdate)
	return &VehicleClassUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleClassClient) UpdateOne(vc *VehicleClass) *VehicleClassUpdateOne {
	mutation := newVehicleClassMutation(c.config, OpUpdateOne, withVehicleClass(vc))
	return &VehicleClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleClassClient) UpdateOneID(id int) *VehicleClassUpdateOne {
	mutation := newVehicleClassMutation(c.config, OpUpdateOne, withVehicleClassID(id))
	return &VehicleClassUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleClass.
func (c *VehicleClassClient) Delete() *VehicleClassDelete {
	mutation := newVehicleClassMutation(c.config, OpDelete)
	return &VehicleClassDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleClassClient) DeleteOne(vc *VehicleClass) *VehicleClassDeleteOne {
	return c.DeleteOneID(vc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleClassClient) DeleteOneID(id int) *VehicleClassDeleteOne {
	builder := c.Delete().Where(vehicleclass.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleClassDeleteOne{builder}
}

// Query returns a query builder for VehicleClass.
func (c *VehicleClassClient) Query() *VehicleClassQuery {
	return &VehicleClassQuery{
		config: c.config,
	}
}

// Get returns a VehicleClass entity by its id.
func (c *VehicleClassClient) Get(ctx context.Context, id int) (*VehicleClass, error) {
	return c.Query().Where(vehicleclass.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleClassClient) GetX(ctx context.Context, id int) *VehicleClass {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a VehicleClass.
func (c *VehicleClassClient) QueryMetadata(vc *VehicleClass) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleclass.Table, vehicleclass.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehicleclass.MetadataTable, vehicleclass.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicles queries the vehicles edge of a VehicleClass.
func (c *VehicleClassClient) QueryVehicles(vc *VehicleClass) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleclass.Table, vehicleclass.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehicleclass.VehiclesTable, vehicleclass.VehiclesColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleClassClient) Hooks() []Hook {
	hooks := c.hooks.VehicleClass
	return append(hooks[:len(hooks):len(hooks)], vehicleclass.Hooks[:]...)
}

// VehicleColorClient is a client for the VehicleColor schema.
type VehicleColorClient struct {
	config
}

// NewVehicleColorClient returns a client for the VehicleColor from the given config.
func NewVehicleColorClient(c config) *VehicleColorClient {
	return &VehicleColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehiclecolor.Hooks(f(g(h())))`.
func (c *VehicleColorClient) Use(hooks ...Hook) {
	c.hooks.VehicleColor = append(c.hooks.VehicleColor, hooks...)
}

// Create returns a create builder for VehicleColor.
func (c *VehicleColorClient) Create() *VehicleColorCreate {
	mutation := newVehicleColorMutation(c.config, OpCreate)
	return &VehicleColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleColor entities.
func (c *VehicleColorClient) CreateBulk(builders ...*VehicleColorCreate) *VehicleColorCreateBulk {
	return &VehicleColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleColor.
func (c *VehicleColorClient) Update() *VehicleColorUpdate {
	mutation := newVehicleColorMutation(c.config, OpUpdate)
	return &VehicleColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleColorClient) UpdateOne(vc *VehicleColor) *VehicleColorUpdateOne {
	mutation := newVehicleColorMutation(c.config, OpUpdateOne, withVehicleColor(vc))
	return &VehicleColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleColorClient) UpdateOneID(id int) *VehicleColorUpdateOne {
	mutation := newVehicleColorMutation(c.config, OpUpdateOne, withVehicleColorID(id))
	return &VehicleColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleColor.
func (c *VehicleColorClient) Delete() *VehicleColorDelete {
	mutation := newVehicleColorMutation(c.config, OpDelete)
	return &VehicleColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleColorClient) DeleteOne(vc *VehicleColor) *VehicleColorDeleteOne {
	return c.DeleteOneID(vc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleColorClient) DeleteOneID(id int) *VehicleColorDeleteOne {
	builder := c.Delete().Where(vehiclecolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleColorDeleteOne{builder}
}

// Query returns a query builder for VehicleColor.
func (c *VehicleColorClient) Query() *VehicleColorQuery {
	return &VehicleColorQuery{
		config: c.config,
	}
}

// Get returns a VehicleColor entity by its id.
func (c *VehicleColorClient) Get(ctx context.Context, id int) (*VehicleColor, error) {
	return c.Query().Where(vehiclecolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleColorClient) GetX(ctx context.Context, id int) *VehicleColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a VehicleColor.
func (c *VehicleColorClient) QueryMetadata(vc *VehicleColor) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclecolor.Table, vehiclecolor.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehiclecolor.MetadataTable, vehiclecolor.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehiclesMajor queries the vehicles_major edge of a VehicleColor.
func (c *VehicleColorClient) QueryVehiclesMajor(vc *VehicleColor) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclecolor.Table, vehiclecolor.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehiclecolor.VehiclesMajorTable, vehiclecolor.VehiclesMajorColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehiclesMinor queries the vehicles_minor edge of a VehicleColor.
func (c *VehicleColorClient) QueryVehiclesMinor(vc *VehicleColor) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclecolor.Table, vehiclecolor.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehiclecolor.VehiclesMinorTable, vehiclecolor.VehiclesMinorColumn),
		)
		fromV = sqlgraph.Neighbors(vc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleColorClient) Hooks() []Hook {
	hooks := c.hooks.VehicleColor
	return append(hooks[:len(hooks):len(hooks)], vehiclecolor.Hooks[:]...)
}

// VehicleMakeClient is a client for the VehicleMake schema.
type VehicleMakeClient struct {
	config
}

// NewVehicleMakeClient returns a client for the VehicleMake from the given config.
func NewVehicleMakeClient(c config) *VehicleMakeClient {
	return &VehicleMakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehiclemake.Hooks(f(g(h())))`.
func (c *VehicleMakeClient) Use(hooks ...Hook) {
	c.hooks.VehicleMake = append(c.hooks.VehicleMake, hooks...)
}

// Create returns a create builder for VehicleMake.
func (c *VehicleMakeClient) Create() *VehicleMakeCreate {
	mutation := newVehicleMakeMutation(c.config, OpCreate)
	return &VehicleMakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleMake entities.
func (c *VehicleMakeClient) CreateBulk(builders ...*VehicleMakeCreate) *VehicleMakeCreateBulk {
	return &VehicleMakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleMake.
func (c *VehicleMakeClient) Update() *VehicleMakeUpdate {
	mutation := newVehicleMakeMutation(c.config, OpUpdate)
	return &VehicleMakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleMakeClient) UpdateOne(vm *VehicleMake) *VehicleMakeUpdateOne {
	mutation := newVehicleMakeMutation(c.config, OpUpdateOne, withVehicleMake(vm))
	return &VehicleMakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleMakeClient) UpdateOneID(id int) *VehicleMakeUpdateOne {
	mutation := newVehicleMakeMutation(c.config, OpUpdateOne, withVehicleMakeID(id))
	return &VehicleMakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleMake.
func (c *VehicleMakeClient) Delete() *VehicleMakeDelete {
	mutation := newVehicleMakeMutation(c.config, OpDelete)
	return &VehicleMakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleMakeClient) DeleteOne(vm *VehicleMake) *VehicleMakeDeleteOne {
	return c.DeleteOneID(vm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleMakeClient) DeleteOneID(id int) *VehicleMakeDeleteOne {
	builder := c.Delete().Where(vehiclemake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleMakeDeleteOne{builder}
}

// Query returns a query builder for VehicleMake.
func (c *VehicleMakeClient) Query() *VehicleMakeQuery {
	return &VehicleMakeQuery{
		config: c.config,
	}
}

// Get returns a VehicleMake entity by its id.
func (c *VehicleMakeClient) Get(ctx context.Context, id int) (*VehicleMake, error) {
	return c.Query().Where(vehiclemake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleMakeClient) GetX(ctx context.Context, id int) *VehicleMake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVehicles queries the vehicles edge of a VehicleMake.
func (c *VehicleMakeClient) QueryVehicles(vm *VehicleMake) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclemake.Table, vehiclemake.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehiclemake.VehiclesTable, vehiclemake.VehiclesColumn),
		)
		fromV = sqlgraph.Neighbors(vm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleMakeClient) Hooks() []Hook {
	hooks := c.hooks.VehicleMake
	return append(hooks[:len(hooks):len(hooks)], vehiclemake.Hooks[:]...)
}

// VehicleModelClient is a client for the VehicleModel schema.
type VehicleModelClient struct {
	config
}

// NewVehicleModelClient returns a client for the VehicleModel from the given config.
func NewVehicleModelClient(c config) *VehicleModelClient {
	return &VehicleModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehiclemodel.Hooks(f(g(h())))`.
func (c *VehicleModelClient) Use(hooks ...Hook) {
	c.hooks.VehicleModel = append(c.hooks.VehicleModel, hooks...)
}

// Create returns a create builder for VehicleModel.
func (c *VehicleModelClient) Create() *VehicleModelCreate {
	mutation := newVehicleModelMutation(c.config, OpCreate)
	return &VehicleModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleModel entities.
func (c *VehicleModelClient) CreateBulk(builders ...*VehicleModelCreate) *VehicleModelCreateBulk {
	return &VehicleModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleModel.
func (c *VehicleModelClient) Update() *VehicleModelUpdate {
	mutation := newVehicleModelMutation(c.config, OpUpdate)
	return &VehicleModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleModelClient) UpdateOne(vm *VehicleModel) *VehicleModelUpdateOne {
	mutation := newVehicleModelMutation(c.config, OpUpdateOne, withVehicleModel(vm))
	return &VehicleModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleModelClient) UpdateOneID(id int) *VehicleModelUpdateOne {
	mutation := newVehicleModelMutation(c.config, OpUpdateOne, withVehicleModelID(id))
	return &VehicleModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleModel.
func (c *VehicleModelClient) Delete() *VehicleModelDelete {
	mutation := newVehicleModelMutation(c.config, OpDelete)
	return &VehicleModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleModelClient) DeleteOne(vm *VehicleModel) *VehicleModelDeleteOne {
	return c.DeleteOneID(vm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleModelClient) DeleteOneID(id int) *VehicleModelDeleteOne {
	builder := c.Delete().Where(vehiclemodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleModelDeleteOne{builder}
}

// Query returns a query builder for VehicleModel.
func (c *VehicleModelClient) Query() *VehicleModelQuery {
	return &VehicleModelQuery{
		config: c.config,
	}
}

// Get returns a VehicleModel entity by its id.
func (c *VehicleModelClient) Get(ctx context.Context, id int) (*VehicleModel, error) {
	return c.Query().Where(vehiclemodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleModelClient) GetX(ctx context.Context, id int) *VehicleModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a VehicleModel.
func (c *VehicleModelClient) QueryMetadata(vm *VehicleModel) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclemodel.Table, vehiclemodel.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehiclemodel.MetadataTable, vehiclemodel.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(vm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicles queries the vehicles edge of a VehicleModel.
func (c *VehicleModelClient) QueryVehicles(vm *VehicleModel) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehiclemodel.Table, vehiclemodel.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vehiclemodel.VehiclesTable, vehiclemodel.VehiclesColumn),
		)
		fromV = sqlgraph.Neighbors(vm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleModelClient) Hooks() []Hook {
	hooks := c.hooks.VehicleModel
	return append(hooks[:len(hooks):len(hooks)], vehiclemodel.Hooks[:]...)
}

// VehicleRegistrationClient is a client for the VehicleRegistration schema.
type VehicleRegistrationClient struct {
	config
}

// NewVehicleRegistrationClient returns a client for the VehicleRegistration from the given config.
func NewVehicleRegistrationClient(c config) *VehicleRegistrationClient {
	return &VehicleRegistrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vehicleregistration.Hooks(f(g(h())))`.
func (c *VehicleRegistrationClient) Use(hooks ...Hook) {
	c.hooks.VehicleRegistration = append(c.hooks.VehicleRegistration, hooks...)
}

// Create returns a create builder for VehicleRegistration.
func (c *VehicleRegistrationClient) Create() *VehicleRegistrationCreate {
	mutation := newVehicleRegistrationMutation(c.config, OpCreate)
	return &VehicleRegistrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VehicleRegistration entities.
func (c *VehicleRegistrationClient) CreateBulk(builders ...*VehicleRegistrationCreate) *VehicleRegistrationCreateBulk {
	return &VehicleRegistrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VehicleRegistration.
func (c *VehicleRegistrationClient) Update() *VehicleRegistrationUpdate {
	mutation := newVehicleRegistrationMutation(c.config, OpUpdate)
	return &VehicleRegistrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VehicleRegistrationClient) UpdateOne(vr *VehicleRegistration) *VehicleRegistrationUpdateOne {
	mutation := newVehicleRegistrationMutation(c.config, OpUpdateOne, withVehicleRegistration(vr))
	return &VehicleRegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VehicleRegistrationClient) UpdateOneID(id int) *VehicleRegistrationUpdateOne {
	mutation := newVehicleRegistrationMutation(c.config, OpUpdateOne, withVehicleRegistrationID(id))
	return &VehicleRegistrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VehicleRegistration.
func (c *VehicleRegistrationClient) Delete() *VehicleRegistrationDelete {
	mutation := newVehicleRegistrationMutation(c.config, OpDelete)
	return &VehicleRegistrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VehicleRegistrationClient) DeleteOne(vr *VehicleRegistration) *VehicleRegistrationDeleteOne {
	return c.DeleteOneID(vr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VehicleRegistrationClient) DeleteOneID(id int) *VehicleRegistrationDeleteOne {
	builder := c.Delete().Where(vehicleregistration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VehicleRegistrationDeleteOne{builder}
}

// Query returns a query builder for VehicleRegistration.
func (c *VehicleRegistrationClient) Query() *VehicleRegistrationQuery {
	return &VehicleRegistrationQuery{
		config: c.config,
	}
}

// Get returns a VehicleRegistration entity by its id.
func (c *VehicleRegistrationClient) Get(ctx context.Context, id int) (*VehicleRegistration, error) {
	return c.Query().Where(vehicleregistration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VehicleRegistrationClient) GetX(ctx context.Context, id int) *VehicleRegistration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMetadata queries the metadata edge of a VehicleRegistration.
func (c *VehicleRegistrationClient) QueryMetadata(vr *VehicleRegistration) *MetadataQuery {
	query := &MetadataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, id),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehicleregistration.MetadataTable, vehicleregistration.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryState queries the state edge of a VehicleRegistration.
func (c *VehicleRegistrationClient) QueryState(vr *VehicleRegistration) *StateQuery {
	query := &StateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, id),
			sqlgraph.To(state.Table, state.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.StateTable, vehicleregistration.StateColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a VehicleRegistration.
func (c *VehicleRegistrationClient) QueryPerson(vr *VehicleRegistration) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.PersonTable, vehicleregistration.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVehicle queries the vehicle edge of a VehicleRegistration.
func (c *VehicleRegistrationClient) QueryVehicle(vr *VehicleRegistration) *VehicleQuery {
	query := &VehicleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, id),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.VehicleTable, vehicleregistration.VehicleColumn),
		)
		fromV = sqlgraph.Neighbors(vr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VehicleRegistrationClient) Hooks() []Hook {
	hooks := c.hooks.VehicleRegistration
	return append(hooks[:len(hooks):len(hooks)], vehicleregistration.Hooks[:]...)
}
