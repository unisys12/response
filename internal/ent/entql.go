// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/oauthconnection"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/player"
	"github.com/responserms/response/internal/ent/playeridentifier"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/race"
	"github.com/responserms/response/internal/ent/session"
	"github.com/responserms/response/internal/ent/setting"
	"github.com/responserms/response/internal/ent/sex"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/user"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
	"github.com/responserms/response/internal/ent/vehicleregistration"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 23)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deathcertificate.Table,
			Columns: deathcertificate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertificate.FieldID,
			},
		},
		Type: "DeathCertificate",
		Fields: map[string]*sqlgraph.FieldSpec{
			deathcertificate.FieldCreatedAt:             {Type: field.TypeTime, Column: deathcertificate.FieldCreatedAt},
			deathcertificate.FieldCreatedBy:             {Type: field.TypeInt, Column: deathcertificate.FieldCreatedBy},
			deathcertificate.FieldCreatedWith:           {Type: field.TypeString, Column: deathcertificate.FieldCreatedWith},
			deathcertificate.FieldUpdatedAt:             {Type: field.TypeTime, Column: deathcertificate.FieldUpdatedAt},
			deathcertificate.FieldUpdatedBy:             {Type: field.TypeInt, Column: deathcertificate.FieldUpdatedBy},
			deathcertificate.FieldUpdatedWith:           {Type: field.TypeString, Column: deathcertificate.FieldUpdatedWith},
			deathcertificate.FieldCause:                 {Type: field.TypeString, Column: deathcertificate.FieldCause},
			deathcertificate.FieldComments:              {Type: field.TypeString, Column: deathcertificate.FieldComments},
			deathcertificate.FieldCertifiedAt:           {Type: field.TypeTime, Column: deathcertificate.FieldCertifiedAt},
			deathcertificate.FieldCertifierComments:     {Type: field.TypeString, Column: deathcertificate.FieldCertifierComments},
			deathcertificate.FieldRequiresCertification: {Type: field.TypeBool, Column: deathcertificate.FieldRequiresCertification},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deathcertifier.Table,
			Columns: deathcertifier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathcertifier.FieldID,
			},
		},
		Type: "DeathCertifier",
		Fields: map[string]*sqlgraph.FieldSpec{
			deathcertifier.FieldCreatedAt:   {Type: field.TypeTime, Column: deathcertifier.FieldCreatedAt},
			deathcertifier.FieldCreatedBy:   {Type: field.TypeInt, Column: deathcertifier.FieldCreatedBy},
			deathcertifier.FieldCreatedWith: {Type: field.TypeString, Column: deathcertifier.FieldCreatedWith},
			deathcertifier.FieldUpdatedAt:   {Type: field.TypeTime, Column: deathcertifier.FieldUpdatedAt},
			deathcertifier.FieldUpdatedBy:   {Type: field.TypeInt, Column: deathcertifier.FieldUpdatedBy},
			deathcertifier.FieldUpdatedWith: {Type: field.TypeString, Column: deathcertifier.FieldUpdatedWith},
			deathcertifier.FieldShort:       {Type: field.TypeString, Column: deathcertifier.FieldShort},
			deathcertifier.FieldTitle:       {Type: field.TypeString, Column: deathcertifier.FieldTitle},
			deathcertifier.FieldDescription: {Type: field.TypeString, Column: deathcertifier.FieldDescription},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deathmanner.Table,
			Columns: deathmanner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathmanner.FieldID,
			},
		},
		Type: "DeathManner",
		Fields: map[string]*sqlgraph.FieldSpec{
			deathmanner.FieldCreatedAt:   {Type: field.TypeTime, Column: deathmanner.FieldCreatedAt},
			deathmanner.FieldCreatedBy:   {Type: field.TypeInt, Column: deathmanner.FieldCreatedBy},
			deathmanner.FieldCreatedWith: {Type: field.TypeString, Column: deathmanner.FieldCreatedWith},
			deathmanner.FieldUpdatedAt:   {Type: field.TypeTime, Column: deathmanner.FieldUpdatedAt},
			deathmanner.FieldUpdatedBy:   {Type: field.TypeInt, Column: deathmanner.FieldUpdatedBy},
			deathmanner.FieldUpdatedWith: {Type: field.TypeString, Column: deathmanner.FieldUpdatedWith},
			deathmanner.FieldShort:       {Type: field.TypeString, Column: deathmanner.FieldShort},
			deathmanner.FieldTitle:       {Type: field.TypeString, Column: deathmanner.FieldTitle},
			deathmanner.FieldDescription: {Type: field.TypeString, Column: deathmanner.FieldDescription},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deathplace.Table,
			Columns: deathplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathplace.FieldID,
			},
		},
		Type: "DeathPlace",
		Fields: map[string]*sqlgraph.FieldSpec{
			deathplace.FieldCreatedAt:   {Type: field.TypeTime, Column: deathplace.FieldCreatedAt},
			deathplace.FieldCreatedBy:   {Type: field.TypeInt, Column: deathplace.FieldCreatedBy},
			deathplace.FieldCreatedWith: {Type: field.TypeString, Column: deathplace.FieldCreatedWith},
			deathplace.FieldUpdatedAt:   {Type: field.TypeTime, Column: deathplace.FieldUpdatedAt},
			deathplace.FieldUpdatedBy:   {Type: field.TypeInt, Column: deathplace.FieldUpdatedBy},
			deathplace.FieldUpdatedWith: {Type: field.TypeString, Column: deathplace.FieldUpdatedWith},
			deathplace.FieldShort:       {Type: field.TypeString, Column: deathplace.FieldShort},
			deathplace.FieldTitle:       {Type: field.TypeString, Column: deathplace.FieldTitle},
			deathplace.FieldDescription: {Type: field.TypeString, Column: deathplace.FieldDescription},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ethnicity.Table,
			Columns: ethnicity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ethnicity.FieldID,
			},
		},
		Type: "Ethnicity",
		Fields: map[string]*sqlgraph.FieldSpec{
			ethnicity.FieldCreatedAt:   {Type: field.TypeTime, Column: ethnicity.FieldCreatedAt},
			ethnicity.FieldCreatedBy:   {Type: field.TypeInt, Column: ethnicity.FieldCreatedBy},
			ethnicity.FieldCreatedWith: {Type: field.TypeString, Column: ethnicity.FieldCreatedWith},
			ethnicity.FieldUpdatedAt:   {Type: field.TypeTime, Column: ethnicity.FieldUpdatedAt},
			ethnicity.FieldUpdatedBy:   {Type: field.TypeInt, Column: ethnicity.FieldUpdatedBy},
			ethnicity.FieldUpdatedWith: {Type: field.TypeString, Column: ethnicity.FieldUpdatedWith},
			ethnicity.FieldShort:       {Type: field.TypeString, Column: ethnicity.FieldShort},
			ethnicity.FieldTitle:       {Type: field.TypeString, Column: ethnicity.FieldTitle},
			ethnicity.FieldDescription: {Type: field.TypeString, Column: ethnicity.FieldDescription},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   gameserver.Table,
			Columns: gameserver.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gameserver.FieldID,
			},
		},
		Type: "GameServer",
		Fields: map[string]*sqlgraph.FieldSpec{
			gameserver.FieldCreatedAt:     {Type: field.TypeTime, Column: gameserver.FieldCreatedAt},
			gameserver.FieldCreatedBy:     {Type: field.TypeInt, Column: gameserver.FieldCreatedBy},
			gameserver.FieldCreatedWith:   {Type: field.TypeString, Column: gameserver.FieldCreatedWith},
			gameserver.FieldUpdatedAt:     {Type: field.TypeTime, Column: gameserver.FieldUpdatedAt},
			gameserver.FieldUpdatedBy:     {Type: field.TypeInt, Column: gameserver.FieldUpdatedBy},
			gameserver.FieldUpdatedWith:   {Type: field.TypeString, Column: gameserver.FieldUpdatedWith},
			gameserver.FieldName:          {Type: field.TypeString, Column: gameserver.FieldName},
			gameserver.FieldDescription:   {Type: field.TypeString, Column: gameserver.FieldDescription},
			gameserver.FieldSecret:        {Type: field.TypeString, Column: gameserver.FieldSecret},
			gameserver.FieldIPAddress:     {Type: field.TypeString, Column: gameserver.FieldIPAddress},
			gameserver.FieldMonitoring:    {Type: field.TypeBool, Column: gameserver.FieldMonitoring},
			gameserver.FieldDisabledAt:    {Type: field.TypeTime, Column: gameserver.FieldDisabledAt},
			gameserver.FieldLastContactAt: {Type: field.TypeTime, Column: gameserver.FieldLastContactAt},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   metadata.Table,
			Columns: metadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metadata.FieldID,
			},
		},
		Type: "Metadata",
		Fields: map[string]*sqlgraph.FieldSpec{
			metadata.FieldCreatedAt:   {Type: field.TypeTime, Column: metadata.FieldCreatedAt},
			metadata.FieldCreatedBy:   {Type: field.TypeInt, Column: metadata.FieldCreatedBy},
			metadata.FieldCreatedWith: {Type: field.TypeString, Column: metadata.FieldCreatedWith},
			metadata.FieldUpdatedAt:   {Type: field.TypeTime, Column: metadata.FieldUpdatedAt},
			metadata.FieldUpdatedBy:   {Type: field.TypeInt, Column: metadata.FieldUpdatedBy},
			metadata.FieldUpdatedWith: {Type: field.TypeString, Column: metadata.FieldUpdatedWith},
			metadata.FieldData:        {Type: field.TypeJSON, Column: metadata.FieldData},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthconnection.Table,
			Columns: oauthconnection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthconnection.FieldID,
			},
		},
		Type: "OAuthConnection",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthconnection.FieldCreatedAt:      {Type: field.TypeTime, Column: oauthconnection.FieldCreatedAt},
			oauthconnection.FieldCreatedBy:      {Type: field.TypeInt, Column: oauthconnection.FieldCreatedBy},
			oauthconnection.FieldCreatedWith:    {Type: field.TypeString, Column: oauthconnection.FieldCreatedWith},
			oauthconnection.FieldUpdatedAt:      {Type: field.TypeTime, Column: oauthconnection.FieldUpdatedAt},
			oauthconnection.FieldUpdatedBy:      {Type: field.TypeInt, Column: oauthconnection.FieldUpdatedBy},
			oauthconnection.FieldUpdatedWith:    {Type: field.TypeString, Column: oauthconnection.FieldUpdatedWith},
			oauthconnection.FieldProvider:       {Type: field.TypeString, Column: oauthconnection.FieldProvider},
			oauthconnection.FieldProviderUserID: {Type: field.TypeString, Column: oauthconnection.FieldProviderUserID},
			oauthconnection.FieldName:           {Type: field.TypeString, Column: oauthconnection.FieldName},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:   {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldCreatedBy:   {Type: field.TypeInt, Column: person.FieldCreatedBy},
			person.FieldCreatedWith: {Type: field.TypeString, Column: person.FieldCreatedWith},
			person.FieldUpdatedAt:   {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldUpdatedBy:   {Type: field.TypeInt, Column: person.FieldUpdatedBy},
			person.FieldUpdatedWith: {Type: field.TypeString, Column: person.FieldUpdatedWith},
			person.FieldFirstName:   {Type: field.TypeString, Column: person.FieldFirstName},
			person.FieldMiddleName:  {Type: field.TypeString, Column: person.FieldMiddleName},
			person.FieldLastName:    {Type: field.TypeString, Column: person.FieldLastName},
			person.FieldSuffix:      {Type: field.TypeString, Column: person.FieldSuffix},
			person.FieldDateOfBirth: {Type: field.TypeTime, Column: person.FieldDateOfBirth},
			person.FieldBirthplace:  {Type: field.TypeString, Column: person.FieldBirthplace},
			person.FieldDeceasedAt:  {Type: field.TypeTime, Column: person.FieldDeceasedAt},
			person.FieldArchivedAt:  {Type: field.TypeTime, Column: person.FieldArchivedAt},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   player.Table,
			Columns: player.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: player.FieldID,
			},
		},
		Type: "Player",
		Fields: map[string]*sqlgraph.FieldSpec{
			player.FieldCreatedAt:   {Type: field.TypeTime, Column: player.FieldCreatedAt},
			player.FieldCreatedBy:   {Type: field.TypeInt, Column: player.FieldCreatedBy},
			player.FieldCreatedWith: {Type: field.TypeString, Column: player.FieldCreatedWith},
			player.FieldUpdatedAt:   {Type: field.TypeTime, Column: player.FieldUpdatedAt},
			player.FieldUpdatedBy:   {Type: field.TypeInt, Column: player.FieldUpdatedBy},
			player.FieldUpdatedWith: {Type: field.TypeString, Column: player.FieldUpdatedWith},
			player.FieldName:        {Type: field.TypeString, Column: player.FieldName},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   playeridentifier.Table,
			Columns: playeridentifier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: playeridentifier.FieldID,
			},
		},
		Type: "PlayerIdentifier",
		Fields: map[string]*sqlgraph.FieldSpec{
			playeridentifier.FieldCreatedAt:   {Type: field.TypeTime, Column: playeridentifier.FieldCreatedAt},
			playeridentifier.FieldCreatedBy:   {Type: field.TypeInt, Column: playeridentifier.FieldCreatedBy},
			playeridentifier.FieldCreatedWith: {Type: field.TypeString, Column: playeridentifier.FieldCreatedWith},
			playeridentifier.FieldUpdatedAt:   {Type: field.TypeTime, Column: playeridentifier.FieldUpdatedAt},
			playeridentifier.FieldUpdatedBy:   {Type: field.TypeInt, Column: playeridentifier.FieldUpdatedBy},
			playeridentifier.FieldUpdatedWith: {Type: field.TypeString, Column: playeridentifier.FieldUpdatedWith},
			playeridentifier.FieldValue:       {Type: field.TypeString, Column: playeridentifier.FieldValue},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   race.Table,
			Columns: race.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: race.FieldID,
			},
		},
		Type: "Race",
		Fields: map[string]*sqlgraph.FieldSpec{
			race.FieldCreatedAt:   {Type: field.TypeTime, Column: race.FieldCreatedAt},
			race.FieldCreatedBy:   {Type: field.TypeInt, Column: race.FieldCreatedBy},
			race.FieldCreatedWith: {Type: field.TypeString, Column: race.FieldCreatedWith},
			race.FieldUpdatedAt:   {Type: field.TypeTime, Column: race.FieldUpdatedAt},
			race.FieldUpdatedBy:   {Type: field.TypeInt, Column: race.FieldUpdatedBy},
			race.FieldUpdatedWith: {Type: field.TypeString, Column: race.FieldUpdatedWith},
			race.FieldShort:       {Type: field.TypeString, Column: race.FieldShort},
			race.FieldTitle:       {Type: field.TypeString, Column: race.FieldTitle},
			race.FieldDescription: {Type: field.TypeString, Column: race.FieldDescription},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldCreatedAt:   {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldCreatedBy:   {Type: field.TypeInt, Column: session.FieldCreatedBy},
			session.FieldCreatedWith: {Type: field.TypeString, Column: session.FieldCreatedWith},
			session.FieldUpdatedAt:   {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldUpdatedBy:   {Type: field.TypeInt, Column: session.FieldUpdatedBy},
			session.FieldUpdatedWith: {Type: field.TypeString, Column: session.FieldUpdatedWith},
			session.FieldStartedAt:   {Type: field.TypeTime, Column: session.FieldStartedAt},
			session.FieldStartedFrom: {Type: field.TypeString, Column: session.FieldStartedFrom},
			session.FieldIPAddress:   {Type: field.TypeString, Column: session.FieldIPAddress},
			session.FieldEndedAt:     {Type: field.TypeTime, Column: session.FieldEndedAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt:   {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldCreatedBy:   {Type: field.TypeInt, Column: setting.FieldCreatedBy},
			setting.FieldCreatedWith: {Type: field.TypeString, Column: setting.FieldCreatedWith},
			setting.FieldUpdatedAt:   {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldUpdatedBy:   {Type: field.TypeInt, Column: setting.FieldUpdatedBy},
			setting.FieldUpdatedWith: {Type: field.TypeString, Column: setting.FieldUpdatedWith},
			setting.FieldKey:         {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldData:        {Type: field.TypeJSON, Column: setting.FieldData},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   sex.Table,
			Columns: sex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sex.FieldID,
			},
		},
		Type: "Sex",
		Fields: map[string]*sqlgraph.FieldSpec{
			sex.FieldCreatedAt:   {Type: field.TypeTime, Column: sex.FieldCreatedAt},
			sex.FieldCreatedBy:   {Type: field.TypeInt, Column: sex.FieldCreatedBy},
			sex.FieldCreatedWith: {Type: field.TypeString, Column: sex.FieldCreatedWith},
			sex.FieldUpdatedAt:   {Type: field.TypeTime, Column: sex.FieldUpdatedAt},
			sex.FieldUpdatedBy:   {Type: field.TypeInt, Column: sex.FieldUpdatedBy},
			sex.FieldUpdatedWith: {Type: field.TypeString, Column: sex.FieldUpdatedWith},
			sex.FieldShort:       {Type: field.TypeString, Column: sex.FieldShort},
			sex.FieldTitle:       {Type: field.TypeString, Column: sex.FieldTitle},
			sex.FieldDescription: {Type: field.TypeString, Column: sex.FieldDescription},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   state.Table,
			Columns: state.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: state.FieldID,
			},
		},
		Type: "State",
		Fields: map[string]*sqlgraph.FieldSpec{
			state.FieldCreatedAt:   {Type: field.TypeTime, Column: state.FieldCreatedAt},
			state.FieldCreatedBy:   {Type: field.TypeInt, Column: state.FieldCreatedBy},
			state.FieldCreatedWith: {Type: field.TypeString, Column: state.FieldCreatedWith},
			state.FieldUpdatedAt:   {Type: field.TypeTime, Column: state.FieldUpdatedAt},
			state.FieldUpdatedBy:   {Type: field.TypeInt, Column: state.FieldUpdatedBy},
			state.FieldUpdatedWith: {Type: field.TypeString, Column: state.FieldUpdatedWith},
			state.FieldShort:       {Type: field.TypeString, Column: state.FieldShort},
			state.FieldTitle:       {Type: field.TypeString, Column: state.FieldTitle},
			state.FieldDescription: {Type: field.TypeString, Column: state.FieldDescription},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:    {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldCreatedBy:    {Type: field.TypeInt, Column: user.FieldCreatedBy},
			user.FieldCreatedWith:  {Type: field.TypeString, Column: user.FieldCreatedWith},
			user.FieldUpdatedAt:    {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldUpdatedBy:    {Type: field.TypeInt, Column: user.FieldUpdatedBy},
			user.FieldUpdatedWith:  {Type: field.TypeString, Column: user.FieldUpdatedWith},
			user.FieldName:         {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:        {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPassword:     {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldAvatarURL:    {Type: field.TypeString, Column: user.FieldAvatarURL},
			user.FieldPermissions:  {Type: field.TypeJSON, Column: user.FieldPermissions},
			user.FieldFirstSetupAt: {Type: field.TypeTime, Column: user.FieldFirstSetupAt},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		},
		Type: "Vehicle",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehicle.FieldCreatedAt:     {Type: field.TypeTime, Column: vehicle.FieldCreatedAt},
			vehicle.FieldCreatedBy:     {Type: field.TypeInt, Column: vehicle.FieldCreatedBy},
			vehicle.FieldCreatedWith:   {Type: field.TypeString, Column: vehicle.FieldCreatedWith},
			vehicle.FieldUpdatedAt:     {Type: field.TypeTime, Column: vehicle.FieldUpdatedAt},
			vehicle.FieldUpdatedBy:     {Type: field.TypeInt, Column: vehicle.FieldUpdatedBy},
			vehicle.FieldUpdatedWith:   {Type: field.TypeString, Column: vehicle.FieldUpdatedWith},
			vehicle.FieldVin:           {Type: field.TypeString, Column: vehicle.FieldVin},
			vehicle.FieldStyle:         {Type: field.TypeString, Column: vehicle.FieldStyle},
			vehicle.FieldExtraFeatures: {Type: field.TypeTime, Column: vehicle.FieldExtraFeatures},
			vehicle.FieldPrivateNotes:  {Type: field.TypeString, Column: vehicle.FieldPrivateNotes},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehicleclass.Table,
			Columns: vehicleclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleclass.FieldID,
			},
		},
		Type: "VehicleClass",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehicleclass.FieldCreatedAt:   {Type: field.TypeTime, Column: vehicleclass.FieldCreatedAt},
			vehicleclass.FieldCreatedBy:   {Type: field.TypeInt, Column: vehicleclass.FieldCreatedBy},
			vehicleclass.FieldCreatedWith: {Type: field.TypeString, Column: vehicleclass.FieldCreatedWith},
			vehicleclass.FieldUpdatedAt:   {Type: field.TypeTime, Column: vehicleclass.FieldUpdatedAt},
			vehicleclass.FieldUpdatedBy:   {Type: field.TypeInt, Column: vehicleclass.FieldUpdatedBy},
			vehicleclass.FieldUpdatedWith: {Type: field.TypeString, Column: vehicleclass.FieldUpdatedWith},
			vehicleclass.FieldShort:       {Type: field.TypeString, Column: vehicleclass.FieldShort},
			vehicleclass.FieldTitle:       {Type: field.TypeString, Column: vehicleclass.FieldTitle},
			vehicleclass.FieldDescription: {Type: field.TypeString, Column: vehicleclass.FieldDescription},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehiclecolor.Table,
			Columns: vehiclecolor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclecolor.FieldID,
			},
		},
		Type: "VehicleColor",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehiclecolor.FieldCreatedAt:   {Type: field.TypeTime, Column: vehiclecolor.FieldCreatedAt},
			vehiclecolor.FieldCreatedBy:   {Type: field.TypeInt, Column: vehiclecolor.FieldCreatedBy},
			vehiclecolor.FieldCreatedWith: {Type: field.TypeString, Column: vehiclecolor.FieldCreatedWith},
			vehiclecolor.FieldUpdatedAt:   {Type: field.TypeTime, Column: vehiclecolor.FieldUpdatedAt},
			vehiclecolor.FieldUpdatedBy:   {Type: field.TypeInt, Column: vehiclecolor.FieldUpdatedBy},
			vehiclecolor.FieldUpdatedWith: {Type: field.TypeString, Column: vehiclecolor.FieldUpdatedWith},
			vehiclecolor.FieldShort:       {Type: field.TypeString, Column: vehiclecolor.FieldShort},
			vehiclecolor.FieldTitle:       {Type: field.TypeString, Column: vehiclecolor.FieldTitle},
			vehiclecolor.FieldDescription: {Type: field.TypeString, Column: vehiclecolor.FieldDescription},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehiclemake.Table,
			Columns: vehiclemake.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclemake.FieldID,
			},
		},
		Type: "VehicleMake",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehiclemake.FieldCreatedAt:   {Type: field.TypeTime, Column: vehiclemake.FieldCreatedAt},
			vehiclemake.FieldCreatedBy:   {Type: field.TypeInt, Column: vehiclemake.FieldCreatedBy},
			vehiclemake.FieldCreatedWith: {Type: field.TypeString, Column: vehiclemake.FieldCreatedWith},
			vehiclemake.FieldUpdatedAt:   {Type: field.TypeTime, Column: vehiclemake.FieldUpdatedAt},
			vehiclemake.FieldUpdatedBy:   {Type: field.TypeInt, Column: vehiclemake.FieldUpdatedBy},
			vehiclemake.FieldUpdatedWith: {Type: field.TypeString, Column: vehiclemake.FieldUpdatedWith},
			vehiclemake.FieldShort:       {Type: field.TypeString, Column: vehiclemake.FieldShort},
			vehiclemake.FieldTitle:       {Type: field.TypeString, Column: vehiclemake.FieldTitle},
			vehiclemake.FieldDescription: {Type: field.TypeString, Column: vehiclemake.FieldDescription},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehiclemodel.Table,
			Columns: vehiclemodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclemodel.FieldID,
			},
		},
		Type: "VehicleModel",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehiclemodel.FieldCreatedAt:   {Type: field.TypeTime, Column: vehiclemodel.FieldCreatedAt},
			vehiclemodel.FieldCreatedBy:   {Type: field.TypeInt, Column: vehiclemodel.FieldCreatedBy},
			vehiclemodel.FieldCreatedWith: {Type: field.TypeString, Column: vehiclemodel.FieldCreatedWith},
			vehiclemodel.FieldUpdatedAt:   {Type: field.TypeTime, Column: vehiclemodel.FieldUpdatedAt},
			vehiclemodel.FieldUpdatedBy:   {Type: field.TypeInt, Column: vehiclemodel.FieldUpdatedBy},
			vehiclemodel.FieldUpdatedWith: {Type: field.TypeString, Column: vehiclemodel.FieldUpdatedWith},
			vehiclemodel.FieldShort:       {Type: field.TypeString, Column: vehiclemodel.FieldShort},
			vehiclemodel.FieldTitle:       {Type: field.TypeString, Column: vehiclemodel.FieldTitle},
			vehiclemodel.FieldDescription: {Type: field.TypeString, Column: vehiclemodel.FieldDescription},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   vehicleregistration.Table,
			Columns: vehicleregistration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleregistration.FieldID,
			},
		},
		Type: "VehicleRegistration",
		Fields: map[string]*sqlgraph.FieldSpec{
			vehicleregistration.FieldCreatedAt:   {Type: field.TypeTime, Column: vehicleregistration.FieldCreatedAt},
			vehicleregistration.FieldCreatedBy:   {Type: field.TypeInt, Column: vehicleregistration.FieldCreatedBy},
			vehicleregistration.FieldCreatedWith: {Type: field.TypeString, Column: vehicleregistration.FieldCreatedWith},
			vehicleregistration.FieldUpdatedAt:   {Type: field.TypeTime, Column: vehicleregistration.FieldUpdatedAt},
			vehicleregistration.FieldUpdatedBy:   {Type: field.TypeInt, Column: vehicleregistration.FieldUpdatedBy},
			vehicleregistration.FieldUpdatedWith: {Type: field.TypeString, Column: vehicleregistration.FieldUpdatedWith},
			vehicleregistration.FieldPlate:       {Type: field.TypeString, Column: vehicleregistration.FieldPlate},
			vehicleregistration.FieldExpiredAt:   {Type: field.TypeTime, Column: vehicleregistration.FieldExpiredAt},
		},
	}
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertificate.MetadataTable,
			Columns: []string{deathcertificate.MetadataColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"Metadata",
	)
	graph.MustAddE(
		"decedent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deathcertificate.DecedentTable,
			Columns: []string{deathcertificate.DecedentColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"Person",
	)
	graph.MustAddE(
		"manner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.MannerTable,
			Columns: []string{deathcertificate.MannerColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"DeathManner",
	)
	graph.MustAddE(
		"place",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.PlaceTable,
			Columns: []string{deathcertificate.PlaceColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"DeathPlace",
	)
	graph.MustAddE(
		"certifier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifierTable,
			Columns: []string{deathcertificate.CertifierColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"DeathCertifier",
	)
	graph.MustAddE(
		"certified_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deathcertificate.CertifiedByTable,
			Columns: []string{deathcertificate.CertifiedByColumn},
			Bidi:    false,
		},
		"DeathCertificate",
		"Person",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathcertifier.MetadataTable,
			Columns: []string{deathcertifier.MetadataColumn},
			Bidi:    false,
		},
		"DeathCertifier",
		"Metadata",
	)
	graph.MustAddE(
		"death_certificates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathcertifier.DeathCertificatesTable,
			Columns: []string{deathcertifier.DeathCertificatesColumn},
			Bidi:    false,
		},
		"DeathCertifier",
		"DeathCertificate",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathmanner.MetadataTable,
			Columns: []string{deathmanner.MetadataColumn},
			Bidi:    false,
		},
		"DeathManner",
		"Metadata",
	)
	graph.MustAddE(
		"death_certificates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathmanner.DeathCertificatesTable,
			Columns: []string{deathmanner.DeathCertificatesColumn},
			Bidi:    false,
		},
		"DeathManner",
		"DeathCertificate",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathplace.MetadataTable,
			Columns: []string{deathplace.MetadataColumn},
			Bidi:    false,
		},
		"DeathPlace",
		"Metadata",
	)
	graph.MustAddE(
		"death_certificates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
		},
		"DeathPlace",
		"DeathCertificate",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ethnicity.MetadataTable,
			Columns: []string{ethnicity.MetadataColumn},
			Bidi:    false,
		},
		"Ethnicity",
		"Metadata",
	)
	graph.MustAddE(
		"people",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ethnicity.PeopleTable,
			Columns: []string{ethnicity.PeopleColumn},
			Bidi:    false,
		},
		"Ethnicity",
		"Person",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameserver.MetadataTable,
			Columns: []string{gameserver.MetadataColumn},
			Bidi:    false,
		},
		"GameServer",
		"Metadata",
	)
	graph.MustAddE(
		"players",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameserver.PlayersTable,
			Columns: gameserver.PlayersPrimaryKey,
			Bidi:    false,
		},
		"GameServer",
		"Player",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthconnection.UserTable,
			Columns: []string{oauthconnection.UserColumn},
			Bidi:    false,
		},
		"OAuthConnection",
		"User",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
		},
		"Person",
		"Metadata",
	)
	graph.MustAddE(
		"vehicle_registrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
		},
		"Person",
		"VehicleRegistration",
	)
	graph.MustAddE(
		"race",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
		},
		"Person",
		"Race",
	)
	graph.MustAddE(
		"ethnicity",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
		},
		"Person",
		"Ethnicity",
	)
	graph.MustAddE(
		"sex",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
		},
		"Person",
		"Sex",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
		},
		"Person",
		"User",
	)
	graph.MustAddE(
		"death_certificate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
		},
		"Person",
		"DeathCertificate",
	)
	graph.MustAddE(
		"certified_deaths",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
		},
		"Person",
		"DeathCertificate",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   player.MetadataTable,
			Columns: []string{player.MetadataColumn},
			Bidi:    false,
		},
		"Player",
		"Metadata",
	)
	graph.MustAddE(
		"servers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.ServersTable,
			Columns: player.ServersPrimaryKey,
			Bidi:    false,
		},
		"Player",
		"GameServer",
	)
	graph.MustAddE(
		"identifiers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.IdentifiersTable,
			Columns: []string{player.IdentifiersColumn},
			Bidi:    false,
		},
		"Player",
		"PlayerIdentifier",
	)
	graph.MustAddE(
		"player",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playeridentifier.PlayerTable,
			Columns: []string{playeridentifier.PlayerColumn},
			Bidi:    false,
		},
		"PlayerIdentifier",
		"Player",
	)
	graph.MustAddE(
		"people",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   race.PeopleTable,
			Columns: []string{race.PeopleColumn},
			Bidi:    false,
		},
		"Race",
		"Person",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sex.MetadataTable,
			Columns: []string{sex.MetadataColumn},
			Bidi:    false,
		},
		"Sex",
		"Metadata",
	)
	graph.MustAddE(
		"people",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sex.PeopleTable,
			Columns: []string{sex.PeopleColumn},
			Bidi:    false,
		},
		"Sex",
		"Person",
	)
	graph.MustAddE(
		"vehicle_registrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
		},
		"State",
		"VehicleRegistration",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.MetadataTable,
			Columns: []string{user.MetadataColumn},
			Bidi:    false,
		},
		"User",
		"Metadata",
	)
	graph.MustAddE(
		"oauth_connections",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthConnectionsTable,
			Columns: []string{user.OauthConnectionsColumn},
			Bidi:    false,
		},
		"User",
		"OAuthConnection",
	)
	graph.MustAddE(
		"people",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PeopleTable,
			Columns: []string{user.PeopleColumn},
			Bidi:    false,
		},
		"User",
		"Person",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
		},
		"Vehicle",
		"Metadata",
	)
	graph.MustAddE(
		"registrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleRegistration",
	)
	graph.MustAddE(
		"make",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleMake",
	)
	graph.MustAddE(
		"model",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleModel",
	)
	graph.MustAddE(
		"major_color",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleColor",
	)
	graph.MustAddE(
		"minor_color",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleColor",
	)
	graph.MustAddE(
		"class",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
		},
		"Vehicle",
		"VehicleClass",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleclass.MetadataTable,
			Columns: []string{vehicleclass.MetadataColumn},
			Bidi:    false,
		},
		"VehicleClass",
		"Metadata",
	)
	graph.MustAddE(
		"vehicles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicleclass.VehiclesTable,
			Columns: []string{vehicleclass.VehiclesColumn},
			Bidi:    false,
		},
		"VehicleClass",
		"Vehicle",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
		},
		"VehicleColor",
		"Metadata",
	)
	graph.MustAddE(
		"vehicles_major",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
		},
		"VehicleColor",
		"Vehicle",
	)
	graph.MustAddE(
		"vehicles_minor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
		},
		"VehicleColor",
		"Vehicle",
	)
	graph.MustAddE(
		"vehicles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemake.VehiclesTable,
			Columns: []string{vehiclemake.VehiclesColumn},
			Bidi:    false,
		},
		"VehicleMake",
		"Vehicle",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclemodel.MetadataTable,
			Columns: []string{vehiclemodel.MetadataColumn},
			Bidi:    false,
		},
		"VehicleModel",
		"Metadata",
	)
	graph.MustAddE(
		"vehicles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclemodel.VehiclesTable,
			Columns: []string{vehiclemodel.VehiclesColumn},
			Bidi:    false,
		},
		"VehicleModel",
		"Vehicle",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicleregistration.MetadataTable,
			Columns: []string{vehicleregistration.MetadataColumn},
			Bidi:    false,
		},
		"VehicleRegistration",
		"Metadata",
	)
	graph.MustAddE(
		"state",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.StateTable,
			Columns: []string{vehicleregistration.StateColumn},
			Bidi:    false,
		},
		"VehicleRegistration",
		"State",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.PersonTable,
			Columns: []string{vehicleregistration.PersonColumn},
			Bidi:    false,
		},
		"VehicleRegistration",
		"Person",
	)
	graph.MustAddE(
		"vehicle",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicleregistration.VehicleTable,
			Columns: []string{vehicleregistration.VehicleColumn},
			Bidi:    false,
		},
		"VehicleRegistration",
		"Vehicle",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DeathCertificateQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeathCertificateQuery builder.
func (dcq *DeathCertificateQuery) Filter() *DeathCertificateFilter {
	return &DeathCertificateFilter{dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeathCertificateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeathCertificateMutation builder.
func (m *DeathCertificateMutation) Filter() *DeathCertificateFilter {
	return &DeathCertificateFilter{m}
}

// DeathCertificateFilter provides a generic filtering capability at runtime for DeathCertificateQuery.
type DeathCertificateFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DeathCertificateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeathCertificateFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deathcertificate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeathCertificateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deathcertificate.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeathCertificateFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(deathcertificate.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *DeathCertificateFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(deathcertificate.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeathCertificateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deathcertificate.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeathCertificateFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(deathcertificate.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *DeathCertificateFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(deathcertificate.FieldUpdatedWith))
}

// WhereCause applies the entql string predicate on the cause field.
func (f *DeathCertificateFilter) WhereCause(p entql.StringP) {
	f.Where(p.Field(deathcertificate.FieldCause))
}

// WhereComments applies the entql string predicate on the comments field.
func (f *DeathCertificateFilter) WhereComments(p entql.StringP) {
	f.Where(p.Field(deathcertificate.FieldComments))
}

// WhereCertifiedAt applies the entql time.Time predicate on the certified_at field.
func (f *DeathCertificateFilter) WhereCertifiedAt(p entql.TimeP) {
	f.Where(p.Field(deathcertificate.FieldCertifiedAt))
}

// WhereCertifierComments applies the entql string predicate on the certifier_comments field.
func (f *DeathCertificateFilter) WhereCertifierComments(p entql.StringP) {
	f.Where(p.Field(deathcertificate.FieldCertifierComments))
}

// WhereRequiresCertification applies the entql bool predicate on the requires_certification field.
func (f *DeathCertificateFilter) WhereRequiresCertification(p entql.BoolP) {
	f.Where(p.Field(deathcertificate.FieldRequiresCertification))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *DeathCertificateFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDecedent applies a predicate to check if query has an edge decedent.
func (f *DeathCertificateFilter) WhereHasDecedent() {
	f.Where(entql.HasEdge("decedent"))
}

// WhereHasDecedentWith applies a predicate to check if query has an edge decedent with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasDecedentWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("decedent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManner applies a predicate to check if query has an edge manner.
func (f *DeathCertificateFilter) WhereHasManner() {
	f.Where(entql.HasEdge("manner"))
}

// WhereHasMannerWith applies a predicate to check if query has an edge manner with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasMannerWith(preds ...predicate.DeathManner) {
	f.Where(entql.HasEdgeWith("manner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlace applies a predicate to check if query has an edge place.
func (f *DeathCertificateFilter) WhereHasPlace() {
	f.Where(entql.HasEdge("place"))
}

// WhereHasPlaceWith applies a predicate to check if query has an edge place with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasPlaceWith(preds ...predicate.DeathPlace) {
	f.Where(entql.HasEdgeWith("place", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCertifier applies a predicate to check if query has an edge certifier.
func (f *DeathCertificateFilter) WhereHasCertifier() {
	f.Where(entql.HasEdge("certifier"))
}

// WhereHasCertifierWith applies a predicate to check if query has an edge certifier with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasCertifierWith(preds ...predicate.DeathCertifier) {
	f.Where(entql.HasEdgeWith("certifier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCertifiedBy applies a predicate to check if query has an edge certified_by.
func (f *DeathCertificateFilter) WhereHasCertifiedBy() {
	f.Where(entql.HasEdge("certified_by"))
}

// WhereHasCertifiedByWith applies a predicate to check if query has an edge certified_by with a given conditions (other predicates).
func (f *DeathCertificateFilter) WhereHasCertifiedByWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("certified_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dcq *DeathCertifierQuery) addPredicate(pred func(s *sql.Selector)) {
	dcq.predicates = append(dcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeathCertifierQuery builder.
func (dcq *DeathCertifierQuery) Filter() *DeathCertifierFilter {
	return &DeathCertifierFilter{dcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeathCertifierMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeathCertifierMutation builder.
func (m *DeathCertifierMutation) Filter() *DeathCertifierFilter {
	return &DeathCertifierFilter{m}
}

// DeathCertifierFilter provides a generic filtering capability at runtime for DeathCertifierQuery.
type DeathCertifierFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DeathCertifierFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeathCertifierFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deathcertifier.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeathCertifierFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deathcertifier.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeathCertifierFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(deathcertifier.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *DeathCertifierFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(deathcertifier.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeathCertifierFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deathcertifier.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeathCertifierFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(deathcertifier.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *DeathCertifierFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(deathcertifier.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *DeathCertifierFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(deathcertifier.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DeathCertifierFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(deathcertifier.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DeathCertifierFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(deathcertifier.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *DeathCertifierFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *DeathCertifierFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeathCertificates applies a predicate to check if query has an edge death_certificates.
func (f *DeathCertifierFilter) WhereHasDeathCertificates() {
	f.Where(entql.HasEdge("death_certificates"))
}

// WhereHasDeathCertificatesWith applies a predicate to check if query has an edge death_certificates with a given conditions (other predicates).
func (f *DeathCertifierFilter) WhereHasDeathCertificatesWith(preds ...predicate.DeathCertificate) {
	f.Where(entql.HasEdgeWith("death_certificates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dmq *DeathMannerQuery) addPredicate(pred func(s *sql.Selector)) {
	dmq.predicates = append(dmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeathMannerQuery builder.
func (dmq *DeathMannerQuery) Filter() *DeathMannerFilter {
	return &DeathMannerFilter{dmq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeathMannerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeathMannerMutation builder.
func (m *DeathMannerMutation) Filter() *DeathMannerFilter {
	return &DeathMannerFilter{m}
}

// DeathMannerFilter provides a generic filtering capability at runtime for DeathMannerQuery.
type DeathMannerFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DeathMannerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeathMannerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deathmanner.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeathMannerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deathmanner.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeathMannerFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(deathmanner.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *DeathMannerFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(deathmanner.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeathMannerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deathmanner.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeathMannerFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(deathmanner.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *DeathMannerFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(deathmanner.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *DeathMannerFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(deathmanner.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DeathMannerFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(deathmanner.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DeathMannerFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(deathmanner.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *DeathMannerFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *DeathMannerFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeathCertificates applies a predicate to check if query has an edge death_certificates.
func (f *DeathMannerFilter) WhereHasDeathCertificates() {
	f.Where(entql.HasEdge("death_certificates"))
}

// WhereHasDeathCertificatesWith applies a predicate to check if query has an edge death_certificates with a given conditions (other predicates).
func (f *DeathMannerFilter) WhereHasDeathCertificatesWith(preds ...predicate.DeathCertificate) {
	f.Where(entql.HasEdgeWith("death_certificates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dpq *DeathPlaceQuery) addPredicate(pred func(s *sql.Selector)) {
	dpq.predicates = append(dpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeathPlaceQuery builder.
func (dpq *DeathPlaceQuery) Filter() *DeathPlaceFilter {
	return &DeathPlaceFilter{dpq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeathPlaceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeathPlaceMutation builder.
func (m *DeathPlaceMutation) Filter() *DeathPlaceFilter {
	return &DeathPlaceFilter{m}
}

// DeathPlaceFilter provides a generic filtering capability at runtime for DeathPlaceQuery.
type DeathPlaceFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *DeathPlaceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DeathPlaceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(deathplace.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeathPlaceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(deathplace.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *DeathPlaceFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(deathplace.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *DeathPlaceFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(deathplace.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeathPlaceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(deathplace.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *DeathPlaceFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(deathplace.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *DeathPlaceFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(deathplace.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *DeathPlaceFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(deathplace.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DeathPlaceFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(deathplace.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DeathPlaceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(deathplace.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *DeathPlaceFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *DeathPlaceFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeathCertificates applies a predicate to check if query has an edge death_certificates.
func (f *DeathPlaceFilter) WhereHasDeathCertificates() {
	f.Where(entql.HasEdge("death_certificates"))
}

// WhereHasDeathCertificatesWith applies a predicate to check if query has an edge death_certificates with a given conditions (other predicates).
func (f *DeathPlaceFilter) WhereHasDeathCertificatesWith(preds ...predicate.DeathCertificate) {
	f.Where(entql.HasEdgeWith("death_certificates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EthnicityQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EthnicityQuery builder.
func (eq *EthnicityQuery) Filter() *EthnicityFilter {
	return &EthnicityFilter{eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EthnicityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EthnicityMutation builder.
func (m *EthnicityMutation) Filter() *EthnicityFilter {
	return &EthnicityFilter{m}
}

// EthnicityFilter provides a generic filtering capability at runtime for EthnicityQuery.
type EthnicityFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EthnicityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EthnicityFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(ethnicity.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EthnicityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ethnicity.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *EthnicityFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(ethnicity.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *EthnicityFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(ethnicity.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EthnicityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ethnicity.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *EthnicityFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(ethnicity.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *EthnicityFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(ethnicity.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *EthnicityFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(ethnicity.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *EthnicityFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(ethnicity.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *EthnicityFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(ethnicity.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *EthnicityFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *EthnicityFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPeople applies a predicate to check if query has an edge people.
func (f *EthnicityFilter) WhereHasPeople() {
	f.Where(entql.HasEdge("people"))
}

// WhereHasPeopleWith applies a predicate to check if query has an edge people with a given conditions (other predicates).
func (f *EthnicityFilter) WhereHasPeopleWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("people", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gsq *GameServerQuery) addPredicate(pred func(s *sql.Selector)) {
	gsq.predicates = append(gsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GameServerQuery builder.
func (gsq *GameServerQuery) Filter() *GameServerFilter {
	return &GameServerFilter{gsq}
}

// addPredicate implements the predicateAdder interface.
func (m *GameServerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GameServerMutation builder.
func (m *GameServerMutation) Filter() *GameServerFilter {
	return &GameServerFilter{m}
}

// GameServerFilter provides a generic filtering capability at runtime for GameServerQuery.
type GameServerFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *GameServerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *GameServerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(gameserver.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GameServerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(gameserver.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *GameServerFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(gameserver.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *GameServerFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GameServerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(gameserver.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *GameServerFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(gameserver.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *GameServerFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldUpdatedWith))
}

// WhereName applies the entql string predicate on the name field.
func (f *GameServerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GameServerFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldDescription))
}

// WhereSecret applies the entql string predicate on the secret field.
func (f *GameServerFilter) WhereSecret(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldSecret))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *GameServerFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(gameserver.FieldIPAddress))
}

// WhereMonitoring applies the entql bool predicate on the monitoring field.
func (f *GameServerFilter) WhereMonitoring(p entql.BoolP) {
	f.Where(p.Field(gameserver.FieldMonitoring))
}

// WhereDisabledAt applies the entql time.Time predicate on the disabled_at field.
func (f *GameServerFilter) WhereDisabledAt(p entql.TimeP) {
	f.Where(p.Field(gameserver.FieldDisabledAt))
}

// WhereLastContactAt applies the entql time.Time predicate on the last_contact_at field.
func (f *GameServerFilter) WhereLastContactAt(p entql.TimeP) {
	f.Where(p.Field(gameserver.FieldLastContactAt))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *GameServerFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *GameServerFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlayers applies a predicate to check if query has an edge players.
func (f *GameServerFilter) WhereHasPlayers() {
	f.Where(entql.HasEdge("players"))
}

// WhereHasPlayersWith applies a predicate to check if query has an edge players with a given conditions (other predicates).
func (f *GameServerFilter) WhereHasPlayersWith(preds ...predicate.Player) {
	f.Where(entql.HasEdgeWith("players", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MetadataQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MetadataQuery builder.
func (mq *MetadataQuery) Filter() *MetadataFilter {
	return &MetadataFilter{mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MetadataMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MetadataMutation builder.
func (m *MetadataMutation) Filter() *MetadataFilter {
	return &MetadataFilter{m}
}

// MetadataFilter provides a generic filtering capability at runtime for MetadataQuery.
type MetadataFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *MetadataFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *MetadataFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(metadata.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MetadataFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(metadata.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *MetadataFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(metadata.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *MetadataFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(metadata.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MetadataFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(metadata.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *MetadataFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(metadata.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *MetadataFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(metadata.FieldUpdatedWith))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *MetadataFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(metadata.FieldData))
}

// addPredicate implements the predicateAdder interface.
func (ocq *OAuthConnectionQuery) addPredicate(pred func(s *sql.Selector)) {
	ocq.predicates = append(ocq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OAuthConnectionQuery builder.
func (ocq *OAuthConnectionQuery) Filter() *OAuthConnectionFilter {
	return &OAuthConnectionFilter{ocq}
}

// addPredicate implements the predicateAdder interface.
func (m *OAuthConnectionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OAuthConnectionMutation builder.
func (m *OAuthConnectionMutation) Filter() *OAuthConnectionFilter {
	return &OAuthConnectionFilter{m}
}

// OAuthConnectionFilter provides a generic filtering capability at runtime for OAuthConnectionQuery.
type OAuthConnectionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OAuthConnectionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OAuthConnectionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(oauthconnection.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OAuthConnectionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthconnection.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *OAuthConnectionFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(oauthconnection.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *OAuthConnectionFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(oauthconnection.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OAuthConnectionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthconnection.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *OAuthConnectionFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(oauthconnection.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *OAuthConnectionFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(oauthconnection.FieldUpdatedWith))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *OAuthConnectionFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(oauthconnection.FieldProvider))
}

// WhereProviderUserID applies the entql string predicate on the provider_user_id field.
func (f *OAuthConnectionFilter) WhereProviderUserID(p entql.StringP) {
	f.Where(p.Field(oauthconnection.FieldProviderUserID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OAuthConnectionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthconnection.FieldName))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OAuthConnectionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OAuthConnectionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PersonFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *PersonFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(person.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *PersonFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(person.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *PersonFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(person.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *PersonFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(person.FieldUpdatedWith))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *PersonFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(person.FieldFirstName))
}

// WhereMiddleName applies the entql string predicate on the middle_name field.
func (f *PersonFilter) WhereMiddleName(p entql.StringP) {
	f.Where(p.Field(person.FieldMiddleName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *PersonFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(person.FieldLastName))
}

// WhereSuffix applies the entql string predicate on the suffix field.
func (f *PersonFilter) WhereSuffix(p entql.StringP) {
	f.Where(p.Field(person.FieldSuffix))
}

// WhereDateOfBirth applies the entql time.Time predicate on the date_of_birth field.
func (f *PersonFilter) WhereDateOfBirth(p entql.TimeP) {
	f.Where(p.Field(person.FieldDateOfBirth))
}

// WhereBirthplace applies the entql string predicate on the birthplace field.
func (f *PersonFilter) WhereBirthplace(p entql.StringP) {
	f.Where(p.Field(person.FieldBirthplace))
}

// WhereDeceasedAt applies the entql time.Time predicate on the deceased_at field.
func (f *PersonFilter) WhereDeceasedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeceasedAt))
}

// WhereArchivedAt applies the entql time.Time predicate on the archived_at field.
func (f *PersonFilter) WhereArchivedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldArchivedAt))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *PersonFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *PersonFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehicleRegistrations applies a predicate to check if query has an edge vehicle_registrations.
func (f *PersonFilter) WhereHasVehicleRegistrations() {
	f.Where(entql.HasEdge("vehicle_registrations"))
}

// WhereHasVehicleRegistrationsWith applies a predicate to check if query has an edge vehicle_registrations with a given conditions (other predicates).
func (f *PersonFilter) WhereHasVehicleRegistrationsWith(preds ...predicate.VehicleRegistration) {
	f.Where(entql.HasEdgeWith("vehicle_registrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRace applies a predicate to check if query has an edge race.
func (f *PersonFilter) WhereHasRace() {
	f.Where(entql.HasEdge("race"))
}

// WhereHasRaceWith applies a predicate to check if query has an edge race with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRaceWith(preds ...predicate.Race) {
	f.Where(entql.HasEdgeWith("race", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEthnicity applies a predicate to check if query has an edge ethnicity.
func (f *PersonFilter) WhereHasEthnicity() {
	f.Where(entql.HasEdge("ethnicity"))
}

// WhereHasEthnicityWith applies a predicate to check if query has an edge ethnicity with a given conditions (other predicates).
func (f *PersonFilter) WhereHasEthnicityWith(preds ...predicate.Ethnicity) {
	f.Where(entql.HasEdgeWith("ethnicity", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSex applies a predicate to check if query has an edge sex.
func (f *PersonFilter) WhereHasSex() {
	f.Where(entql.HasEdge("sex"))
}

// WhereHasSexWith applies a predicate to check if query has an edge sex with a given conditions (other predicates).
func (f *PersonFilter) WhereHasSexWith(preds ...predicate.Sex) {
	f.Where(entql.HasEdgeWith("sex", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *PersonFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *PersonFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeathCertificate applies a predicate to check if query has an edge death_certificate.
func (f *PersonFilter) WhereHasDeathCertificate() {
	f.Where(entql.HasEdge("death_certificate"))
}

// WhereHasDeathCertificateWith applies a predicate to check if query has an edge death_certificate with a given conditions (other predicates).
func (f *PersonFilter) WhereHasDeathCertificateWith(preds ...predicate.DeathCertificate) {
	f.Where(entql.HasEdgeWith("death_certificate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCertifiedDeaths applies a predicate to check if query has an edge certified_deaths.
func (f *PersonFilter) WhereHasCertifiedDeaths() {
	f.Where(entql.HasEdge("certified_deaths"))
}

// WhereHasCertifiedDeathsWith applies a predicate to check if query has an edge certified_deaths with a given conditions (other predicates).
func (f *PersonFilter) WhereHasCertifiedDeathsWith(preds ...predicate.DeathCertificate) {
	f.Where(entql.HasEdgeWith("certified_deaths", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlayerQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlayerQuery builder.
func (pq *PlayerQuery) Filter() *PlayerFilter {
	return &PlayerFilter{pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlayerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlayerMutation builder.
func (m *PlayerMutation) Filter() *PlayerFilter {
	return &PlayerFilter{m}
}

// PlayerFilter provides a generic filtering capability at runtime for PlayerQuery.
type PlayerFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PlayerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PlayerFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(player.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlayerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(player.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *PlayerFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(player.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *PlayerFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(player.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlayerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(player.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *PlayerFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(player.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *PlayerFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(player.FieldUpdatedWith))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlayerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(player.FieldName))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *PlayerFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *PlayerFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasServers applies a predicate to check if query has an edge servers.
func (f *PlayerFilter) WhereHasServers() {
	f.Where(entql.HasEdge("servers"))
}

// WhereHasServersWith applies a predicate to check if query has an edge servers with a given conditions (other predicates).
func (f *PlayerFilter) WhereHasServersWith(preds ...predicate.GameServer) {
	f.Where(entql.HasEdgeWith("servers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIdentifiers applies a predicate to check if query has an edge identifiers.
func (f *PlayerFilter) WhereHasIdentifiers() {
	f.Where(entql.HasEdge("identifiers"))
}

// WhereHasIdentifiersWith applies a predicate to check if query has an edge identifiers with a given conditions (other predicates).
func (f *PlayerFilter) WhereHasIdentifiersWith(preds ...predicate.PlayerIdentifier) {
	f.Where(entql.HasEdgeWith("identifiers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (piq *PlayerIdentifierQuery) addPredicate(pred func(s *sql.Selector)) {
	piq.predicates = append(piq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlayerIdentifierQuery builder.
func (piq *PlayerIdentifierQuery) Filter() *PlayerIdentifierFilter {
	return &PlayerIdentifierFilter{piq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlayerIdentifierMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlayerIdentifierMutation builder.
func (m *PlayerIdentifierMutation) Filter() *PlayerIdentifierFilter {
	return &PlayerIdentifierFilter{m}
}

// PlayerIdentifierFilter provides a generic filtering capability at runtime for PlayerIdentifierQuery.
type PlayerIdentifierFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PlayerIdentifierFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PlayerIdentifierFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(playeridentifier.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlayerIdentifierFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(playeridentifier.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *PlayerIdentifierFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(playeridentifier.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *PlayerIdentifierFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(playeridentifier.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlayerIdentifierFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(playeridentifier.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *PlayerIdentifierFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(playeridentifier.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *PlayerIdentifierFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(playeridentifier.FieldUpdatedWith))
}

// WhereValue applies the entql string predicate on the value field.
func (f *PlayerIdentifierFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(playeridentifier.FieldValue))
}

// WhereHasPlayer applies a predicate to check if query has an edge player.
func (f *PlayerIdentifierFilter) WhereHasPlayer() {
	f.Where(entql.HasEdge("player"))
}

// WhereHasPlayerWith applies a predicate to check if query has an edge player with a given conditions (other predicates).
func (f *PlayerIdentifierFilter) WhereHasPlayerWith(preds ...predicate.Player) {
	f.Where(entql.HasEdgeWith("player", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RaceQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RaceQuery builder.
func (rq *RaceQuery) Filter() *RaceFilter {
	return &RaceFilter{rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RaceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RaceMutation builder.
func (m *RaceMutation) Filter() *RaceFilter {
	return &RaceFilter{m}
}

// RaceFilter provides a generic filtering capability at runtime for RaceQuery.
type RaceFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RaceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RaceFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(race.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RaceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(race.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *RaceFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(race.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *RaceFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(race.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RaceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(race.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *RaceFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(race.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *RaceFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(race.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *RaceFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(race.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *RaceFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(race.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *RaceFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(race.FieldDescription))
}

// WhereHasPeople applies a predicate to check if query has an edge people.
func (f *RaceFilter) WhereHasPeople() {
	f.Where(entql.HasEdge("people"))
}

// WhereHasPeopleWith applies a predicate to check if query has an edge people with a given conditions (other predicates).
func (f *RaceFilter) WhereHasPeopleWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("people", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(session.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *SessionFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(session.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *SessionFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(session.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *SessionFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(session.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *SessionFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(session.FieldUpdatedWith))
}

// WhereStartedAt applies the entql time.Time predicate on the started_at field.
func (f *SessionFilter) WhereStartedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldStartedAt))
}

// WhereStartedFrom applies the entql string predicate on the started_from field.
func (f *SessionFilter) WhereStartedFrom(p entql.StringP) {
	f.Where(p.Field(session.FieldStartedFrom))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *SessionFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(session.FieldIPAddress))
}

// WhereEndedAt applies the entql time.Time predicate on the ended_at field.
func (f *SessionFilter) WhereEndedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldEndedAt))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SettingFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *SettingFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(setting.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *SettingFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(setting.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *SettingFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(setting.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *SettingFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(setting.FieldUpdatedWith))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *SettingFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(setting.FieldData))
}

// addPredicate implements the predicateAdder interface.
func (sq *SexQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SexQuery builder.
func (sq *SexQuery) Filter() *SexFilter {
	return &SexFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SexMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SexMutation builder.
func (m *SexMutation) Filter() *SexFilter {
	return &SexFilter{m}
}

// SexFilter provides a generic filtering capability at runtime for SexQuery.
type SexFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SexFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SexFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(sex.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SexFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(sex.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *SexFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(sex.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *SexFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(sex.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SexFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(sex.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *SexFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(sex.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *SexFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(sex.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *SexFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(sex.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *SexFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(sex.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SexFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(sex.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *SexFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *SexFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPeople applies a predicate to check if query has an edge people.
func (f *SexFilter) WhereHasPeople() {
	f.Where(entql.HasEdge("people"))
}

// WhereHasPeopleWith applies a predicate to check if query has an edge people with a given conditions (other predicates).
func (f *SexFilter) WhereHasPeopleWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("people", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *StateQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StateQuery builder.
func (sq *StateQuery) Filter() *StateFilter {
	return &StateFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StateMutation builder.
func (m *StateMutation) Filter() *StateFilter {
	return &StateFilter{m}
}

// StateFilter provides a generic filtering capability at runtime for StateQuery.
type StateFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *StateFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(state.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(state.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *StateFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(state.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *StateFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(state.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(state.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *StateFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(state.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *StateFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(state.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *StateFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(state.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *StateFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(state.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *StateFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(state.FieldDescription))
}

// WhereHasVehicleRegistrations applies a predicate to check if query has an edge vehicle_registrations.
func (f *StateFilter) WhereHasVehicleRegistrations() {
	f.Where(entql.HasEdge("vehicle_registrations"))
}

// WhereHasVehicleRegistrationsWith applies a predicate to check if query has an edge vehicle_registrations with a given conditions (other predicates).
func (f *StateFilter) WhereHasVehicleRegistrationsWith(preds ...predicate.VehicleRegistration) {
	f.Where(entql.HasEdgeWith("vehicle_registrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *UserFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(user.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *UserFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(user.FieldUpdatedWith))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereAvatarURL applies the entql string predicate on the avatar_url field.
func (f *UserFilter) WhereAvatarURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarURL))
}

// WherePermissions applies the entql json.RawMessage predicate on the permissions field.
func (f *UserFilter) WherePermissions(p entql.BytesP) {
	f.Where(p.Field(user.FieldPermissions))
}

// WhereFirstSetupAt applies the entql time.Time predicate on the first_setup_at field.
func (f *UserFilter) WhereFirstSetupAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldFirstSetupAt))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *UserFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *UserFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthConnections applies a predicate to check if query has an edge oauth_connections.
func (f *UserFilter) WhereHasOauthConnections() {
	f.Where(entql.HasEdge("oauth_connections"))
}

// WhereHasOauthConnectionsWith applies a predicate to check if query has an edge oauth_connections with a given conditions (other predicates).
func (f *UserFilter) WhereHasOauthConnectionsWith(preds ...predicate.OAuthConnection) {
	f.Where(entql.HasEdgeWith("oauth_connections", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPeople applies a predicate to check if query has an edge people.
func (f *UserFilter) WhereHasPeople() {
	f.Where(entql.HasEdge("people"))
}

// WhereHasPeopleWith applies a predicate to check if query has an edge people with a given conditions (other predicates).
func (f *UserFilter) WhereHasPeopleWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("people", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vq *VehicleQuery) addPredicate(pred func(s *sql.Selector)) {
	vq.predicates = append(vq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleQuery builder.
func (vq *VehicleQuery) Filter() *VehicleFilter {
	return &VehicleFilter{vq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleMutation builder.
func (m *VehicleMutation) Filter() *VehicleFilter {
	return &VehicleFilter{m}
}

// VehicleFilter provides a generic filtering capability at runtime for VehicleQuery.
type VehicleFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehicle.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicle.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehicle.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehicle.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicle.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehicle.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehicle.FieldUpdatedWith))
}

// WhereVin applies the entql string predicate on the vin field.
func (f *VehicleFilter) WhereVin(p entql.StringP) {
	f.Where(p.Field(vehicle.FieldVin))
}

// WhereStyle applies the entql string predicate on the style field.
func (f *VehicleFilter) WhereStyle(p entql.StringP) {
	f.Where(p.Field(vehicle.FieldStyle))
}

// WhereExtraFeatures applies the entql time.Time predicate on the extra_features field.
func (f *VehicleFilter) WhereExtraFeatures(p entql.TimeP) {
	f.Where(p.Field(vehicle.FieldExtraFeatures))
}

// WherePrivateNotes applies the entql string predicate on the private_notes field.
func (f *VehicleFilter) WherePrivateNotes(p entql.StringP) {
	f.Where(p.Field(vehicle.FieldPrivateNotes))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *VehicleFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRegistrations applies a predicate to check if query has an edge registrations.
func (f *VehicleFilter) WhereHasRegistrations() {
	f.Where(entql.HasEdge("registrations"))
}

// WhereHasRegistrationsWith applies a predicate to check if query has an edge registrations with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasRegistrationsWith(preds ...predicate.VehicleRegistration) {
	f.Where(entql.HasEdgeWith("registrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMake applies a predicate to check if query has an edge make.
func (f *VehicleFilter) WhereHasMake() {
	f.Where(entql.HasEdge("make"))
}

// WhereHasMakeWith applies a predicate to check if query has an edge make with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasMakeWith(preds ...predicate.VehicleMake) {
	f.Where(entql.HasEdgeWith("make", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModel applies a predicate to check if query has an edge model.
func (f *VehicleFilter) WhereHasModel() {
	f.Where(entql.HasEdge("model"))
}

// WhereHasModelWith applies a predicate to check if query has an edge model with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasModelWith(preds ...predicate.VehicleModel) {
	f.Where(entql.HasEdgeWith("model", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMajorColor applies a predicate to check if query has an edge major_color.
func (f *VehicleFilter) WhereHasMajorColor() {
	f.Where(entql.HasEdge("major_color"))
}

// WhereHasMajorColorWith applies a predicate to check if query has an edge major_color with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasMajorColorWith(preds ...predicate.VehicleColor) {
	f.Where(entql.HasEdgeWith("major_color", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMinorColor applies a predicate to check if query has an edge minor_color.
func (f *VehicleFilter) WhereHasMinorColor() {
	f.Where(entql.HasEdge("minor_color"))
}

// WhereHasMinorColorWith applies a predicate to check if query has an edge minor_color with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasMinorColorWith(preds ...predicate.VehicleColor) {
	f.Where(entql.HasEdgeWith("minor_color", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasClass applies a predicate to check if query has an edge class.
func (f *VehicleFilter) WhereHasClass() {
	f.Where(entql.HasEdge("class"))
}

// WhereHasClassWith applies a predicate to check if query has an edge class with a given conditions (other predicates).
func (f *VehicleFilter) WhereHasClassWith(preds ...predicate.VehicleClass) {
	f.Where(entql.HasEdgeWith("class", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vcq *VehicleClassQuery) addPredicate(pred func(s *sql.Selector)) {
	vcq.predicates = append(vcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleClassQuery builder.
func (vcq *VehicleClassQuery) Filter() *VehicleClassFilter {
	return &VehicleClassFilter{vcq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleClassMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleClassMutation builder.
func (m *VehicleClassMutation) Filter() *VehicleClassFilter {
	return &VehicleClassFilter{m}
}

// VehicleClassFilter provides a generic filtering capability at runtime for VehicleClassQuery.
type VehicleClassFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleClassFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleClassFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehicleclass.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleClassFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicleclass.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleClassFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehicleclass.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleClassFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehicleclass.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleClassFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicleclass.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleClassFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehicleclass.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleClassFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehicleclass.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *VehicleClassFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(vehicleclass.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *VehicleClassFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(vehicleclass.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *VehicleClassFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(vehicleclass.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *VehicleClassFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *VehicleClassFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehicles applies a predicate to check if query has an edge vehicles.
func (f *VehicleClassFilter) WhereHasVehicles() {
	f.Where(entql.HasEdge("vehicles"))
}

// WhereHasVehiclesWith applies a predicate to check if query has an edge vehicles with a given conditions (other predicates).
func (f *VehicleClassFilter) WhereHasVehiclesWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vcq *VehicleColorQuery) addPredicate(pred func(s *sql.Selector)) {
	vcq.predicates = append(vcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleColorQuery builder.
func (vcq *VehicleColorQuery) Filter() *VehicleColorFilter {
	return &VehicleColorFilter{vcq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleColorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleColorMutation builder.
func (m *VehicleColorMutation) Filter() *VehicleColorFilter {
	return &VehicleColorFilter{m}
}

// VehicleColorFilter provides a generic filtering capability at runtime for VehicleColorQuery.
type VehicleColorFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleColorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleColorFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehiclecolor.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleColorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclecolor.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleColorFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclecolor.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleColorFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclecolor.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleColorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclecolor.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleColorFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclecolor.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleColorFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclecolor.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *VehicleColorFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(vehiclecolor.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *VehicleColorFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(vehiclecolor.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *VehicleColorFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(vehiclecolor.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *VehicleColorFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *VehicleColorFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehiclesMajor applies a predicate to check if query has an edge vehicles_major.
func (f *VehicleColorFilter) WhereHasVehiclesMajor() {
	f.Where(entql.HasEdge("vehicles_major"))
}

// WhereHasVehiclesMajorWith applies a predicate to check if query has an edge vehicles_major with a given conditions (other predicates).
func (f *VehicleColorFilter) WhereHasVehiclesMajorWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicles_major", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehiclesMinor applies a predicate to check if query has an edge vehicles_minor.
func (f *VehicleColorFilter) WhereHasVehiclesMinor() {
	f.Where(entql.HasEdge("vehicles_minor"))
}

// WhereHasVehiclesMinorWith applies a predicate to check if query has an edge vehicles_minor with a given conditions (other predicates).
func (f *VehicleColorFilter) WhereHasVehiclesMinorWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicles_minor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vmq *VehicleMakeQuery) addPredicate(pred func(s *sql.Selector)) {
	vmq.predicates = append(vmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleMakeQuery builder.
func (vmq *VehicleMakeQuery) Filter() *VehicleMakeFilter {
	return &VehicleMakeFilter{vmq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleMakeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleMakeMutation builder.
func (m *VehicleMakeMutation) Filter() *VehicleMakeFilter {
	return &VehicleMakeFilter{m}
}

// VehicleMakeFilter provides a generic filtering capability at runtime for VehicleMakeQuery.
type VehicleMakeFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleMakeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleMakeFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehiclemake.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleMakeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclemake.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleMakeFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclemake.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleMakeFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclemake.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleMakeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclemake.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleMakeFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclemake.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleMakeFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclemake.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *VehicleMakeFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(vehiclemake.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *VehicleMakeFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(vehiclemake.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *VehicleMakeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(vehiclemake.FieldDescription))
}

// WhereHasVehicles applies a predicate to check if query has an edge vehicles.
func (f *VehicleMakeFilter) WhereHasVehicles() {
	f.Where(entql.HasEdge("vehicles"))
}

// WhereHasVehiclesWith applies a predicate to check if query has an edge vehicles with a given conditions (other predicates).
func (f *VehicleMakeFilter) WhereHasVehiclesWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vmq *VehicleModelQuery) addPredicate(pred func(s *sql.Selector)) {
	vmq.predicates = append(vmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleModelQuery builder.
func (vmq *VehicleModelQuery) Filter() *VehicleModelFilter {
	return &VehicleModelFilter{vmq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleModelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleModelMutation builder.
func (m *VehicleModelMutation) Filter() *VehicleModelFilter {
	return &VehicleModelFilter{m}
}

// VehicleModelFilter provides a generic filtering capability at runtime for VehicleModelQuery.
type VehicleModelFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleModelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleModelFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehiclemodel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleModelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclemodel.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleModelFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclemodel.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleModelFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclemodel.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleModelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehiclemodel.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleModelFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehiclemodel.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleModelFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehiclemodel.FieldUpdatedWith))
}

// WhereShort applies the entql string predicate on the short field.
func (f *VehicleModelFilter) WhereShort(p entql.StringP) {
	f.Where(p.Field(vehiclemodel.FieldShort))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *VehicleModelFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(vehiclemodel.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *VehicleModelFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(vehiclemodel.FieldDescription))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *VehicleModelFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *VehicleModelFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehicles applies a predicate to check if query has an edge vehicles.
func (f *VehicleModelFilter) WhereHasVehicles() {
	f.Where(entql.HasEdge("vehicles"))
}

// WhereHasVehiclesWith applies a predicate to check if query has an edge vehicles with a given conditions (other predicates).
func (f *VehicleModelFilter) WhereHasVehiclesWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (vrq *VehicleRegistrationQuery) addPredicate(pred func(s *sql.Selector)) {
	vrq.predicates = append(vrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the VehicleRegistrationQuery builder.
func (vrq *VehicleRegistrationQuery) Filter() *VehicleRegistrationFilter {
	return &VehicleRegistrationFilter{vrq}
}

// addPredicate implements the predicateAdder interface.
func (m *VehicleRegistrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the VehicleRegistrationMutation builder.
func (m *VehicleRegistrationMutation) Filter() *VehicleRegistrationFilter {
	return &VehicleRegistrationFilter{m}
}

// VehicleRegistrationFilter provides a generic filtering capability at runtime for VehicleRegistrationQuery.
type VehicleRegistrationFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *VehicleRegistrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *VehicleRegistrationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(vehicleregistration.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *VehicleRegistrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicleregistration.FieldCreatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *VehicleRegistrationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(vehicleregistration.FieldCreatedBy))
}

// WhereCreatedWith applies the entql string predicate on the created_with field.
func (f *VehicleRegistrationFilter) WhereCreatedWith(p entql.StringP) {
	f.Where(p.Field(vehicleregistration.FieldCreatedWith))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *VehicleRegistrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(vehicleregistration.FieldUpdatedAt))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *VehicleRegistrationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(vehicleregistration.FieldUpdatedBy))
}

// WhereUpdatedWith applies the entql string predicate on the updated_with field.
func (f *VehicleRegistrationFilter) WhereUpdatedWith(p entql.StringP) {
	f.Where(p.Field(vehicleregistration.FieldUpdatedWith))
}

// WherePlate applies the entql string predicate on the plate field.
func (f *VehicleRegistrationFilter) WherePlate(p entql.StringP) {
	f.Where(p.Field(vehicleregistration.FieldPlate))
}

// WhereExpiredAt applies the entql time.Time predicate on the expired_at field.
func (f *VehicleRegistrationFilter) WhereExpiredAt(p entql.TimeP) {
	f.Where(p.Field(vehicleregistration.FieldExpiredAt))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *VehicleRegistrationFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *VehicleRegistrationFilter) WhereHasMetadataWith(preds ...predicate.Metadata) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasState applies a predicate to check if query has an edge state.
func (f *VehicleRegistrationFilter) WhereHasState() {
	f.Where(entql.HasEdge("state"))
}

// WhereHasStateWith applies a predicate to check if query has an edge state with a given conditions (other predicates).
func (f *VehicleRegistrationFilter) WhereHasStateWith(preds ...predicate.State) {
	f.Where(entql.HasEdgeWith("state", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *VehicleRegistrationFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *VehicleRegistrationFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasVehicle applies a predicate to check if query has an edge vehicle.
func (f *VehicleRegistrationFilter) WhereHasVehicle() {
	f.Where(entql.HasEdge("vehicle"))
}

// WhereHasVehicleWith applies a predicate to check if query has an edge vehicle with a given conditions (other predicates).
func (f *VehicleRegistrationFilter) WhereHasVehicleWith(preds ...predicate.Vehicle) {
	f.Where(entql.HasEdgeWith("vehicle", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
