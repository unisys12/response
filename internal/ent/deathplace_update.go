// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
)

// DeathPlaceUpdate is the builder for updating DeathPlace entities.
type DeathPlaceUpdate struct {
	config
	hooks    []Hook
	mutation *DeathPlaceMutation
}

// Where appends a list predicates to the DeathPlaceUpdate builder.
func (dpu *DeathPlaceUpdate) Where(ps ...predicate.DeathPlace) *DeathPlaceUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetCreatedBy sets the "created_by" field.
func (dpu *DeathPlaceUpdate) SetCreatedBy(i int) *DeathPlaceUpdate {
	dpu.mutation.ResetCreatedBy()
	dpu.mutation.SetCreatedBy(i)
	return dpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableCreatedBy(i *int) *DeathPlaceUpdate {
	if i != nil {
		dpu.SetCreatedBy(*i)
	}
	return dpu
}

// AddCreatedBy adds i to the "created_by" field.
func (dpu *DeathPlaceUpdate) AddCreatedBy(i int) *DeathPlaceUpdate {
	dpu.mutation.AddCreatedBy(i)
	return dpu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dpu *DeathPlaceUpdate) ClearCreatedBy() *DeathPlaceUpdate {
	dpu.mutation.ClearCreatedBy()
	return dpu
}

// SetCreatedWith sets the "created_with" field.
func (dpu *DeathPlaceUpdate) SetCreatedWith(s string) *DeathPlaceUpdate {
	dpu.mutation.SetCreatedWith(s)
	return dpu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableCreatedWith(s *string) *DeathPlaceUpdate {
	if s != nil {
		dpu.SetCreatedWith(*s)
	}
	return dpu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dpu *DeathPlaceUpdate) ClearCreatedWith() *DeathPlaceUpdate {
	dpu.mutation.ClearCreatedWith()
	return dpu
}

// SetUpdatedAt sets the "updated_at" field.
func (dpu *DeathPlaceUpdate) SetUpdatedAt(t time.Time) *DeathPlaceUpdate {
	dpu.mutation.SetUpdatedAt(t)
	return dpu
}

// SetUpdatedBy sets the "updated_by" field.
func (dpu *DeathPlaceUpdate) SetUpdatedBy(i int) *DeathPlaceUpdate {
	dpu.mutation.ResetUpdatedBy()
	dpu.mutation.SetUpdatedBy(i)
	return dpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableUpdatedBy(i *int) *DeathPlaceUpdate {
	if i != nil {
		dpu.SetUpdatedBy(*i)
	}
	return dpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dpu *DeathPlaceUpdate) AddUpdatedBy(i int) *DeathPlaceUpdate {
	dpu.mutation.AddUpdatedBy(i)
	return dpu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dpu *DeathPlaceUpdate) ClearUpdatedBy() *DeathPlaceUpdate {
	dpu.mutation.ClearUpdatedBy()
	return dpu
}

// SetUpdatedWith sets the "updated_with" field.
func (dpu *DeathPlaceUpdate) SetUpdatedWith(s string) *DeathPlaceUpdate {
	dpu.mutation.SetUpdatedWith(s)
	return dpu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableUpdatedWith(s *string) *DeathPlaceUpdate {
	if s != nil {
		dpu.SetUpdatedWith(*s)
	}
	return dpu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dpu *DeathPlaceUpdate) ClearUpdatedWith() *DeathPlaceUpdate {
	dpu.mutation.ClearUpdatedWith()
	return dpu
}

// SetShort sets the "short" field.
func (dpu *DeathPlaceUpdate) SetShort(s string) *DeathPlaceUpdate {
	dpu.mutation.SetShort(s)
	return dpu
}

// SetTitle sets the "title" field.
func (dpu *DeathPlaceUpdate) SetTitle(s string) *DeathPlaceUpdate {
	dpu.mutation.SetTitle(s)
	return dpu
}

// SetDescription sets the "description" field.
func (dpu *DeathPlaceUpdate) SetDescription(s string) *DeathPlaceUpdate {
	dpu.mutation.SetDescription(s)
	return dpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableDescription(s *string) *DeathPlaceUpdate {
	if s != nil {
		dpu.SetDescription(*s)
	}
	return dpu
}

// ClearDescription clears the value of the "description" field.
func (dpu *DeathPlaceUpdate) ClearDescription() *DeathPlaceUpdate {
	dpu.mutation.ClearDescription()
	return dpu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dpu *DeathPlaceUpdate) SetMetadataID(id int) *DeathPlaceUpdate {
	dpu.mutation.SetMetadataID(id)
	return dpu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dpu *DeathPlaceUpdate) SetNillableMetadataID(id *int) *DeathPlaceUpdate {
	if id != nil {
		dpu = dpu.SetMetadataID(*id)
	}
	return dpu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dpu *DeathPlaceUpdate) SetMetadata(m *Metadata) *DeathPlaceUpdate {
	return dpu.SetMetadataID(m.ID)
}

// AddDeathCertificateIDs adds the "death_certificates" edge to the DeathCertificate entity by IDs.
func (dpu *DeathPlaceUpdate) AddDeathCertificateIDs(ids ...int) *DeathPlaceUpdate {
	dpu.mutation.AddDeathCertificateIDs(ids...)
	return dpu
}

// AddDeathCertificates adds the "death_certificates" edges to the DeathCertificate entity.
func (dpu *DeathPlaceUpdate) AddDeathCertificates(d ...*DeathCertificate) *DeathPlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.AddDeathCertificateIDs(ids...)
}

// Mutation returns the DeathPlaceMutation object of the builder.
func (dpu *DeathPlaceUpdate) Mutation() *DeathPlaceMutation {
	return dpu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dpu *DeathPlaceUpdate) ClearMetadata() *DeathPlaceUpdate {
	dpu.mutation.ClearMetadata()
	return dpu
}

// ClearDeathCertificates clears all "death_certificates" edges to the DeathCertificate entity.
func (dpu *DeathPlaceUpdate) ClearDeathCertificates() *DeathPlaceUpdate {
	dpu.mutation.ClearDeathCertificates()
	return dpu
}

// RemoveDeathCertificateIDs removes the "death_certificates" edge to DeathCertificate entities by IDs.
func (dpu *DeathPlaceUpdate) RemoveDeathCertificateIDs(ids ...int) *DeathPlaceUpdate {
	dpu.mutation.RemoveDeathCertificateIDs(ids...)
	return dpu
}

// RemoveDeathCertificates removes "death_certificates" edges to DeathCertificate entities.
func (dpu *DeathPlaceUpdate) RemoveDeathCertificates(d ...*DeathCertificate) *DeathPlaceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpu.RemoveDeathCertificateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DeathPlaceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dpu.defaults(); err != nil {
		return 0, err
	}
	if len(dpu.hooks) == 0 {
		if err = dpu.check(); err != nil {
			return 0, err
		}
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpu.check(); err != nil {
				return 0, err
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DeathPlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DeathPlaceUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DeathPlaceUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DeathPlaceUpdate) defaults() error {
	if _, ok := dpu.mutation.UpdatedAt(); !ok {
		if deathplace.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathplace.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathplace.UpdateDefaultUpdatedAt()
		dpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DeathPlaceUpdate) check() error {
	if v, ok := dpu.mutation.Short(); ok {
		if err := deathplace.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := dpu.mutation.Title(); ok {
		if err := deathplace.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := dpu.mutation.Description(); ok {
		if err := deathplace.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (dpu *DeathPlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathplace.Table,
			Columns: deathplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathplace.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if value, ok := dpu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if dpu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if value, ok := dpu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldCreatedWith,
		})
	}
	if dpu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldCreatedWith,
		})
	}
	if value, ok := dpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathplace.FieldUpdatedAt,
		})
	}
	if value, ok := dpu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if value, ok := dpu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if dpu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if value, ok := dpu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldUpdatedWith,
		})
	}
	if dpu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldUpdatedWith,
		})
	}
	if value, ok := dpu.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldShort,
		})
	}
	if value, ok := dpu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldTitle,
		})
	}
	if value, ok := dpu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldDescription,
		})
	}
	if dpu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldDescription,
		})
	}
	if dpu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathplace.MetadataTable,
			Columns: []string{deathplace.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathplace.MetadataTable,
			Columns: []string{deathplace.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedDeathCertificatesIDs(); len(nodes) > 0 && !dpu.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DeathCertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathplace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeathPlaceUpdateOne is the builder for updating a single DeathPlace entity.
type DeathPlaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeathPlaceMutation
}

// SetCreatedBy sets the "created_by" field.
func (dpuo *DeathPlaceUpdateOne) SetCreatedBy(i int) *DeathPlaceUpdateOne {
	dpuo.mutation.ResetCreatedBy()
	dpuo.mutation.SetCreatedBy(i)
	return dpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableCreatedBy(i *int) *DeathPlaceUpdateOne {
	if i != nil {
		dpuo.SetCreatedBy(*i)
	}
	return dpuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dpuo *DeathPlaceUpdateOne) AddCreatedBy(i int) *DeathPlaceUpdateOne {
	dpuo.mutation.AddCreatedBy(i)
	return dpuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (dpuo *DeathPlaceUpdateOne) ClearCreatedBy() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearCreatedBy()
	return dpuo
}

// SetCreatedWith sets the "created_with" field.
func (dpuo *DeathPlaceUpdateOne) SetCreatedWith(s string) *DeathPlaceUpdateOne {
	dpuo.mutation.SetCreatedWith(s)
	return dpuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableCreatedWith(s *string) *DeathPlaceUpdateOne {
	if s != nil {
		dpuo.SetCreatedWith(*s)
	}
	return dpuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (dpuo *DeathPlaceUpdateOne) ClearCreatedWith() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearCreatedWith()
	return dpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dpuo *DeathPlaceUpdateOne) SetUpdatedAt(t time.Time) *DeathPlaceUpdateOne {
	dpuo.mutation.SetUpdatedAt(t)
	return dpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dpuo *DeathPlaceUpdateOne) SetUpdatedBy(i int) *DeathPlaceUpdateOne {
	dpuo.mutation.ResetUpdatedBy()
	dpuo.mutation.SetUpdatedBy(i)
	return dpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableUpdatedBy(i *int) *DeathPlaceUpdateOne {
	if i != nil {
		dpuo.SetUpdatedBy(*i)
	}
	return dpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dpuo *DeathPlaceUpdateOne) AddUpdatedBy(i int) *DeathPlaceUpdateOne {
	dpuo.mutation.AddUpdatedBy(i)
	return dpuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (dpuo *DeathPlaceUpdateOne) ClearUpdatedBy() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearUpdatedBy()
	return dpuo
}

// SetUpdatedWith sets the "updated_with" field.
func (dpuo *DeathPlaceUpdateOne) SetUpdatedWith(s string) *DeathPlaceUpdateOne {
	dpuo.mutation.SetUpdatedWith(s)
	return dpuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableUpdatedWith(s *string) *DeathPlaceUpdateOne {
	if s != nil {
		dpuo.SetUpdatedWith(*s)
	}
	return dpuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (dpuo *DeathPlaceUpdateOne) ClearUpdatedWith() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearUpdatedWith()
	return dpuo
}

// SetShort sets the "short" field.
func (dpuo *DeathPlaceUpdateOne) SetShort(s string) *DeathPlaceUpdateOne {
	dpuo.mutation.SetShort(s)
	return dpuo
}

// SetTitle sets the "title" field.
func (dpuo *DeathPlaceUpdateOne) SetTitle(s string) *DeathPlaceUpdateOne {
	dpuo.mutation.SetTitle(s)
	return dpuo
}

// SetDescription sets the "description" field.
func (dpuo *DeathPlaceUpdateOne) SetDescription(s string) *DeathPlaceUpdateOne {
	dpuo.mutation.SetDescription(s)
	return dpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableDescription(s *string) *DeathPlaceUpdateOne {
	if s != nil {
		dpuo.SetDescription(*s)
	}
	return dpuo
}

// ClearDescription clears the value of the "description" field.
func (dpuo *DeathPlaceUpdateOne) ClearDescription() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearDescription()
	return dpuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (dpuo *DeathPlaceUpdateOne) SetMetadataID(id int) *DeathPlaceUpdateOne {
	dpuo.mutation.SetMetadataID(id)
	return dpuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (dpuo *DeathPlaceUpdateOne) SetNillableMetadataID(id *int) *DeathPlaceUpdateOne {
	if id != nil {
		dpuo = dpuo.SetMetadataID(*id)
	}
	return dpuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (dpuo *DeathPlaceUpdateOne) SetMetadata(m *Metadata) *DeathPlaceUpdateOne {
	return dpuo.SetMetadataID(m.ID)
}

// AddDeathCertificateIDs adds the "death_certificates" edge to the DeathCertificate entity by IDs.
func (dpuo *DeathPlaceUpdateOne) AddDeathCertificateIDs(ids ...int) *DeathPlaceUpdateOne {
	dpuo.mutation.AddDeathCertificateIDs(ids...)
	return dpuo
}

// AddDeathCertificates adds the "death_certificates" edges to the DeathCertificate entity.
func (dpuo *DeathPlaceUpdateOne) AddDeathCertificates(d ...*DeathCertificate) *DeathPlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.AddDeathCertificateIDs(ids...)
}

// Mutation returns the DeathPlaceMutation object of the builder.
func (dpuo *DeathPlaceUpdateOne) Mutation() *DeathPlaceMutation {
	return dpuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (dpuo *DeathPlaceUpdateOne) ClearMetadata() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearMetadata()
	return dpuo
}

// ClearDeathCertificates clears all "death_certificates" edges to the DeathCertificate entity.
func (dpuo *DeathPlaceUpdateOne) ClearDeathCertificates() *DeathPlaceUpdateOne {
	dpuo.mutation.ClearDeathCertificates()
	return dpuo
}

// RemoveDeathCertificateIDs removes the "death_certificates" edge to DeathCertificate entities by IDs.
func (dpuo *DeathPlaceUpdateOne) RemoveDeathCertificateIDs(ids ...int) *DeathPlaceUpdateOne {
	dpuo.mutation.RemoveDeathCertificateIDs(ids...)
	return dpuo
}

// RemoveDeathCertificates removes "death_certificates" edges to DeathCertificate entities.
func (dpuo *DeathPlaceUpdateOne) RemoveDeathCertificates(d ...*DeathCertificate) *DeathPlaceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dpuo.RemoveDeathCertificateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DeathPlaceUpdateOne) Select(field string, fields ...string) *DeathPlaceUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DeathPlace entity.
func (dpuo *DeathPlaceUpdateOne) Save(ctx context.Context) (*DeathPlace, error) {
	var (
		err  error
		node *DeathPlace
	)
	if err := dpuo.defaults(); err != nil {
		return nil, err
	}
	if len(dpuo.hooks) == 0 {
		if err = dpuo.check(); err != nil {
			return nil, err
		}
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeathPlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpuo.check(); err != nil {
				return nil, err
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DeathPlaceUpdateOne) SaveX(ctx context.Context) *DeathPlace {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DeathPlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DeathPlaceUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DeathPlaceUpdateOne) defaults() error {
	if _, ok := dpuo.mutation.UpdatedAt(); !ok {
		if deathplace.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deathplace.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deathplace.UpdateDefaultUpdatedAt()
		dpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DeathPlaceUpdateOne) check() error {
	if v, ok := dpuo.mutation.Short(); ok {
		if err := deathplace.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := dpuo.mutation.Title(); ok {
		if err := deathplace.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := dpuo.mutation.Description(); ok {
		if err := deathplace.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (dpuo *DeathPlaceUpdateOne) sqlSave(ctx context.Context) (_node *DeathPlace, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deathplace.Table,
			Columns: deathplace.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deathplace.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeathPlace.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deathplace.FieldID)
		for _, f := range fields {
			if !deathplace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deathplace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if value, ok := dpuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if dpuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathplace.FieldCreatedBy,
		})
	}
	if value, ok := dpuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldCreatedWith,
		})
	}
	if dpuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldCreatedWith,
		})
	}
	if value, ok := dpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deathplace.FieldUpdatedAt,
		})
	}
	if value, ok := dpuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if value, ok := dpuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if dpuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: deathplace.FieldUpdatedBy,
		})
	}
	if value, ok := dpuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldUpdatedWith,
		})
	}
	if dpuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldUpdatedWith,
		})
	}
	if value, ok := dpuo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldShort,
		})
	}
	if value, ok := dpuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldTitle,
		})
	}
	if value, ok := dpuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deathplace.FieldDescription,
		})
	}
	if dpuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deathplace.FieldDescription,
		})
	}
	if dpuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathplace.MetadataTable,
			Columns: []string{deathplace.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deathplace.MetadataTable,
			Columns: []string{deathplace.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedDeathCertificatesIDs(); len(nodes) > 0 && !dpuo.mutation.DeathCertificatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DeathCertificatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deathplace.DeathCertificatesTable,
			Columns: []string{deathplace.DeathCertificatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeathPlace{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deathplace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
