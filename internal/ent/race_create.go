// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/race"
)

// RaceCreate is the builder for creating a Race entity.
type RaceCreate struct {
	config
	mutation *RaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RaceCreate) SetCreatedAt(t time.Time) *RaceCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RaceCreate) SetNillableCreatedAt(t *time.Time) *RaceCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RaceCreate) SetCreatedBy(i int) *RaceCreate {
	rc.mutation.SetCreatedBy(i)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RaceCreate) SetNillableCreatedBy(i *int) *RaceCreate {
	if i != nil {
		rc.SetCreatedBy(*i)
	}
	return rc
}

// SetCreatedWith sets the "created_with" field.
func (rc *RaceCreate) SetCreatedWith(s string) *RaceCreate {
	rc.mutation.SetCreatedWith(s)
	return rc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (rc *RaceCreate) SetNillableCreatedWith(s *string) *RaceCreate {
	if s != nil {
		rc.SetCreatedWith(*s)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RaceCreate) SetUpdatedAt(t time.Time) *RaceCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RaceCreate) SetNillableUpdatedAt(t *time.Time) *RaceCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RaceCreate) SetUpdatedBy(i int) *RaceCreate {
	rc.mutation.SetUpdatedBy(i)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RaceCreate) SetNillableUpdatedBy(i *int) *RaceCreate {
	if i != nil {
		rc.SetUpdatedBy(*i)
	}
	return rc
}

// SetUpdatedWith sets the "updated_with" field.
func (rc *RaceCreate) SetUpdatedWith(s string) *RaceCreate {
	rc.mutation.SetUpdatedWith(s)
	return rc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (rc *RaceCreate) SetNillableUpdatedWith(s *string) *RaceCreate {
	if s != nil {
		rc.SetUpdatedWith(*s)
	}
	return rc
}

// SetShort sets the "short" field.
func (rc *RaceCreate) SetShort(s string) *RaceCreate {
	rc.mutation.SetShort(s)
	return rc
}

// SetTitle sets the "title" field.
func (rc *RaceCreate) SetTitle(s string) *RaceCreate {
	rc.mutation.SetTitle(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RaceCreate) SetDescription(s string) *RaceCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RaceCreate) SetNillableDescription(s *string) *RaceCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// AddPersonIDs adds the "people" edge to the Person entity by IDs.
func (rc *RaceCreate) AddPersonIDs(ids ...int) *RaceCreate {
	rc.mutation.AddPersonIDs(ids...)
	return rc
}

// AddPeople adds the "people" edges to the Person entity.
func (rc *RaceCreate) AddPeople(p ...*Person) *RaceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPersonIDs(ids...)
}

// Mutation returns the RaceMutation object of the builder.
func (rc *RaceCreate) Mutation() *RaceMutation {
	return rc.mutation
}

// Save creates the Race in the database.
func (rc *RaceCreate) Save(ctx context.Context) (*Race, error) {
	var (
		err  error
		node *Race
	)
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RaceCreate) SaveX(ctx context.Context) *Race {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RaceCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RaceCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RaceCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if race.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized race.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := race.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if race.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized race.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := race.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RaceCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := rc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "short"`)}
	}
	if v, ok := rc.mutation.Short(); ok {
		if err := race.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "short": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := rc.mutation.Title(); ok {
		if err := race.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Description(); ok {
		if err := race.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "description": %w`, err)}
		}
	}
	return nil
}

func (rc *RaceCreate) sqlSave(ctx context.Context) (*Race, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RaceCreate) createSpec() (*Race, *sqlgraph.CreateSpec) {
	var (
		_node = &Race{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: race.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: race.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: race.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: race.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: race.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: race.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := rc.mutation.Short(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldShort,
		})
		_node.Short = value
	}
	if value, ok := rc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: race.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := rc.mutation.PeopleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   race.PeopleTable,
			Columns: []string{race.PeopleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Race.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rc *RaceCreate) OnConflict(opts ...sql.ConflictOption) *RaceUpsertOne {
	rc.conflict = opts
	return &RaceUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Race.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *RaceCreate) OnConflictColumns(columns ...string) *RaceUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RaceUpsertOne{
		create: rc,
	}
}

type (
	// RaceUpsertOne is the builder for "upsert"-ing
	//  one Race node.
	RaceUpsertOne struct {
		create *RaceCreate
	}

	// RaceUpsert is the "OnConflict" setter.
	RaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RaceUpsert) SetCreatedAt(v time.Time) *RaceUpsert {
	u.Set(race.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RaceUpsert) UpdateCreatedAt() *RaceUpsert {
	u.SetExcluded(race.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *RaceUpsert) SetCreatedBy(v int) *RaceUpsert {
	u.Set(race.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RaceUpsert) UpdateCreatedBy() *RaceUpsert {
	u.SetExcluded(race.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RaceUpsert) ClearCreatedBy() *RaceUpsert {
	u.SetNull(race.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *RaceUpsert) SetCreatedWith(v string) *RaceUpsert {
	u.Set(race.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *RaceUpsert) UpdateCreatedWith() *RaceUpsert {
	u.SetExcluded(race.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *RaceUpsert) ClearCreatedWith() *RaceUpsert {
	u.SetNull(race.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RaceUpsert) SetUpdatedAt(v time.Time) *RaceUpsert {
	u.Set(race.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RaceUpsert) UpdateUpdatedAt() *RaceUpsert {
	u.SetExcluded(race.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RaceUpsert) SetUpdatedBy(v int) *RaceUpsert {
	u.Set(race.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RaceUpsert) UpdateUpdatedBy() *RaceUpsert {
	u.SetExcluded(race.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RaceUpsert) ClearUpdatedBy() *RaceUpsert {
	u.SetNull(race.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *RaceUpsert) SetUpdatedWith(v string) *RaceUpsert {
	u.Set(race.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *RaceUpsert) UpdateUpdatedWith() *RaceUpsert {
	u.SetExcluded(race.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *RaceUpsert) ClearUpdatedWith() *RaceUpsert {
	u.SetNull(race.FieldUpdatedWith)
	return u
}

// SetShort sets the "short" field.
func (u *RaceUpsert) SetShort(v string) *RaceUpsert {
	u.Set(race.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *RaceUpsert) UpdateShort() *RaceUpsert {
	u.SetExcluded(race.FieldShort)
	return u
}

// SetTitle sets the "title" field.
func (u *RaceUpsert) SetTitle(v string) *RaceUpsert {
	u.Set(race.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RaceUpsert) UpdateTitle() *RaceUpsert {
	u.SetExcluded(race.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *RaceUpsert) SetDescription(v string) *RaceUpsert {
	u.Set(race.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RaceUpsert) UpdateDescription() *RaceUpsert {
	u.SetExcluded(race.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *RaceUpsert) ClearDescription() *RaceUpsert {
	u.SetNull(race.FieldDescription)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Race.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *RaceUpsertOne) UpdateNewValues() *RaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Race.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RaceUpsertOne) Ignore() *RaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RaceUpsertOne) DoNothing() *RaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RaceCreate.OnConflict
// documentation for more info.
func (u *RaceUpsertOne) Update(set func(*RaceUpsert)) *RaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RaceUpsertOne) SetCreatedAt(v time.Time) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateCreatedAt() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RaceUpsertOne) SetCreatedBy(v int) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateCreatedBy() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RaceUpsertOne) ClearCreatedBy() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *RaceUpsertOne) SetCreatedWith(v string) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateCreatedWith() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *RaceUpsertOne) ClearCreatedWith() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RaceUpsertOne) SetUpdatedAt(v time.Time) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateUpdatedAt() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RaceUpsertOne) SetUpdatedBy(v int) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateUpdatedBy() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RaceUpsertOne) ClearUpdatedBy() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *RaceUpsertOne) SetUpdatedWith(v string) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateUpdatedWith() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *RaceUpsertOne) ClearUpdatedWith() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *RaceUpsertOne) SetShort(v string) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateShort() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *RaceUpsertOne) SetTitle(v string) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateTitle() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *RaceUpsertOne) SetDescription(v string) *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RaceUpsertOne) UpdateDescription() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RaceUpsertOne) ClearDescription() *RaceUpsertOne {
	return u.Update(func(s *RaceUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *RaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RaceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RaceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RaceCreateBulk is the builder for creating many Race entities in bulk.
type RaceCreateBulk struct {
	config
	builders []*RaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Race entities in the database.
func (rcb *RaceCreateBulk) Save(ctx context.Context) ([]*Race, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Race, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RaceCreateBulk) SaveX(ctx context.Context) []*Race {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RaceCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RaceCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Race.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *RaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *RaceUpsertBulk {
	rcb.conflict = opts
	return &RaceUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Race.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *RaceCreateBulk) OnConflictColumns(columns ...string) *RaceUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RaceUpsertBulk{
		create: rcb,
	}
}

// RaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Race nodes.
type RaceUpsertBulk struct {
	create *RaceCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Race.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *RaceUpsertBulk) UpdateNewValues() *RaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Race.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RaceUpsertBulk) Ignore() *RaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RaceUpsertBulk) DoNothing() *RaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RaceCreateBulk.OnConflict
// documentation for more info.
func (u *RaceUpsertBulk) Update(set func(*RaceUpsert)) *RaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RaceUpsertBulk) SetCreatedAt(v time.Time) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateCreatedAt() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *RaceUpsertBulk) SetCreatedBy(v int) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateCreatedBy() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *RaceUpsertBulk) ClearCreatedBy() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *RaceUpsertBulk) SetCreatedWith(v string) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateCreatedWith() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *RaceUpsertBulk) ClearCreatedWith() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RaceUpsertBulk) SetUpdatedAt(v time.Time) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateUpdatedAt() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RaceUpsertBulk) SetUpdatedBy(v int) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateUpdatedBy() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RaceUpsertBulk) ClearUpdatedBy() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *RaceUpsertBulk) SetUpdatedWith(v string) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateUpdatedWith() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *RaceUpsertBulk) ClearUpdatedWith() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *RaceUpsertBulk) SetShort(v string) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateShort() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *RaceUpsertBulk) SetTitle(v string) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateTitle() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *RaceUpsertBulk) SetDescription(v string) *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RaceUpsertBulk) UpdateDescription() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *RaceUpsertBulk) ClearDescription() *RaceUpsertBulk {
	return u.Update(func(s *RaceUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *RaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
