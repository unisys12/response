// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// VehicleRegistration is the model entity for the VehicleRegistration schema.
type VehicleRegistration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Plate holds the value of the "plate" field.
	Plate string `json:"plate,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleRegistrationQuery when eager-loading is set.
	Edges                         VehicleRegistrationEdges `json:"edges"`
	person_vehicle_registrations  *int
	state_vehicle_registrations   *int
	vehicle_registrations         *int
	vehicle_registration_metadata *int
}

// VehicleRegistrationEdges holds the relations/edges for other nodes in the graph.
type VehicleRegistrationEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// State holds the value of the state edge.
	State *State `json:"state,omitempty"`
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// Vehicle holds the value of the vehicle edge.
	Vehicle *Vehicle `json:"vehicle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleRegistrationEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// StateOrErr returns the State value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleRegistrationEdges) StateOrErr() (*State, error) {
	if e.loadedTypes[1] {
		if e.State == nil {
			// The edge state was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: state.Label}
		}
		return e.State, nil
	}
	return nil, &NotLoadedError{edge: "state"}
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleRegistrationEdges) PersonOrErr() (*Person, error) {
	if e.loadedTypes[2] {
		if e.Person == nil {
			// The edge person was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// VehicleOrErr returns the Vehicle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleRegistrationEdges) VehicleOrErr() (*Vehicle, error) {
	if e.loadedTypes[3] {
		if e.Vehicle == nil {
			// The edge vehicle was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vehicle.Label}
		}
		return e.Vehicle, nil
	}
	return nil, &NotLoadedError{edge: "vehicle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VehicleRegistration) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehicleregistration.FieldID, vehicleregistration.FieldCreatedBy, vehicleregistration.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case vehicleregistration.FieldCreatedWith, vehicleregistration.FieldUpdatedWith, vehicleregistration.FieldPlate:
			values[i] = new(sql.NullString)
		case vehicleregistration.FieldCreatedAt, vehicleregistration.FieldUpdatedAt, vehicleregistration.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		case vehicleregistration.ForeignKeys[0]: // person_vehicle_registrations
			values[i] = new(sql.NullInt64)
		case vehicleregistration.ForeignKeys[1]: // state_vehicle_registrations
			values[i] = new(sql.NullInt64)
		case vehicleregistration.ForeignKeys[2]: // vehicle_registrations
			values[i] = new(sql.NullInt64)
		case vehicleregistration.ForeignKeys[3]: // vehicle_registration_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VehicleRegistration", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VehicleRegistration fields.
func (vr *VehicleRegistration) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehicleregistration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vr.ID = int(value.Int64)
		case vehicleregistration.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vr.CreatedAt = value.Time
			}
		case vehicleregistration.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vr.CreatedBy = int(value.Int64)
			}
		case vehicleregistration.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				vr.CreatedWith = value.String
			}
		case vehicleregistration.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vr.UpdatedAt = value.Time
			}
		case vehicleregistration.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vr.UpdatedBy = int(value.Int64)
			}
		case vehicleregistration.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				vr.UpdatedWith = value.String
			}
		case vehicleregistration.FieldPlate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate", values[i])
			} else if value.Valid {
				vr.Plate = value.String
			}
		case vehicleregistration.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				vr.ExpiredAt = value.Time
			}
		case vehicleregistration.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field person_vehicle_registrations", value)
			} else if value.Valid {
				vr.person_vehicle_registrations = new(int)
				*vr.person_vehicle_registrations = int(value.Int64)
			}
		case vehicleregistration.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field state_vehicle_registrations", value)
			} else if value.Valid {
				vr.state_vehicle_registrations = new(int)
				*vr.state_vehicle_registrations = int(value.Int64)
			}
		case vehicleregistration.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_registrations", value)
			} else if value.Valid {
				vr.vehicle_registrations = new(int)
				*vr.vehicle_registrations = int(value.Int64)
			}
		case vehicleregistration.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_registration_metadata", value)
			} else if value.Valid {
				vr.vehicle_registration_metadata = new(int)
				*vr.vehicle_registration_metadata = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the VehicleRegistration entity.
func (vr *VehicleRegistration) QueryMetadata() *MetadataQuery {
	return (&VehicleRegistrationClient{config: vr.config}).QueryMetadata(vr)
}

// QueryState queries the "state" edge of the VehicleRegistration entity.
func (vr *VehicleRegistration) QueryState() *StateQuery {
	return (&VehicleRegistrationClient{config: vr.config}).QueryState(vr)
}

// QueryPerson queries the "person" edge of the VehicleRegistration entity.
func (vr *VehicleRegistration) QueryPerson() *PersonQuery {
	return (&VehicleRegistrationClient{config: vr.config}).QueryPerson(vr)
}

// QueryVehicle queries the "vehicle" edge of the VehicleRegistration entity.
func (vr *VehicleRegistration) QueryVehicle() *VehicleQuery {
	return (&VehicleRegistrationClient{config: vr.config}).QueryVehicle(vr)
}

// Update returns a builder for updating this VehicleRegistration.
// Note that you need to call VehicleRegistration.Unwrap() before calling this method if this VehicleRegistration
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VehicleRegistration) Update() *VehicleRegistrationUpdateOne {
	return (&VehicleRegistrationClient{config: vr.config}).UpdateOne(vr)
}

// Unwrap unwraps the VehicleRegistration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VehicleRegistration) Unwrap() *VehicleRegistration {
	tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VehicleRegistration is not a transactional entity")
	}
	vr.config.driver = tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VehicleRegistration) String() string {
	var builder strings.Builder
	builder.WriteString("VehicleRegistration(")
	builder.WriteString(fmt.Sprintf("id=%v", vr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(vr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", vr.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(vr.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(vr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", vr.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(vr.UpdatedWith)
	builder.WriteString(", plate=")
	builder.WriteString(vr.Plate)
	builder.WriteString(", expired_at=")
	builder.WriteString(vr.ExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VehicleRegistrations is a parsable slice of VehicleRegistration.
type VehicleRegistrations []*VehicleRegistration

func (vr VehicleRegistrations) config(cfg config) {
	for _i := range vr {
		vr[_i].config = cfg
	}
}
