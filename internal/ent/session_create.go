// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/session"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SessionCreate) SetCreatedBy(i int) *SessionCreate {
	sc.mutation.SetCreatedBy(i)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedBy(i *int) *SessionCreate {
	if i != nil {
		sc.SetCreatedBy(*i)
	}
	return sc
}

// SetCreatedWith sets the "created_with" field.
func (sc *SessionCreate) SetCreatedWith(s string) *SessionCreate {
	sc.mutation.SetCreatedWith(s)
	return sc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedWith(s *string) *SessionCreate {
	if s != nil {
		sc.SetCreatedWith(*s)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SessionCreate) SetUpdatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUpdatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SessionCreate) SetUpdatedBy(i int) *SessionCreate {
	sc.mutation.SetUpdatedBy(i)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUpdatedBy(i *int) *SessionCreate {
	if i != nil {
		sc.SetUpdatedBy(*i)
	}
	return sc
}

// SetUpdatedWith sets the "updated_with" field.
func (sc *SessionCreate) SetUpdatedWith(s string) *SessionCreate {
	sc.mutation.SetUpdatedWith(s)
	return sc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUpdatedWith(s *string) *SessionCreate {
	if s != nil {
		sc.SetUpdatedWith(*s)
	}
	return sc
}

// SetStartedAt sets the "started_at" field.
func (sc *SessionCreate) SetStartedAt(t time.Time) *SessionCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetStartedFrom sets the "started_from" field.
func (sc *SessionCreate) SetStartedFrom(s string) *SessionCreate {
	sc.mutation.SetStartedFrom(s)
	return sc
}

// SetNillableStartedFrom sets the "started_from" field if the given value is not nil.
func (sc *SessionCreate) SetNillableStartedFrom(s *string) *SessionCreate {
	if s != nil {
		sc.SetStartedFrom(*s)
	}
	return sc
}

// SetIPAddress sets the "ip_address" field.
func (sc *SessionCreate) SetIPAddress(s string) *SessionCreate {
	sc.mutation.SetIPAddress(s)
	return sc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (sc *SessionCreate) SetNillableIPAddress(s *string) *SessionCreate {
	if s != nil {
		sc.SetIPAddress(*s)
	}
	return sc
}

// SetEndedAt sets the "ended_at" field.
func (sc *SessionCreate) SetEndedAt(t time.Time) *SessionCreate {
	sc.mutation.SetEndedAt(t)
	return sc
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	var (
		err  error
		node *Session
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if session.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized session.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if session.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized session.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := session.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "started_at"`)}
	}
	if _, ok := sc.mutation.EndedAt(); !ok {
		return &ValidationError{Name: "ended_at", err: errors.New(`ent: missing required field "ended_at"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: session.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: session.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldStartedAt,
		})
		_node.StartedAt = value
	}
	if value, ok := sc.mutation.StartedFrom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldStartedFrom,
		})
		_node.StartedFrom = &value
	}
	if value, ok := sc.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldIPAddress,
		})
		_node.IPAddress = &value
	}
	if value, ok := sc.mutation.EndedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldEndedAt,
		})
		_node.EndedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Session.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SessionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SessionCreate) OnConflict(opts ...sql.ConflictOption) *SessionUpsertOne {
	sc.conflict = opts
	return &SessionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SessionCreate) OnConflictColumns(columns ...string) *SessionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SessionUpsertOne{
		create: sc,
	}
}

type (
	// SessionUpsertOne is the builder for "upsert"-ing
	//  one Session node.
	SessionUpsertOne struct {
		create *SessionCreate
	}

	// SessionUpsert is the "OnConflict" setter.
	SessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SessionUpsert) SetCreatedAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateCreatedAt() *SessionUpsert {
	u.SetExcluded(session.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SessionUpsert) SetCreatedBy(v int) *SessionUpsert {
	u.Set(session.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SessionUpsert) UpdateCreatedBy() *SessionUpsert {
	u.SetExcluded(session.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SessionUpsert) ClearCreatedBy() *SessionUpsert {
	u.SetNull(session.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *SessionUpsert) SetCreatedWith(v string) *SessionUpsert {
	u.Set(session.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *SessionUpsert) UpdateCreatedWith() *SessionUpsert {
	u.SetExcluded(session.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *SessionUpsert) ClearCreatedWith() *SessionUpsert {
	u.SetNull(session.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SessionUpsert) SetUpdatedAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateUpdatedAt() *SessionUpsert {
	u.SetExcluded(session.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SessionUpsert) SetUpdatedBy(v int) *SessionUpsert {
	u.Set(session.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SessionUpsert) UpdateUpdatedBy() *SessionUpsert {
	u.SetExcluded(session.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SessionUpsert) ClearUpdatedBy() *SessionUpsert {
	u.SetNull(session.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *SessionUpsert) SetUpdatedWith(v string) *SessionUpsert {
	u.Set(session.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *SessionUpsert) UpdateUpdatedWith() *SessionUpsert {
	u.SetExcluded(session.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *SessionUpsert) ClearUpdatedWith() *SessionUpsert {
	u.SetNull(session.FieldUpdatedWith)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *SessionUpsert) SetStartedAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateStartedAt() *SessionUpsert {
	u.SetExcluded(session.FieldStartedAt)
	return u
}

// SetStartedFrom sets the "started_from" field.
func (u *SessionUpsert) SetStartedFrom(v string) *SessionUpsert {
	u.Set(session.FieldStartedFrom, v)
	return u
}

// UpdateStartedFrom sets the "started_from" field to the value that was provided on create.
func (u *SessionUpsert) UpdateStartedFrom() *SessionUpsert {
	u.SetExcluded(session.FieldStartedFrom)
	return u
}

// ClearStartedFrom clears the value of the "started_from" field.
func (u *SessionUpsert) ClearStartedFrom() *SessionUpsert {
	u.SetNull(session.FieldStartedFrom)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsert) SetIPAddress(v string) *SessionUpsert {
	u.Set(session.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsert) UpdateIPAddress() *SessionUpsert {
	u.SetExcluded(session.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsert) ClearIPAddress() *SessionUpsert {
	u.SetNull(session.FieldIPAddress)
	return u
}

// SetEndedAt sets the "ended_at" field.
func (u *SessionUpsert) SetEndedAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldEndedAt, v)
	return u
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateEndedAt() *SessionUpsert {
	u.SetExcluded(session.FieldEndedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SessionUpsertOne) UpdateNewValues() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Session.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SessionUpsertOne) Ignore() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SessionUpsertOne) DoNothing() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SessionCreate.OnConflict
// documentation for more info.
func (u *SessionUpsertOne) Update(set func(*SessionUpsert)) *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SessionUpsertOne) SetCreatedAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateCreatedAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SessionUpsertOne) SetCreatedBy(v int) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateCreatedBy() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SessionUpsertOne) ClearCreatedBy() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *SessionUpsertOne) SetCreatedWith(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateCreatedWith() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *SessionUpsertOne) ClearCreatedWith() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SessionUpsertOne) SetUpdatedAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateUpdatedAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SessionUpsertOne) SetUpdatedBy(v int) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateUpdatedBy() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SessionUpsertOne) ClearUpdatedBy() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *SessionUpsertOne) SetUpdatedWith(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateUpdatedWith() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *SessionUpsertOne) ClearUpdatedWith() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *SessionUpsertOne) SetStartedAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateStartedAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateStartedAt()
	})
}

// SetStartedFrom sets the "started_from" field.
func (u *SessionUpsertOne) SetStartedFrom(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetStartedFrom(v)
	})
}

// UpdateStartedFrom sets the "started_from" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateStartedFrom() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateStartedFrom()
	})
}

// ClearStartedFrom clears the value of the "started_from" field.
func (u *SessionUpsertOne) ClearStartedFrom() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearStartedFrom()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsertOne) SetIPAddress(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateIPAddress() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsertOne) ClearIPAddress() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *SessionUpsertOne) SetEndedAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateEndedAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateEndedAt()
	})
}

// Exec executes the query.
func (u *SessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SessionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SessionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	builders []*SessionCreate
	conflict []sql.ConflictOption
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Session.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SessionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SessionUpsertBulk {
	scb.conflict = opts
	return &SessionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SessionCreateBulk) OnConflictColumns(columns ...string) *SessionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SessionUpsertBulk{
		create: scb,
	}
}

// SessionUpsertBulk is the builder for "upsert"-ing
// a bulk of Session nodes.
type SessionUpsertBulk struct {
	create *SessionCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SessionUpsertBulk) UpdateNewValues() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SessionUpsertBulk) Ignore() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SessionUpsertBulk) DoNothing() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SessionCreateBulk.OnConflict
// documentation for more info.
func (u *SessionUpsertBulk) Update(set func(*SessionUpsert)) *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SessionUpsertBulk) SetCreatedAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateCreatedAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SessionUpsertBulk) SetCreatedBy(v int) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateCreatedBy() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *SessionUpsertBulk) ClearCreatedBy() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *SessionUpsertBulk) SetCreatedWith(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateCreatedWith() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *SessionUpsertBulk) ClearCreatedWith() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SessionUpsertBulk) SetUpdatedAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateUpdatedAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SessionUpsertBulk) SetUpdatedBy(v int) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateUpdatedBy() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *SessionUpsertBulk) ClearUpdatedBy() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *SessionUpsertBulk) SetUpdatedWith(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateUpdatedWith() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *SessionUpsertBulk) ClearUpdatedWith() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *SessionUpsertBulk) SetStartedAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateStartedAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateStartedAt()
	})
}

// SetStartedFrom sets the "started_from" field.
func (u *SessionUpsertBulk) SetStartedFrom(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetStartedFrom(v)
	})
}

// UpdateStartedFrom sets the "started_from" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateStartedFrom() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateStartedFrom()
	})
}

// ClearStartedFrom clears the value of the "started_from" field.
func (u *SessionUpsertBulk) ClearStartedFrom() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearStartedFrom()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsertBulk) SetIPAddress(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateIPAddress() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsertBulk) ClearIPAddress() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *SessionUpsertBulk) SetEndedAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateEndedAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateEndedAt()
	})
}

// Exec executes the query.
func (u *SessionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
