// Code generated by entc, DO NOT EDIT.

package vehicleregistration

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the vehicleregistration type in the database.
	Label = "vehicle_registration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedWith holds the string denoting the created_with field in the database.
	FieldCreatedWith = "created_with"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedWith holds the string denoting the updated_with field in the database.
	FieldUpdatedWith = "updated_with"
	// FieldPlate holds the string denoting the plate field in the database.
	FieldPlate = "plate"
	// FieldExpiredAt holds the string denoting the expired_at field in the database.
	FieldExpiredAt = "expired_at"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeState holds the string denoting the state edge name in mutations.
	EdgeState = "state"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeVehicle holds the string denoting the vehicle edge name in mutations.
	EdgeVehicle = "vehicle"
	// Table holds the table name of the vehicleregistration in the database.
	Table = "vehicle_registrations"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "vehicle_registrations"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "vehicle_registration_metadata"
	// StateTable is the table that holds the state relation/edge.
	StateTable = "vehicle_registrations"
	// StateInverseTable is the table name for the State entity.
	// It exists in this package in order to avoid circular dependency with the "state" package.
	StateInverseTable = "states"
	// StateColumn is the table column denoting the state relation/edge.
	StateColumn = "state_vehicle_registrations"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "vehicle_registrations"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_vehicle_registrations"
	// VehicleTable is the table that holds the vehicle relation/edge.
	VehicleTable = "vehicle_registrations"
	// VehicleInverseTable is the table name for the Vehicle entity.
	// It exists in this package in order to avoid circular dependency with the "vehicle" package.
	VehicleInverseTable = "vehicles"
	// VehicleColumn is the table column denoting the vehicle relation/edge.
	VehicleColumn = "vehicle_registrations"
)

// Columns holds all SQL columns for vehicleregistration fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldCreatedWith,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldUpdatedWith,
	FieldPlate,
	FieldExpiredAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vehicle_registrations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"person_vehicle_registrations",
	"state_vehicle_registrations",
	"vehicle_registrations",
	"vehicle_registration_metadata",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/responserms/response/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
