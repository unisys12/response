// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/sex"
)

// Sex is the model entity for the Sex schema.
type Sex struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SexQuery when eager-loading is set.
	Edges        SexEdges `json:"edges"`
	sex_metadata *int
}

// SexEdges holds the relations/edges for other nodes in the graph.
type SexEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// People holds the value of the people edge.
	People []*Person `json:"people,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SexEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// PeopleOrErr returns the People value or an error if the edge
// was not loaded in eager-loading.
func (e SexEdges) PeopleOrErr() ([]*Person, error) {
	if e.loadedTypes[1] {
		return e.People, nil
	}
	return nil, &NotLoadedError{edge: "people"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sex) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sex.FieldID, sex.FieldCreatedBy, sex.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case sex.FieldCreatedWith, sex.FieldUpdatedWith, sex.FieldShort, sex.FieldTitle, sex.FieldDescription:
			values[i] = new(sql.NullString)
		case sex.FieldCreatedAt, sex.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sex.ForeignKeys[0]: // sex_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sex", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sex fields.
func (s *Sex) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sex.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case sex.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sex.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = int(value.Int64)
			}
		case sex.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				s.CreatedWith = value.String
			}
		case sex.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sex.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = int(value.Int64)
			}
		case sex.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				s.UpdatedWith = value.String
			}
		case sex.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				s.Short = value.String
			}
		case sex.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case sex.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case sex.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sex_metadata", value)
			} else if value.Valid {
				s.sex_metadata = new(int)
				*s.sex_metadata = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the Sex entity.
func (s *Sex) QueryMetadata() *MetadataQuery {
	return (&SexClient{config: s.config}).QueryMetadata(s)
}

// QueryPeople queries the "people" edge of the Sex entity.
func (s *Sex) QueryPeople() *PersonQuery {
	return (&SexClient{config: s.config}).QueryPeople(s)
}

// Update returns a builder for updating this Sex.
// Note that you need to call Sex.Unwrap() before calling this method if this Sex
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sex) Update() *SexUpdateOne {
	return (&SexClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Sex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sex) Unwrap() *Sex {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sex is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sex) String() string {
	var builder strings.Builder
	builder.WriteString("Sex(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(s.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(s.UpdatedWith)
	builder.WriteString(", short=")
	builder.WriteString(s.Short)
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", description=")
	builder.WriteString(s.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Sexes is a parsable slice of Sex.
type Sexes []*Sex

func (s Sexes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
