// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/responserms/response/internal/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query a policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutate a  policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The DeathCertificateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeathCertificateQueryRuleFunc func(context.Context, *ent.DeathCertificateQuery) error

// EvalQuery return f(ctx, q).
func (f DeathCertificateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeathCertificateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeathCertificateQuery", q)
}

// The DeathCertificateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeathCertificateMutationRuleFunc func(context.Context, *ent.DeathCertificateMutation) error

// EvalMutation calls f(ctx, m).
func (f DeathCertificateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeathCertificateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeathCertificateMutation", m)
}

// The DeathCertifierQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeathCertifierQueryRuleFunc func(context.Context, *ent.DeathCertifierQuery) error

// EvalQuery return f(ctx, q).
func (f DeathCertifierQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeathCertifierQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeathCertifierQuery", q)
}

// The DeathCertifierMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeathCertifierMutationRuleFunc func(context.Context, *ent.DeathCertifierMutation) error

// EvalMutation calls f(ctx, m).
func (f DeathCertifierMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeathCertifierMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeathCertifierMutation", m)
}

// The DeathMannerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeathMannerQueryRuleFunc func(context.Context, *ent.DeathMannerQuery) error

// EvalQuery return f(ctx, q).
func (f DeathMannerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeathMannerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeathMannerQuery", q)
}

// The DeathMannerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeathMannerMutationRuleFunc func(context.Context, *ent.DeathMannerMutation) error

// EvalMutation calls f(ctx, m).
func (f DeathMannerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeathMannerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeathMannerMutation", m)
}

// The DeathPlaceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeathPlaceQueryRuleFunc func(context.Context, *ent.DeathPlaceQuery) error

// EvalQuery return f(ctx, q).
func (f DeathPlaceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeathPlaceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeathPlaceQuery", q)
}

// The DeathPlaceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeathPlaceMutationRuleFunc func(context.Context, *ent.DeathPlaceMutation) error

// EvalMutation calls f(ctx, m).
func (f DeathPlaceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeathPlaceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeathPlaceMutation", m)
}

// The EthnicityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EthnicityQueryRuleFunc func(context.Context, *ent.EthnicityQuery) error

// EvalQuery return f(ctx, q).
func (f EthnicityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EthnicityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EthnicityQuery", q)
}

// The EthnicityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EthnicityMutationRuleFunc func(context.Context, *ent.EthnicityMutation) error

// EvalMutation calls f(ctx, m).
func (f EthnicityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EthnicityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EthnicityMutation", m)
}

// The GameServerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type GameServerQueryRuleFunc func(context.Context, *ent.GameServerQuery) error

// EvalQuery return f(ctx, q).
func (f GameServerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GameServerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.GameServerQuery", q)
}

// The GameServerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type GameServerMutationRuleFunc func(context.Context, *ent.GameServerMutation) error

// EvalMutation calls f(ctx, m).
func (f GameServerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.GameServerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.GameServerMutation", m)
}

// The MetadataQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MetadataQueryRuleFunc func(context.Context, *ent.MetadataQuery) error

// EvalQuery return f(ctx, q).
func (f MetadataQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MetadataQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MetadataQuery", q)
}

// The MetadataMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MetadataMutationRuleFunc func(context.Context, *ent.MetadataMutation) error

// EvalMutation calls f(ctx, m).
func (f MetadataMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MetadataMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MetadataMutation", m)
}

// The OAuthConnectionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthConnectionQueryRuleFunc func(context.Context, *ent.OAuthConnectionQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthConnectionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthConnectionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthConnectionQuery", q)
}

// The OAuthConnectionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthConnectionMutationRuleFunc func(context.Context, *ent.OAuthConnectionMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthConnectionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthConnectionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthConnectionMutation", m)
}

// The PersonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonQueryRuleFunc func(context.Context, *ent.PersonQuery) error

// EvalQuery return f(ctx, q).
func (f PersonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PersonQuery", q)
}

// The PersonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonMutationRuleFunc func(context.Context, *ent.PersonMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PersonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PersonMutation", m)
}

// The PlayerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlayerQueryRuleFunc func(context.Context, *ent.PlayerQuery) error

// EvalQuery return f(ctx, q).
func (f PlayerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlayerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlayerQuery", q)
}

// The PlayerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlayerMutationRuleFunc func(context.Context, *ent.PlayerMutation) error

// EvalMutation calls f(ctx, m).
func (f PlayerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlayerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlayerMutation", m)
}

// The PlayerIdentifierQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlayerIdentifierQueryRuleFunc func(context.Context, *ent.PlayerIdentifierQuery) error

// EvalQuery return f(ctx, q).
func (f PlayerIdentifierQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlayerIdentifierQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlayerIdentifierQuery", q)
}

// The PlayerIdentifierMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlayerIdentifierMutationRuleFunc func(context.Context, *ent.PlayerIdentifierMutation) error

// EvalMutation calls f(ctx, m).
func (f PlayerIdentifierMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlayerIdentifierMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlayerIdentifierMutation", m)
}

// The RaceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RaceQueryRuleFunc func(context.Context, *ent.RaceQuery) error

// EvalQuery return f(ctx, q).
func (f RaceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RaceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RaceQuery", q)
}

// The RaceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RaceMutationRuleFunc func(context.Context, *ent.RaceMutation) error

// EvalMutation calls f(ctx, m).
func (f RaceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RaceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RaceMutation", m)
}

// The SessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SessionQueryRuleFunc func(context.Context, *ent.SessionQuery) error

// EvalQuery return f(ctx, q).
func (f SessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SessionQuery", q)
}

// The SessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SessionMutationRuleFunc func(context.Context, *ent.SessionMutation) error

// EvalMutation calls f(ctx, m).
func (f SessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SessionMutation", m)
}

// The SettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SettingQueryRuleFunc func(context.Context, *ent.SettingQuery) error

// EvalQuery return f(ctx, q).
func (f SettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SettingQuery", q)
}

// The SettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SettingMutationRuleFunc func(context.Context, *ent.SettingMutation) error

// EvalMutation calls f(ctx, m).
func (f SettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SettingMutation", m)
}

// The SexQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SexQueryRuleFunc func(context.Context, *ent.SexQuery) error

// EvalQuery return f(ctx, q).
func (f SexQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SexQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SexQuery", q)
}

// The SexMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SexMutationRuleFunc func(context.Context, *ent.SexMutation) error

// EvalMutation calls f(ctx, m).
func (f SexMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SexMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SexMutation", m)
}

// The StateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StateQueryRuleFunc func(context.Context, *ent.StateQuery) error

// EvalQuery return f(ctx, q).
func (f StateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StateQuery", q)
}

// The StateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StateMutationRuleFunc func(context.Context, *ent.StateMutation) error

// EvalMutation calls f(ctx, m).
func (f StateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StateMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The VehicleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleQueryRuleFunc func(context.Context, *ent.VehicleQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleQuery", q)
}

// The VehicleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleMutationRuleFunc func(context.Context, *ent.VehicleMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleMutation", m)
}

// The VehicleClassQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleClassQueryRuleFunc func(context.Context, *ent.VehicleClassQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleClassQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleClassQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleClassQuery", q)
}

// The VehicleClassMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleClassMutationRuleFunc func(context.Context, *ent.VehicleClassMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleClassMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleClassMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleClassMutation", m)
}

// The VehicleColorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleColorQueryRuleFunc func(context.Context, *ent.VehicleColorQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleColorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleColorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleColorQuery", q)
}

// The VehicleColorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleColorMutationRuleFunc func(context.Context, *ent.VehicleColorMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleColorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleColorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleColorMutation", m)
}

// The VehicleMakeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleMakeQueryRuleFunc func(context.Context, *ent.VehicleMakeQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleMakeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleMakeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleMakeQuery", q)
}

// The VehicleMakeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleMakeMutationRuleFunc func(context.Context, *ent.VehicleMakeMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleMakeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleMakeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleMakeMutation", m)
}

// The VehicleModelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleModelQueryRuleFunc func(context.Context, *ent.VehicleModelQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleModelQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleModelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleModelQuery", q)
}

// The VehicleModelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleModelMutationRuleFunc func(context.Context, *ent.VehicleModelMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleModelMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleModelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleModelMutation", m)
}

// The VehicleRegistrationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VehicleRegistrationQueryRuleFunc func(context.Context, *ent.VehicleRegistrationQuery) error

// EvalQuery return f(ctx, q).
func (f VehicleRegistrationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VehicleRegistrationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VehicleRegistrationQuery", q)
}

// The VehicleRegistrationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VehicleRegistrationMutationRuleFunc func(context.Context, *ent.VehicleRegistrationMutation) error

// EvalMutation calls f(ctx, m).
func (f VehicleRegistrationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VehicleRegistrationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VehicleRegistrationMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.DeathCertificateQuery:
		return q.Filter(), nil
	case *ent.DeathCertifierQuery:
		return q.Filter(), nil
	case *ent.DeathMannerQuery:
		return q.Filter(), nil
	case *ent.DeathPlaceQuery:
		return q.Filter(), nil
	case *ent.EthnicityQuery:
		return q.Filter(), nil
	case *ent.GameServerQuery:
		return q.Filter(), nil
	case *ent.MetadataQuery:
		return q.Filter(), nil
	case *ent.OAuthConnectionQuery:
		return q.Filter(), nil
	case *ent.PersonQuery:
		return q.Filter(), nil
	case *ent.PlayerQuery:
		return q.Filter(), nil
	case *ent.PlayerIdentifierQuery:
		return q.Filter(), nil
	case *ent.RaceQuery:
		return q.Filter(), nil
	case *ent.SessionQuery:
		return q.Filter(), nil
	case *ent.SettingQuery:
		return q.Filter(), nil
	case *ent.SexQuery:
		return q.Filter(), nil
	case *ent.StateQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.VehicleQuery:
		return q.Filter(), nil
	case *ent.VehicleClassQuery:
		return q.Filter(), nil
	case *ent.VehicleColorQuery:
		return q.Filter(), nil
	case *ent.VehicleMakeQuery:
		return q.Filter(), nil
	case *ent.VehicleModelQuery:
		return q.Filter(), nil
	case *ent.VehicleRegistrationQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.DeathCertificateMutation:
		return m.Filter(), nil
	case *ent.DeathCertifierMutation:
		return m.Filter(), nil
	case *ent.DeathMannerMutation:
		return m.Filter(), nil
	case *ent.DeathPlaceMutation:
		return m.Filter(), nil
	case *ent.EthnicityMutation:
		return m.Filter(), nil
	case *ent.GameServerMutation:
		return m.Filter(), nil
	case *ent.MetadataMutation:
		return m.Filter(), nil
	case *ent.OAuthConnectionMutation:
		return m.Filter(), nil
	case *ent.PersonMutation:
		return m.Filter(), nil
	case *ent.PlayerMutation:
		return m.Filter(), nil
	case *ent.PlayerIdentifierMutation:
		return m.Filter(), nil
	case *ent.RaceMutation:
		return m.Filter(), nil
	case *ent.SessionMutation:
		return m.Filter(), nil
	case *ent.SettingMutation:
		return m.Filter(), nil
	case *ent.SexMutation:
		return m.Filter(), nil
	case *ent.StateMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.VehicleMutation:
		return m.Filter(), nil
	case *ent.VehicleClassMutation:
		return m.Filter(), nil
	case *ent.VehicleColorMutation:
		return m.Filter(), nil
	case *ent.VehicleMakeMutation:
		return m.Filter(), nil
	case *ent.VehicleModelMutation:
		return m.Filter(), nil
	case *ent.VehicleRegistrationMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
