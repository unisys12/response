// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/deathcertifier"
	"github.com/responserms/response/internal/ent/deathmanner"
	"github.com/responserms/response/internal/ent/deathplace"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/oauthconnection"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/player"
	"github.com/responserms/response/internal/ent/playeridentifier"
	"github.com/responserms/response/internal/ent/race"
	"github.com/responserms/response/internal/ent/session"
	"github.com/responserms/response/internal/ent/setting"
	"github.com/responserms/response/internal/ent/sex"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/user"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
	"github.com/responserms/response/internal/ent/vehicleregistration"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (dc *DeathCertificate) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dc.ID,
		Type:   "DeathCertificate",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(dc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Cause); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "cause",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Comments); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "comments",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CertifiedAt); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "certified_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CertifierComments); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "certifier_comments",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.RequiresCertification); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "bool",
		Name:  "requires_certification",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = dc.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Person",
		Name: "decedent",
	}
	err = dc.QueryDecedent().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "DeathManner",
		Name: "manner",
	}
	err = dc.QueryManner().
		Select(deathmanner.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "DeathPlace",
		Name: "place",
	}
	err = dc.QueryPlace().
		Select(deathplace.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "DeathCertifier",
		Name: "certifier",
	}
	err = dc.QueryCertifier().
		Select(deathcertifier.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Person",
		Name: "certified_by",
	}
	err = dc.QueryCertifiedBy().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dc *DeathCertifier) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dc.ID,
		Type:   "DeathCertifier",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(dc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = dc.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "DeathCertificate",
		Name: "death_certificates",
	}
	err = dc.QueryDeathCertificates().
		Select(deathcertificate.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dm *DeathManner) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dm.ID,
		Type:   "DeathManner",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(dm.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dm.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = dm.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "DeathCertificate",
		Name: "death_certificates",
	}
	err = dm.QueryDeathCertificates().
		Select(deathcertificate.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dp *DeathPlace) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dp.ID,
		Type:   "DeathPlace",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(dp.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dp.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = dp.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "DeathCertificate",
		Name: "death_certificates",
	}
	err = dp.QueryDeathCertificates().
		Select(deathcertificate.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Ethnicity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Ethnicity",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(e.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = e.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Person",
		Name: "people",
	}
	err = e.QueryPeople().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (gs *GameServer) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     gs.ID,
		Type:   "GameServer",
		Fields: make([]*Field, 13),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(gs.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.Name); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.Description); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.Secret); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "secret",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.IPAddress); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "ip_address",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.Monitoring); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "bool",
		Name:  "monitoring",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.DisabledAt); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "time.Time",
		Name:  "disabled_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(gs.LastContactAt); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "time.Time",
		Name:  "last_contact_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = gs.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Player",
		Name: "players",
	}
	err = gs.QueryPlayers().
		Select(player.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (m *Metadata) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     m.ID,
		Type:   "Metadata",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(m.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(m.Data); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "map[string]interface {}",
		Name:  "data",
		Value: string(buf),
	}
	return node, nil
}

func (oc *OAuthConnection) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     oc.ID,
		Type:   "OAuthConnection",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(oc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.Provider); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "provider",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.ProviderUserID); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "provider_user_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.Name); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = oc.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pe *Person) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pe.ID,
		Type:   "Person",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 8),
	}
	var buf []byte
	if buf, err = json.Marshal(pe.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.FirstName); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "first_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.MiddleName); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "middle_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.LastName); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "last_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.Suffix); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "suffix",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.DateOfBirth); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "time.Time",
		Name:  "date_of_birth",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.Birthplace); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "string",
		Name:  "birthplace",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.DeceasedAt); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "time.Time",
		Name:  "deceased_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pe.ArchivedAt); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "time.Time",
		Name:  "archived_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = pe.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "VehicleRegistration",
		Name: "vehicle_registrations",
	}
	err = pe.QueryVehicleRegistrations().
		Select(vehicleregistration.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Race",
		Name: "race",
	}
	err = pe.QueryRace().
		Select(race.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Ethnicity",
		Name: "ethnicity",
	}
	err = pe.QueryEthnicity().
		Select(ethnicity.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Sex",
		Name: "sex",
	}
	err = pe.QuerySex().
		Select(sex.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "User",
		Name: "user",
	}
	err = pe.QueryUser().
		Select(user.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "DeathCertificate",
		Name: "death_certificate",
	}
	err = pe.QueryDeathCertificate().
		Select(deathcertificate.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "DeathCertificate",
		Name: "certified_deaths",
	}
	err = pe.QueryCertifiedDeaths().
		Select(deathcertificate.FieldID).
		Scan(ctx, &node.Edges[7].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pl *Player) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pl.ID,
		Type:   "Player",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pl.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pl.Name); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = pl.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "GameServer",
		Name: "servers",
	}
	err = pl.QueryServers().
		Select(gameserver.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "PlayerIdentifier",
		Name: "identifiers",
	}
	err = pl.QueryIdentifiers().
		Select(playeridentifier.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pi *PlayerIdentifier) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pi.ID,
		Type:   "PlayerIdentifier",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(pi.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pi.Value); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "value",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Player",
		Name: "player",
	}
	err = pi.QueryPlayer().
		Select(player.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Race) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Race",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Person",
		Name: "people",
	}
	err = r.QueryPeople().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Session) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Session",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.StartedAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "started_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.StartedFrom); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "started_from",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.IPAddress); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "ip_address",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.EndedAt); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "time.Time",
		Name:  "ended_at",
		Value: string(buf),
	}
	return node, nil
}

func (s *Setting) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Setting",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Key); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Data); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "structs.SettingData",
		Name:  "data",
		Value: string(buf),
	}
	return node, nil
}

func (s *Sex) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Sex",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = s.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Person",
		Name: "people",
	}
	err = s.QueryPeople().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *State) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "State",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "VehicleRegistration",
		Name: "vehicle_registrations",
	}
	err = s.QueryVehicleRegistrations().
		Select(vehicleregistration.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 12),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(u.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Name); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Password); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.AvatarURL); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "avatar_url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Permissions); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "[]int",
		Name:  "permissions",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.FirstSetupAt); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "time.Time",
		Name:  "first_setup_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = u.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "OAuthConnection",
		Name: "oauth_connections",
	}
	err = u.QueryOauthConnections().
		Select(oauthconnection.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Person",
		Name: "people",
	}
	err = u.QueryPeople().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (v *Vehicle) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     v.ID,
		Type:   "Vehicle",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 7),
	}
	var buf []byte
	if buf, err = json.Marshal(v.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.Vin); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "vin",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.Style); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "style",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.ExtraFeatures); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "extra_features",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.PrivateNotes); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "private_notes",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = v.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "VehicleRegistration",
		Name: "registrations",
	}
	err = v.QueryRegistrations().
		Select(vehicleregistration.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "VehicleMake",
		Name: "make",
	}
	err = v.QueryMake().
		Select(vehiclemake.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "VehicleModel",
		Name: "model",
	}
	err = v.QueryModel().
		Select(vehiclemodel.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "VehicleColor",
		Name: "major_color",
	}
	err = v.QueryMajorColor().
		Select(vehiclecolor.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "VehicleColor",
		Name: "minor_color",
	}
	err = v.QueryMinorColor().
		Select(vehiclecolor.FieldID).
		Scan(ctx, &node.Edges[5].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "VehicleClass",
		Name: "class",
	}
	err = v.QueryClass().
		Select(vehicleclass.FieldID).
		Scan(ctx, &node.Edges[6].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (vc *VehicleClass) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     vc.ID,
		Type:   "VehicleClass",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(vc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = vc.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Vehicle",
		Name: "vehicles",
	}
	err = vc.QueryVehicles().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (vc *VehicleColor) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     vc.ID,
		Type:   "VehicleColor",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(vc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vc.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = vc.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Vehicle",
		Name: "vehicles_major",
	}
	err = vc.QueryVehiclesMajor().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Vehicle",
		Name: "vehicles_minor",
	}
	err = vc.QueryVehiclesMinor().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (vm *VehicleMake) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     vm.ID,
		Type:   "VehicleMake",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(vm.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Vehicle",
		Name: "vehicles",
	}
	err = vm.QueryVehicles().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (vm *VehicleModel) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     vm.ID,
		Type:   "VehicleModel",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(vm.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Short); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "short",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Title); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vm.Description); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = vm.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Vehicle",
		Name: "vehicles",
	}
	err = vm.QueryVehicles().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (vr *VehicleRegistration) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     vr.ID,
		Type:   "VehicleRegistration",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(vr.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.CreatedBy); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "created_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.CreatedWith); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "created_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.UpdatedBy); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "updated_by",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.UpdatedWith); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "updated_with",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.Plate); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "plate",
		Value: string(buf),
	}
	if buf, err = json.Marshal(vr.ExpiredAt); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "expired_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Metadata",
		Name: "metadata",
	}
	err = vr.QueryMetadata().
		Select(metadata.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "State",
		Name: "state",
	}
	err = vr.QueryState().
		Select(state.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Person",
		Name: "person",
	}
	err = vr.QueryPerson().
		Select(person.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Vehicle",
		Name: "vehicle",
	}
	err = vr.QueryVehicle().
		Select(vehicle.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case deathcertificate.Table:
		n, err := c.DeathCertificate.Query().
			Where(deathcertificate.ID(id)).
			CollectFields(ctx, "DeathCertificate").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case deathcertifier.Table:
		n, err := c.DeathCertifier.Query().
			Where(deathcertifier.ID(id)).
			CollectFields(ctx, "DeathCertifier").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case deathmanner.Table:
		n, err := c.DeathManner.Query().
			Where(deathmanner.ID(id)).
			CollectFields(ctx, "DeathManner").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case deathplace.Table:
		n, err := c.DeathPlace.Query().
			Where(deathplace.ID(id)).
			CollectFields(ctx, "DeathPlace").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case ethnicity.Table:
		n, err := c.Ethnicity.Query().
			Where(ethnicity.ID(id)).
			CollectFields(ctx, "Ethnicity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case gameserver.Table:
		n, err := c.GameServer.Query().
			Where(gameserver.ID(id)).
			CollectFields(ctx, "GameServer").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case metadata.Table:
		n, err := c.Metadata.Query().
			Where(metadata.ID(id)).
			CollectFields(ctx, "Metadata").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthconnection.Table:
		n, err := c.OAuthConnection.Query().
			Where(oauthconnection.ID(id)).
			CollectFields(ctx, "OAuthConnection").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case person.Table:
		n, err := c.Person.Query().
			Where(person.ID(id)).
			CollectFields(ctx, "Person").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case player.Table:
		n, err := c.Player.Query().
			Where(player.ID(id)).
			CollectFields(ctx, "Player").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case playeridentifier.Table:
		n, err := c.PlayerIdentifier.Query().
			Where(playeridentifier.ID(id)).
			CollectFields(ctx, "PlayerIdentifier").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case race.Table:
		n, err := c.Race.Query().
			Where(race.ID(id)).
			CollectFields(ctx, "Race").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case session.Table:
		n, err := c.Session.Query().
			Where(session.ID(id)).
			CollectFields(ctx, "Session").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case setting.Table:
		n, err := c.Setting.Query().
			Where(setting.ID(id)).
			CollectFields(ctx, "Setting").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case sex.Table:
		n, err := c.Sex.Query().
			Where(sex.ID(id)).
			CollectFields(ctx, "Sex").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case state.Table:
		n, err := c.State.Query().
			Where(state.ID(id)).
			CollectFields(ctx, "State").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehicle.Table:
		n, err := c.Vehicle.Query().
			Where(vehicle.ID(id)).
			CollectFields(ctx, "Vehicle").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehicleclass.Table:
		n, err := c.VehicleClass.Query().
			Where(vehicleclass.ID(id)).
			CollectFields(ctx, "VehicleClass").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehiclecolor.Table:
		n, err := c.VehicleColor.Query().
			Where(vehiclecolor.ID(id)).
			CollectFields(ctx, "VehicleColor").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehiclemake.Table:
		n, err := c.VehicleMake.Query().
			Where(vehiclemake.ID(id)).
			CollectFields(ctx, "VehicleMake").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehiclemodel.Table:
		n, err := c.VehicleModel.Query().
			Where(vehiclemodel.ID(id)).
			CollectFields(ctx, "VehicleModel").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vehicleregistration.Table:
		n, err := c.VehicleRegistration.Query().
			Where(vehicleregistration.ID(id)).
			CollectFields(ctx, "VehicleRegistration").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case deathcertificate.Table:
		nodes, err := c.DeathCertificate.Query().
			Where(deathcertificate.IDIn(ids...)).
			CollectFields(ctx, "DeathCertificate").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deathcertifier.Table:
		nodes, err := c.DeathCertifier.Query().
			Where(deathcertifier.IDIn(ids...)).
			CollectFields(ctx, "DeathCertifier").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deathmanner.Table:
		nodes, err := c.DeathManner.Query().
			Where(deathmanner.IDIn(ids...)).
			CollectFields(ctx, "DeathManner").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case deathplace.Table:
		nodes, err := c.DeathPlace.Query().
			Where(deathplace.IDIn(ids...)).
			CollectFields(ctx, "DeathPlace").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case ethnicity.Table:
		nodes, err := c.Ethnicity.Query().
			Where(ethnicity.IDIn(ids...)).
			CollectFields(ctx, "Ethnicity").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case gameserver.Table:
		nodes, err := c.GameServer.Query().
			Where(gameserver.IDIn(ids...)).
			CollectFields(ctx, "GameServer").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case metadata.Table:
		nodes, err := c.Metadata.Query().
			Where(metadata.IDIn(ids...)).
			CollectFields(ctx, "Metadata").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthconnection.Table:
		nodes, err := c.OAuthConnection.Query().
			Where(oauthconnection.IDIn(ids...)).
			CollectFields(ctx, "OAuthConnection").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case person.Table:
		nodes, err := c.Person.Query().
			Where(person.IDIn(ids...)).
			CollectFields(ctx, "Person").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case player.Table:
		nodes, err := c.Player.Query().
			Where(player.IDIn(ids...)).
			CollectFields(ctx, "Player").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case playeridentifier.Table:
		nodes, err := c.PlayerIdentifier.Query().
			Where(playeridentifier.IDIn(ids...)).
			CollectFields(ctx, "PlayerIdentifier").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case race.Table:
		nodes, err := c.Race.Query().
			Where(race.IDIn(ids...)).
			CollectFields(ctx, "Race").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case session.Table:
		nodes, err := c.Session.Query().
			Where(session.IDIn(ids...)).
			CollectFields(ctx, "Session").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case setting.Table:
		nodes, err := c.Setting.Query().
			Where(setting.IDIn(ids...)).
			CollectFields(ctx, "Setting").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case sex.Table:
		nodes, err := c.Sex.Query().
			Where(sex.IDIn(ids...)).
			CollectFields(ctx, "Sex").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case state.Table:
		nodes, err := c.State.Query().
			Where(state.IDIn(ids...)).
			CollectFields(ctx, "State").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehicle.Table:
		nodes, err := c.Vehicle.Query().
			Where(vehicle.IDIn(ids...)).
			CollectFields(ctx, "Vehicle").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehicleclass.Table:
		nodes, err := c.VehicleClass.Query().
			Where(vehicleclass.IDIn(ids...)).
			CollectFields(ctx, "VehicleClass").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehiclecolor.Table:
		nodes, err := c.VehicleColor.Query().
			Where(vehiclecolor.IDIn(ids...)).
			CollectFields(ctx, "VehicleColor").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehiclemake.Table:
		nodes, err := c.VehicleMake.Query().
			Where(vehiclemake.IDIn(ids...)).
			CollectFields(ctx, "VehicleMake").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehiclemodel.Table:
		nodes, err := c.VehicleModel.Query().
			Where(vehiclemodel.IDIn(ids...)).
			CollectFields(ctx, "VehicleModel").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case vehicleregistration.Table:
		nodes, err := c.VehicleRegistration.Query().
			Where(vehicleregistration.IDIn(ids...)).
			CollectFields(ctx, "VehicleRegistration").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
