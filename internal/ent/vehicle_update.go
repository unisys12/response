// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleclass"
	"github.com/responserms/response/internal/ent/vehiclecolor"
	"github.com/responserms/response/internal/ent/vehiclemake"
	"github.com/responserms/response/internal/ent/vehiclemodel"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// VehicleUpdate is the builder for updating Vehicle entities.
type VehicleUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleMutation
}

// Where appends a list predicates to the VehicleUpdate builder.
func (vu *VehicleUpdate) Where(ps ...predicate.Vehicle) *VehicleUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetCreatedBy sets the "created_by" field.
func (vu *VehicleUpdate) SetCreatedBy(i int) *VehicleUpdate {
	vu.mutation.ResetCreatedBy()
	vu.mutation.SetCreatedBy(i)
	return vu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCreatedBy(i *int) *VehicleUpdate {
	if i != nil {
		vu.SetCreatedBy(*i)
	}
	return vu
}

// AddCreatedBy adds i to the "created_by" field.
func (vu *VehicleUpdate) AddCreatedBy(i int) *VehicleUpdate {
	vu.mutation.AddCreatedBy(i)
	return vu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vu *VehicleUpdate) ClearCreatedBy() *VehicleUpdate {
	vu.mutation.ClearCreatedBy()
	return vu
}

// SetCreatedWith sets the "created_with" field.
func (vu *VehicleUpdate) SetCreatedWith(s string) *VehicleUpdate {
	vu.mutation.SetCreatedWith(s)
	return vu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableCreatedWith(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetCreatedWith(*s)
	}
	return vu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vu *VehicleUpdate) ClearCreatedWith() *VehicleUpdate {
	vu.mutation.ClearCreatedWith()
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VehicleUpdate) SetUpdatedAt(t time.Time) *VehicleUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetUpdatedBy sets the "updated_by" field.
func (vu *VehicleUpdate) SetUpdatedBy(i int) *VehicleUpdate {
	vu.mutation.ResetUpdatedBy()
	vu.mutation.SetUpdatedBy(i)
	return vu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableUpdatedBy(i *int) *VehicleUpdate {
	if i != nil {
		vu.SetUpdatedBy(*i)
	}
	return vu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vu *VehicleUpdate) AddUpdatedBy(i int) *VehicleUpdate {
	vu.mutation.AddUpdatedBy(i)
	return vu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vu *VehicleUpdate) ClearUpdatedBy() *VehicleUpdate {
	vu.mutation.ClearUpdatedBy()
	return vu
}

// SetUpdatedWith sets the "updated_with" field.
func (vu *VehicleUpdate) SetUpdatedWith(s string) *VehicleUpdate {
	vu.mutation.SetUpdatedWith(s)
	return vu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableUpdatedWith(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetUpdatedWith(*s)
	}
	return vu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vu *VehicleUpdate) ClearUpdatedWith() *VehicleUpdate {
	vu.mutation.ClearUpdatedWith()
	return vu
}

// SetVin sets the "vin" field.
func (vu *VehicleUpdate) SetVin(s string) *VehicleUpdate {
	vu.mutation.SetVin(s)
	return vu
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableVin(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetVin(*s)
	}
	return vu
}

// ClearVin clears the value of the "vin" field.
func (vu *VehicleUpdate) ClearVin() *VehicleUpdate {
	vu.mutation.ClearVin()
	return vu
}

// SetStyle sets the "style" field.
func (vu *VehicleUpdate) SetStyle(s string) *VehicleUpdate {
	vu.mutation.SetStyle(s)
	return vu
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableStyle(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetStyle(*s)
	}
	return vu
}

// ClearStyle clears the value of the "style" field.
func (vu *VehicleUpdate) ClearStyle() *VehicleUpdate {
	vu.mutation.ClearStyle()
	return vu
}

// SetExtraFeatures sets the "extra_features" field.
func (vu *VehicleUpdate) SetExtraFeatures(t time.Time) *VehicleUpdate {
	vu.mutation.SetExtraFeatures(t)
	return vu
}

// SetNillableExtraFeatures sets the "extra_features" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillableExtraFeatures(t *time.Time) *VehicleUpdate {
	if t != nil {
		vu.SetExtraFeatures(*t)
	}
	return vu
}

// ClearExtraFeatures clears the value of the "extra_features" field.
func (vu *VehicleUpdate) ClearExtraFeatures() *VehicleUpdate {
	vu.mutation.ClearExtraFeatures()
	return vu
}

// SetPrivateNotes sets the "private_notes" field.
func (vu *VehicleUpdate) SetPrivateNotes(s string) *VehicleUpdate {
	vu.mutation.SetPrivateNotes(s)
	return vu
}

// SetNillablePrivateNotes sets the "private_notes" field if the given value is not nil.
func (vu *VehicleUpdate) SetNillablePrivateNotes(s *string) *VehicleUpdate {
	if s != nil {
		vu.SetPrivateNotes(*s)
	}
	return vu
}

// ClearPrivateNotes clears the value of the "private_notes" field.
func (vu *VehicleUpdate) ClearPrivateNotes() *VehicleUpdate {
	vu.mutation.ClearPrivateNotes()
	return vu
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vu *VehicleUpdate) SetMetadataID(id int) *VehicleUpdate {
	vu.mutation.SetMetadataID(id)
	return vu
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMetadataID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetMetadataID(*id)
	}
	return vu
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vu *VehicleUpdate) SetMetadata(m *Metadata) *VehicleUpdate {
	return vu.SetMetadataID(m.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the VehicleRegistration entity by IDs.
func (vu *VehicleUpdate) AddRegistrationIDs(ids ...int) *VehicleUpdate {
	vu.mutation.AddRegistrationIDs(ids...)
	return vu
}

// AddRegistrations adds the "registrations" edges to the VehicleRegistration entity.
func (vu *VehicleUpdate) AddRegistrations(v ...*VehicleRegistration) *VehicleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddRegistrationIDs(ids...)
}

// SetMakeID sets the "make" edge to the VehicleMake entity by ID.
func (vu *VehicleUpdate) SetMakeID(id int) *VehicleUpdate {
	vu.mutation.SetMakeID(id)
	return vu
}

// SetNillableMakeID sets the "make" edge to the VehicleMake entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMakeID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetMakeID(*id)
	}
	return vu
}

// SetMake sets the "make" edge to the VehicleMake entity.
func (vu *VehicleUpdate) SetMake(v *VehicleMake) *VehicleUpdate {
	return vu.SetMakeID(v.ID)
}

// SetModelID sets the "model" edge to the VehicleModel entity by ID.
func (vu *VehicleUpdate) SetModelID(id int) *VehicleUpdate {
	vu.mutation.SetModelID(id)
	return vu
}

// SetNillableModelID sets the "model" edge to the VehicleModel entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableModelID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetModelID(*id)
	}
	return vu
}

// SetModel sets the "model" edge to the VehicleModel entity.
func (vu *VehicleUpdate) SetModel(v *VehicleModel) *VehicleUpdate {
	return vu.SetModelID(v.ID)
}

// SetMajorColorID sets the "major_color" edge to the VehicleColor entity by ID.
func (vu *VehicleUpdate) SetMajorColorID(id int) *VehicleUpdate {
	vu.mutation.SetMajorColorID(id)
	return vu
}

// SetNillableMajorColorID sets the "major_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMajorColorID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetMajorColorID(*id)
	}
	return vu
}

// SetMajorColor sets the "major_color" edge to the VehicleColor entity.
func (vu *VehicleUpdate) SetMajorColor(v *VehicleColor) *VehicleUpdate {
	return vu.SetMajorColorID(v.ID)
}

// SetMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID.
func (vu *VehicleUpdate) SetMinorColorID(id int) *VehicleUpdate {
	vu.mutation.SetMinorColorID(id)
	return vu
}

// SetNillableMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableMinorColorID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetMinorColorID(*id)
	}
	return vu
}

// SetMinorColor sets the "minor_color" edge to the VehicleColor entity.
func (vu *VehicleUpdate) SetMinorColor(v *VehicleColor) *VehicleUpdate {
	return vu.SetMinorColorID(v.ID)
}

// SetClassID sets the "class" edge to the VehicleClass entity by ID.
func (vu *VehicleUpdate) SetClassID(id int) *VehicleUpdate {
	vu.mutation.SetClassID(id)
	return vu
}

// SetNillableClassID sets the "class" edge to the VehicleClass entity by ID if the given value is not nil.
func (vu *VehicleUpdate) SetNillableClassID(id *int) *VehicleUpdate {
	if id != nil {
		vu = vu.SetClassID(*id)
	}
	return vu
}

// SetClass sets the "class" edge to the VehicleClass entity.
func (vu *VehicleUpdate) SetClass(v *VehicleClass) *VehicleUpdate {
	return vu.SetClassID(v.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vu *VehicleUpdate) Mutation() *VehicleMutation {
	return vu.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vu *VehicleUpdate) ClearMetadata() *VehicleUpdate {
	vu.mutation.ClearMetadata()
	return vu
}

// ClearRegistrations clears all "registrations" edges to the VehicleRegistration entity.
func (vu *VehicleUpdate) ClearRegistrations() *VehicleUpdate {
	vu.mutation.ClearRegistrations()
	return vu
}

// RemoveRegistrationIDs removes the "registrations" edge to VehicleRegistration entities by IDs.
func (vu *VehicleUpdate) RemoveRegistrationIDs(ids ...int) *VehicleUpdate {
	vu.mutation.RemoveRegistrationIDs(ids...)
	return vu
}

// RemoveRegistrations removes "registrations" edges to VehicleRegistration entities.
func (vu *VehicleUpdate) RemoveRegistrations(v ...*VehicleRegistration) *VehicleUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveRegistrationIDs(ids...)
}

// ClearMake clears the "make" edge to the VehicleMake entity.
func (vu *VehicleUpdate) ClearMake() *VehicleUpdate {
	vu.mutation.ClearMake()
	return vu
}

// ClearModel clears the "model" edge to the VehicleModel entity.
func (vu *VehicleUpdate) ClearModel() *VehicleUpdate {
	vu.mutation.ClearModel()
	return vu
}

// ClearMajorColor clears the "major_color" edge to the VehicleColor entity.
func (vu *VehicleUpdate) ClearMajorColor() *VehicleUpdate {
	vu.mutation.ClearMajorColor()
	return vu
}

// ClearMinorColor clears the "minor_color" edge to the VehicleColor entity.
func (vu *VehicleUpdate) ClearMinorColor() *VehicleUpdate {
	vu.mutation.ClearMinorColor()
	return vu
}

// ClearClass clears the "class" edge to the VehicleClass entity.
func (vu *VehicleUpdate) ClearClass() *VehicleUpdate {
	vu.mutation.ClearClass()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VehicleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VehicleUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VehicleUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VehicleUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VehicleUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		if vehicle.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicle.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicle.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (vu *VehicleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if value, ok := vu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if vu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if value, ok := vu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCreatedWith,
		})
	}
	if vu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldCreatedWith,
		})
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdatedAt,
		})
	}
	if value, ok := vu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if value, ok := vu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if vu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if value, ok := vu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldUpdatedWith,
		})
	}
	if vu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldUpdatedWith,
		})
	}
	if value, ok := vu.mutation.Vin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldVin,
		})
	}
	if vu.mutation.VinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldVin,
		})
	}
	if value, ok := vu.mutation.Style(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldStyle,
		})
	}
	if vu.mutation.StyleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldStyle,
		})
	}
	if value, ok := vu.mutation.ExtraFeatures(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldExtraFeatures,
		})
	}
	if vu.mutation.ExtraFeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vehicle.FieldExtraFeatures,
		})
	}
	if value, ok := vu.mutation.PrivateNotes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldPrivateNotes,
		})
	}
	if vu.mutation.PrivateNotesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldPrivateNotes,
		})
	}
	if vu.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !vu.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemake.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemake.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MajorColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MajorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.MinorColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MinorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VehicleUpdateOne is the builder for updating a single Vehicle entity.
type VehicleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleMutation
}

// SetCreatedBy sets the "created_by" field.
func (vuo *VehicleUpdateOne) SetCreatedBy(i int) *VehicleUpdateOne {
	vuo.mutation.ResetCreatedBy()
	vuo.mutation.SetCreatedBy(i)
	return vuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCreatedBy(i *int) *VehicleUpdateOne {
	if i != nil {
		vuo.SetCreatedBy(*i)
	}
	return vuo
}

// AddCreatedBy adds i to the "created_by" field.
func (vuo *VehicleUpdateOne) AddCreatedBy(i int) *VehicleUpdateOne {
	vuo.mutation.AddCreatedBy(i)
	return vuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (vuo *VehicleUpdateOne) ClearCreatedBy() *VehicleUpdateOne {
	vuo.mutation.ClearCreatedBy()
	return vuo
}

// SetCreatedWith sets the "created_with" field.
func (vuo *VehicleUpdateOne) SetCreatedWith(s string) *VehicleUpdateOne {
	vuo.mutation.SetCreatedWith(s)
	return vuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableCreatedWith(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetCreatedWith(*s)
	}
	return vuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (vuo *VehicleUpdateOne) ClearCreatedWith() *VehicleUpdateOne {
	vuo.mutation.ClearCreatedWith()
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VehicleUpdateOne) SetUpdatedAt(t time.Time) *VehicleUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vuo *VehicleUpdateOne) SetUpdatedBy(i int) *VehicleUpdateOne {
	vuo.mutation.ResetUpdatedBy()
	vuo.mutation.SetUpdatedBy(i)
	return vuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableUpdatedBy(i *int) *VehicleUpdateOne {
	if i != nil {
		vuo.SetUpdatedBy(*i)
	}
	return vuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (vuo *VehicleUpdateOne) AddUpdatedBy(i int) *VehicleUpdateOne {
	vuo.mutation.AddUpdatedBy(i)
	return vuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (vuo *VehicleUpdateOne) ClearUpdatedBy() *VehicleUpdateOne {
	vuo.mutation.ClearUpdatedBy()
	return vuo
}

// SetUpdatedWith sets the "updated_with" field.
func (vuo *VehicleUpdateOne) SetUpdatedWith(s string) *VehicleUpdateOne {
	vuo.mutation.SetUpdatedWith(s)
	return vuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableUpdatedWith(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetUpdatedWith(*s)
	}
	return vuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (vuo *VehicleUpdateOne) ClearUpdatedWith() *VehicleUpdateOne {
	vuo.mutation.ClearUpdatedWith()
	return vuo
}

// SetVin sets the "vin" field.
func (vuo *VehicleUpdateOne) SetVin(s string) *VehicleUpdateOne {
	vuo.mutation.SetVin(s)
	return vuo
}

// SetNillableVin sets the "vin" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableVin(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetVin(*s)
	}
	return vuo
}

// ClearVin clears the value of the "vin" field.
func (vuo *VehicleUpdateOne) ClearVin() *VehicleUpdateOne {
	vuo.mutation.ClearVin()
	return vuo
}

// SetStyle sets the "style" field.
func (vuo *VehicleUpdateOne) SetStyle(s string) *VehicleUpdateOne {
	vuo.mutation.SetStyle(s)
	return vuo
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableStyle(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetStyle(*s)
	}
	return vuo
}

// ClearStyle clears the value of the "style" field.
func (vuo *VehicleUpdateOne) ClearStyle() *VehicleUpdateOne {
	vuo.mutation.ClearStyle()
	return vuo
}

// SetExtraFeatures sets the "extra_features" field.
func (vuo *VehicleUpdateOne) SetExtraFeatures(t time.Time) *VehicleUpdateOne {
	vuo.mutation.SetExtraFeatures(t)
	return vuo
}

// SetNillableExtraFeatures sets the "extra_features" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableExtraFeatures(t *time.Time) *VehicleUpdateOne {
	if t != nil {
		vuo.SetExtraFeatures(*t)
	}
	return vuo
}

// ClearExtraFeatures clears the value of the "extra_features" field.
func (vuo *VehicleUpdateOne) ClearExtraFeatures() *VehicleUpdateOne {
	vuo.mutation.ClearExtraFeatures()
	return vuo
}

// SetPrivateNotes sets the "private_notes" field.
func (vuo *VehicleUpdateOne) SetPrivateNotes(s string) *VehicleUpdateOne {
	vuo.mutation.SetPrivateNotes(s)
	return vuo
}

// SetNillablePrivateNotes sets the "private_notes" field if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillablePrivateNotes(s *string) *VehicleUpdateOne {
	if s != nil {
		vuo.SetPrivateNotes(*s)
	}
	return vuo
}

// ClearPrivateNotes clears the value of the "private_notes" field.
func (vuo *VehicleUpdateOne) ClearPrivateNotes() *VehicleUpdateOne {
	vuo.mutation.ClearPrivateNotes()
	return vuo
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vuo *VehicleUpdateOne) SetMetadataID(id int) *VehicleUpdateOne {
	vuo.mutation.SetMetadataID(id)
	return vuo
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMetadataID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetMetadataID(*id)
	}
	return vuo
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vuo *VehicleUpdateOne) SetMetadata(m *Metadata) *VehicleUpdateOne {
	return vuo.SetMetadataID(m.ID)
}

// AddRegistrationIDs adds the "registrations" edge to the VehicleRegistration entity by IDs.
func (vuo *VehicleUpdateOne) AddRegistrationIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.AddRegistrationIDs(ids...)
	return vuo
}

// AddRegistrations adds the "registrations" edges to the VehicleRegistration entity.
func (vuo *VehicleUpdateOne) AddRegistrations(v ...*VehicleRegistration) *VehicleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddRegistrationIDs(ids...)
}

// SetMakeID sets the "make" edge to the VehicleMake entity by ID.
func (vuo *VehicleUpdateOne) SetMakeID(id int) *VehicleUpdateOne {
	vuo.mutation.SetMakeID(id)
	return vuo
}

// SetNillableMakeID sets the "make" edge to the VehicleMake entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMakeID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetMakeID(*id)
	}
	return vuo
}

// SetMake sets the "make" edge to the VehicleMake entity.
func (vuo *VehicleUpdateOne) SetMake(v *VehicleMake) *VehicleUpdateOne {
	return vuo.SetMakeID(v.ID)
}

// SetModelID sets the "model" edge to the VehicleModel entity by ID.
func (vuo *VehicleUpdateOne) SetModelID(id int) *VehicleUpdateOne {
	vuo.mutation.SetModelID(id)
	return vuo
}

// SetNillableModelID sets the "model" edge to the VehicleModel entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableModelID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetModelID(*id)
	}
	return vuo
}

// SetModel sets the "model" edge to the VehicleModel entity.
func (vuo *VehicleUpdateOne) SetModel(v *VehicleModel) *VehicleUpdateOne {
	return vuo.SetModelID(v.ID)
}

// SetMajorColorID sets the "major_color" edge to the VehicleColor entity by ID.
func (vuo *VehicleUpdateOne) SetMajorColorID(id int) *VehicleUpdateOne {
	vuo.mutation.SetMajorColorID(id)
	return vuo
}

// SetNillableMajorColorID sets the "major_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMajorColorID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetMajorColorID(*id)
	}
	return vuo
}

// SetMajorColor sets the "major_color" edge to the VehicleColor entity.
func (vuo *VehicleUpdateOne) SetMajorColor(v *VehicleColor) *VehicleUpdateOne {
	return vuo.SetMajorColorID(v.ID)
}

// SetMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID.
func (vuo *VehicleUpdateOne) SetMinorColorID(id int) *VehicleUpdateOne {
	vuo.mutation.SetMinorColorID(id)
	return vuo
}

// SetNillableMinorColorID sets the "minor_color" edge to the VehicleColor entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableMinorColorID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetMinorColorID(*id)
	}
	return vuo
}

// SetMinorColor sets the "minor_color" edge to the VehicleColor entity.
func (vuo *VehicleUpdateOne) SetMinorColor(v *VehicleColor) *VehicleUpdateOne {
	return vuo.SetMinorColorID(v.ID)
}

// SetClassID sets the "class" edge to the VehicleClass entity by ID.
func (vuo *VehicleUpdateOne) SetClassID(id int) *VehicleUpdateOne {
	vuo.mutation.SetClassID(id)
	return vuo
}

// SetNillableClassID sets the "class" edge to the VehicleClass entity by ID if the given value is not nil.
func (vuo *VehicleUpdateOne) SetNillableClassID(id *int) *VehicleUpdateOne {
	if id != nil {
		vuo = vuo.SetClassID(*id)
	}
	return vuo
}

// SetClass sets the "class" edge to the VehicleClass entity.
func (vuo *VehicleUpdateOne) SetClass(v *VehicleClass) *VehicleUpdateOne {
	return vuo.SetClassID(v.ID)
}

// Mutation returns the VehicleMutation object of the builder.
func (vuo *VehicleUpdateOne) Mutation() *VehicleMutation {
	return vuo.mutation
}

// ClearMetadata clears the "metadata" edge to the Metadata entity.
func (vuo *VehicleUpdateOne) ClearMetadata() *VehicleUpdateOne {
	vuo.mutation.ClearMetadata()
	return vuo
}

// ClearRegistrations clears all "registrations" edges to the VehicleRegistration entity.
func (vuo *VehicleUpdateOne) ClearRegistrations() *VehicleUpdateOne {
	vuo.mutation.ClearRegistrations()
	return vuo
}

// RemoveRegistrationIDs removes the "registrations" edge to VehicleRegistration entities by IDs.
func (vuo *VehicleUpdateOne) RemoveRegistrationIDs(ids ...int) *VehicleUpdateOne {
	vuo.mutation.RemoveRegistrationIDs(ids...)
	return vuo
}

// RemoveRegistrations removes "registrations" edges to VehicleRegistration entities.
func (vuo *VehicleUpdateOne) RemoveRegistrations(v ...*VehicleRegistration) *VehicleUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveRegistrationIDs(ids...)
}

// ClearMake clears the "make" edge to the VehicleMake entity.
func (vuo *VehicleUpdateOne) ClearMake() *VehicleUpdateOne {
	vuo.mutation.ClearMake()
	return vuo
}

// ClearModel clears the "model" edge to the VehicleModel entity.
func (vuo *VehicleUpdateOne) ClearModel() *VehicleUpdateOne {
	vuo.mutation.ClearModel()
	return vuo
}

// ClearMajorColor clears the "major_color" edge to the VehicleColor entity.
func (vuo *VehicleUpdateOne) ClearMajorColor() *VehicleUpdateOne {
	vuo.mutation.ClearMajorColor()
	return vuo
}

// ClearMinorColor clears the "minor_color" edge to the VehicleColor entity.
func (vuo *VehicleUpdateOne) ClearMinorColor() *VehicleUpdateOne {
	vuo.mutation.ClearMinorColor()
	return vuo
}

// ClearClass clears the "class" edge to the VehicleClass entity.
func (vuo *VehicleUpdateOne) ClearClass() *VehicleUpdateOne {
	vuo.mutation.ClearClass()
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VehicleUpdateOne) Select(field string, fields ...string) *VehicleUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vehicle entity.
func (vuo *VehicleUpdateOne) Save(ctx context.Context) (*Vehicle, error) {
	var (
		err  error
		node *Vehicle
	)
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VehicleUpdateOne) SaveX(ctx context.Context) *Vehicle {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VehicleUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VehicleUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VehicleUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		if vehicle.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehicle.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehicle.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (vuo *VehicleUpdateOne) sqlSave(ctx context.Context) (_node *Vehicle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicle.Table,
			Columns: vehicle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicle.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Vehicle.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicle.FieldID)
		for _, f := range fields {
			if !vehicle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vehicle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if value, ok := vuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if vuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldCreatedBy,
		})
	}
	if value, ok := vuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldCreatedWith,
		})
	}
	if vuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldCreatedWith,
		})
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldUpdatedAt,
		})
	}
	if value, ok := vuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if value, ok := vuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if vuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: vehicle.FieldUpdatedBy,
		})
	}
	if value, ok := vuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldUpdatedWith,
		})
	}
	if vuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldUpdatedWith,
		})
	}
	if value, ok := vuo.mutation.Vin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldVin,
		})
	}
	if vuo.mutation.VinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldVin,
		})
	}
	if value, ok := vuo.mutation.Style(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldStyle,
		})
	}
	if vuo.mutation.StyleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldStyle,
		})
	}
	if value, ok := vuo.mutation.ExtraFeatures(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehicle.FieldExtraFeatures,
		})
	}
	if vuo.mutation.ExtraFeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vehicle.FieldExtraFeatures,
		})
	}
	if value, ok := vuo.mutation.PrivateNotes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehicle.FieldPrivateNotes,
		})
	}
	if vuo.mutation.PrivateNotesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vehicle.FieldPrivateNotes,
		})
	}
	if vuo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehicle.MetadataTable,
			Columns: []string{vehicle.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedRegistrationsIDs(); len(nodes) > 0 && !vuo.mutation.RegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehicle.RegistrationsTable,
			Columns: []string{vehicle.RegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MakeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemake.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MakeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MakeTable,
			Columns: []string{vehicle.MakeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemake.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ModelTable,
			Columns: []string{vehicle.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclemodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MajorColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MajorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MajorColorTable,
			Columns: []string{vehicle.MajorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.MinorColorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MinorColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.MinorColorTable,
			Columns: []string{vehicle.MinorColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehiclecolor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleclass.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vehicle.ClassTable,
			Columns: []string{vehicle.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vehicle{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
