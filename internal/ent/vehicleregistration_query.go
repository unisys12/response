// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// VehicleRegistrationQuery is the builder for querying VehicleRegistration entities.
type VehicleRegistrationQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.VehicleRegistration
	// eager-loading edges.
	withMetadata *MetadataQuery
	withState    *StateQuery
	withPerson   *PersonQuery
	withVehicle  *VehicleQuery
	withFKs      bool
	modifiers    []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VehicleRegistrationQuery builder.
func (vrq *VehicleRegistrationQuery) Where(ps ...predicate.VehicleRegistration) *VehicleRegistrationQuery {
	vrq.predicates = append(vrq.predicates, ps...)
	return vrq
}

// Limit adds a limit step to the query.
func (vrq *VehicleRegistrationQuery) Limit(limit int) *VehicleRegistrationQuery {
	vrq.limit = &limit
	return vrq
}

// Offset adds an offset step to the query.
func (vrq *VehicleRegistrationQuery) Offset(offset int) *VehicleRegistrationQuery {
	vrq.offset = &offset
	return vrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vrq *VehicleRegistrationQuery) Unique(unique bool) *VehicleRegistrationQuery {
	vrq.unique = &unique
	return vrq
}

// Order adds an order step to the query.
func (vrq *VehicleRegistrationQuery) Order(o ...OrderFunc) *VehicleRegistrationQuery {
	vrq.order = append(vrq.order, o...)
	return vrq
}

// QueryMetadata chains the current query on the "metadata" edge.
func (vrq *VehicleRegistrationQuery) QueryMetadata() *MetadataQuery {
	query := &MetadataQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, selector),
			sqlgraph.To(metadata.Table, metadata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, vehicleregistration.MetadataTable, vehicleregistration.MetadataColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryState chains the current query on the "state" edge.
func (vrq *VehicleRegistrationQuery) QueryState() *StateQuery {
	query := &StateQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, selector),
			sqlgraph.To(state.Table, state.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.StateTable, vehicleregistration.StateColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (vrq *VehicleRegistrationQuery) QueryPerson() *PersonQuery {
	query := &PersonQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.PersonTable, vehicleregistration.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVehicle chains the current query on the "vehicle" edge.
func (vrq *VehicleRegistrationQuery) QueryVehicle() *VehicleQuery {
	query := &VehicleQuery{config: vrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vehicleregistration.Table, vehicleregistration.FieldID, selector),
			sqlgraph.To(vehicle.Table, vehicle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vehicleregistration.VehicleTable, vehicleregistration.VehicleColumn),
		)
		fromU = sqlgraph.SetNeighbors(vrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VehicleRegistration entity from the query.
// Returns a *NotFoundError when no VehicleRegistration was found.
func (vrq *VehicleRegistrationQuery) First(ctx context.Context) (*VehicleRegistration, error) {
	nodes, err := vrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vehicleregistration.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) FirstX(ctx context.Context) *VehicleRegistration {
	node, err := vrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VehicleRegistration ID from the query.
// Returns a *NotFoundError when no VehicleRegistration ID was found.
func (vrq *VehicleRegistrationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vehicleregistration.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) FirstIDX(ctx context.Context) int {
	id, err := vrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VehicleRegistration entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one VehicleRegistration entity is not found.
// Returns a *NotFoundError when no VehicleRegistration entities are found.
func (vrq *VehicleRegistrationQuery) Only(ctx context.Context) (*VehicleRegistration, error) {
	nodes, err := vrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vehicleregistration.Label}
	default:
		return nil, &NotSingularError{vehicleregistration.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) OnlyX(ctx context.Context) *VehicleRegistration {
	node, err := vrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VehicleRegistration ID in the query.
// Returns a *NotSingularError when exactly one VehicleRegistration ID is not found.
// Returns a *NotFoundError when no entities are found.
func (vrq *VehicleRegistrationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = vrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = &NotSingularError{vehicleregistration.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) OnlyIDX(ctx context.Context) int {
	id, err := vrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VehicleRegistrations.
func (vrq *VehicleRegistrationQuery) All(ctx context.Context) ([]*VehicleRegistration, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return vrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) AllX(ctx context.Context) []*VehicleRegistration {
	nodes, err := vrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VehicleRegistration IDs.
func (vrq *VehicleRegistrationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := vrq.Select(vehicleregistration.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) IDsX(ctx context.Context) []int {
	ids, err := vrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vrq *VehicleRegistrationQuery) Count(ctx context.Context) (int, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return vrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) CountX(ctx context.Context) int {
	count, err := vrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vrq *VehicleRegistrationQuery) Exist(ctx context.Context) (bool, error) {
	if err := vrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return vrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (vrq *VehicleRegistrationQuery) ExistX(ctx context.Context) bool {
	exist, err := vrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VehicleRegistrationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vrq *VehicleRegistrationQuery) Clone() *VehicleRegistrationQuery {
	if vrq == nil {
		return nil
	}
	return &VehicleRegistrationQuery{
		config:       vrq.config,
		limit:        vrq.limit,
		offset:       vrq.offset,
		order:        append([]OrderFunc{}, vrq.order...),
		predicates:   append([]predicate.VehicleRegistration{}, vrq.predicates...),
		withMetadata: vrq.withMetadata.Clone(),
		withState:    vrq.withState.Clone(),
		withPerson:   vrq.withPerson.Clone(),
		withVehicle:  vrq.withVehicle.Clone(),
		// clone intermediate query.
		sql:  vrq.sql.Clone(),
		path: vrq.path,
	}
}

// WithMetadata tells the query-builder to eager-load the nodes that are connected to
// the "metadata" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VehicleRegistrationQuery) WithMetadata(opts ...func(*MetadataQuery)) *VehicleRegistrationQuery {
	query := &MetadataQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withMetadata = query
	return vrq
}

// WithState tells the query-builder to eager-load the nodes that are connected to
// the "state" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VehicleRegistrationQuery) WithState(opts ...func(*StateQuery)) *VehicleRegistrationQuery {
	query := &StateQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withState = query
	return vrq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VehicleRegistrationQuery) WithPerson(opts ...func(*PersonQuery)) *VehicleRegistrationQuery {
	query := &PersonQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withPerson = query
	return vrq
}

// WithVehicle tells the query-builder to eager-load the nodes that are connected to
// the "vehicle" edge. The optional arguments are used to configure the query builder of the edge.
func (vrq *VehicleRegistrationQuery) WithVehicle(opts ...func(*VehicleQuery)) *VehicleRegistrationQuery {
	query := &VehicleQuery{config: vrq.config}
	for _, opt := range opts {
		opt(query)
	}
	vrq.withVehicle = query
	return vrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VehicleRegistration.Query().
//		GroupBy(vehicleregistration.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (vrq *VehicleRegistrationQuery) GroupBy(field string, fields ...string) *VehicleRegistrationGroupBy {
	group := &VehicleRegistrationGroupBy{config: vrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := vrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return vrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.VehicleRegistration.Query().
//		Select(vehicleregistration.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (vrq *VehicleRegistrationQuery) Select(fields ...string) *VehicleRegistrationSelect {
	vrq.fields = append(vrq.fields, fields...)
	return &VehicleRegistrationSelect{VehicleRegistrationQuery: vrq}
}

func (vrq *VehicleRegistrationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range vrq.fields {
		if !vehicleregistration.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vrq.path != nil {
		prev, err := vrq.path(ctx)
		if err != nil {
			return err
		}
		vrq.sql = prev
	}
	return nil
}

func (vrq *VehicleRegistrationQuery) sqlAll(ctx context.Context) ([]*VehicleRegistration, error) {
	var (
		nodes       = []*VehicleRegistration{}
		withFKs     = vrq.withFKs
		_spec       = vrq.querySpec()
		loadedTypes = [4]bool{
			vrq.withMetadata != nil,
			vrq.withState != nil,
			vrq.withPerson != nil,
			vrq.withVehicle != nil,
		}
	)
	if vrq.withMetadata != nil || vrq.withState != nil || vrq.withPerson != nil || vrq.withVehicle != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleregistration.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &VehicleRegistration{config: vrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(vrq.modifiers) > 0 {
		_spec.Modifiers = vrq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, vrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := vrq.withMetadata; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VehicleRegistration)
		for i := range nodes {
			if nodes[i].vehicle_registration_metadata == nil {
				continue
			}
			fk := *nodes[i].vehicle_registration_metadata
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(metadata.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vehicle_registration_metadata" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Metadata = n
			}
		}
	}

	if query := vrq.withState; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VehicleRegistration)
		for i := range nodes {
			if nodes[i].state_vehicle_registrations == nil {
				continue
			}
			fk := *nodes[i].state_vehicle_registrations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(state.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "state_vehicle_registrations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.State = n
			}
		}
	}

	if query := vrq.withPerson; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VehicleRegistration)
		for i := range nodes {
			if nodes[i].person_vehicle_registrations == nil {
				continue
			}
			fk := *nodes[i].person_vehicle_registrations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(person.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "person_vehicle_registrations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Person = n
			}
		}
	}

	if query := vrq.withVehicle; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*VehicleRegistration)
		for i := range nodes {
			if nodes[i].vehicle_registrations == nil {
				continue
			}
			fk := *nodes[i].vehicle_registrations
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vehicle.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vehicle_registrations" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Vehicle = n
			}
		}
	}

	return nodes, nil
}

func (vrq *VehicleRegistrationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vrq.querySpec()
	if len(vrq.modifiers) > 0 {
		_spec.Modifiers = vrq.modifiers
	}
	return sqlgraph.CountNodes(ctx, vrq.driver, _spec)
}

func (vrq *VehicleRegistrationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := vrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (vrq *VehicleRegistrationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vehicleregistration.Table,
			Columns: vehicleregistration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehicleregistration.FieldID,
			},
		},
		From:   vrq.sql,
		Unique: true,
	}
	if unique := vrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := vrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleregistration.FieldID)
		for i := range fields {
			if fields[i] != vehicleregistration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vrq *VehicleRegistrationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vrq.driver.Dialect())
	t1 := builder.Table(vehicleregistration.Table)
	columns := vrq.fields
	if len(columns) == 0 {
		columns = vehicleregistration.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vrq.sql != nil {
		selector = vrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, m := range vrq.modifiers {
		m(selector)
	}
	for _, p := range vrq.predicates {
		p(selector)
	}
	for _, p := range vrq.order {
		p(selector)
	}
	if offset := vrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (vrq *VehicleRegistrationQuery) ForUpdate(opts ...sql.LockOption) *VehicleRegistrationQuery {
	if vrq.driver.Dialect() == dialect.Postgres {
		vrq.Unique(false)
	}
	vrq.modifiers = append(vrq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return vrq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (vrq *VehicleRegistrationQuery) ForShare(opts ...sql.LockOption) *VehicleRegistrationQuery {
	if vrq.driver.Dialect() == dialect.Postgres {
		vrq.Unique(false)
	}
	vrq.modifiers = append(vrq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return vrq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vrq *VehicleRegistrationQuery) Modify(modifiers ...func(s *sql.Selector)) *VehicleRegistrationSelect {
	vrq.modifiers = append(vrq.modifiers, modifiers...)
	return vrq.Select()
}

// VehicleRegistrationGroupBy is the group-by builder for VehicleRegistration entities.
type VehicleRegistrationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vrgb *VehicleRegistrationGroupBy) Aggregate(fns ...AggregateFunc) *VehicleRegistrationGroupBy {
	vrgb.fns = append(vrgb.fns, fns...)
	return vrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (vrgb *VehicleRegistrationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := vrgb.path(ctx)
	if err != nil {
		return err
	}
	vrgb.sql = query
	return vrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := vrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) StringsX(ctx context.Context) []string {
	v, err := vrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) StringX(ctx context.Context) string {
	v, err := vrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) IntsX(ctx context.Context) []int {
	v, err := vrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) IntX(ctx context.Context) int {
	v, err := vrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := vrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := vrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(vrgb.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := vrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := vrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vrgb *VehicleRegistrationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vrgb *VehicleRegistrationGroupBy) BoolX(ctx context.Context) bool {
	v, err := vrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vrgb *VehicleRegistrationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range vrgb.fields {
		if !vehicleregistration.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vrgb *VehicleRegistrationGroupBy) sqlQuery() *sql.Selector {
	selector := vrgb.sql.Select()
	aggregation := make([]string, 0, len(vrgb.fns))
	for _, fn := range vrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vrgb.fields)+len(vrgb.fns))
		for _, f := range vrgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vrgb.fields...)...)
}

// VehicleRegistrationSelect is the builder for selecting fields of VehicleRegistration entities.
type VehicleRegistrationSelect struct {
	*VehicleRegistrationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (vrs *VehicleRegistrationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := vrs.prepareQuery(ctx); err != nil {
		return err
	}
	vrs.sql = vrs.VehicleRegistrationQuery.sqlQuery(ctx)
	return vrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := vrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) StringsX(ctx context.Context) []string {
	v, err := vrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) StringX(ctx context.Context) string {
	v, err := vrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) IntsX(ctx context.Context) []int {
	v, err := vrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) IntX(ctx context.Context) int {
	v, err := vrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := vrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) Float64X(ctx context.Context) float64 {
	v, err := vrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(vrs.fields) > 1 {
		return nil, errors.New("ent: VehicleRegistrationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := vrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) BoolsX(ctx context.Context) []bool {
	v, err := vrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (vrs *VehicleRegistrationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vehicleregistration.Label}
	default:
		err = fmt.Errorf("ent: VehicleRegistrationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vrs *VehicleRegistrationSelect) BoolX(ctx context.Context) bool {
	v, err := vrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vrs *VehicleRegistrationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vrs.sql.Query()
	if err := vrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (vrs *VehicleRegistrationSelect) Modify(modifiers ...func(s *sql.Selector)) *VehicleRegistrationSelect {
	vrs.modifiers = append(vrs.modifiers, modifiers...)
	return vrs
}
