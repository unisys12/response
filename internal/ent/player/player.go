// Code generated by entc, DO NOT EDIT.

package player

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedWith holds the string denoting the created_with field in the database.
	FieldCreatedWith = "created_with"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedWith holds the string denoting the updated_with field in the database.
	FieldUpdatedWith = "updated_with"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeServers holds the string denoting the servers edge name in mutations.
	EdgeServers = "servers"
	// EdgeIdentifiers holds the string denoting the identifiers edge name in mutations.
	EdgeIdentifiers = "identifiers"
	// Table holds the table name of the player in the database.
	Table = "players"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "players"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "player_metadata"
	// ServersTable is the table that holds the servers relation/edge. The primary key declared below.
	ServersTable = "player_servers"
	// ServersInverseTable is the table name for the GameServer entity.
	// It exists in this package in order to avoid circular dependency with the "gameserver" package.
	ServersInverseTable = "game_servers"
	// IdentifiersTable is the table that holds the identifiers relation/edge.
	IdentifiersTable = "player_identifiers"
	// IdentifiersInverseTable is the table name for the PlayerIdentifier entity.
	// It exists in this package in order to avoid circular dependency with the "playeridentifier" package.
	IdentifiersInverseTable = "player_identifiers"
	// IdentifiersColumn is the table column denoting the identifiers relation/edge.
	IdentifiersColumn = "player_identifiers"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldCreatedWith,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldUpdatedWith,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_metadata",
}

var (
	// ServersPrimaryKey and ServersColumn2 are the table columns denoting the
	// primary key for the servers relation (M2M).
	ServersPrimaryKey = []string{"player_id", "game_server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/responserms/response/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
