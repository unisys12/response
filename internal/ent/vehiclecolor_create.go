// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/vehicle"
	"github.com/responserms/response/internal/ent/vehiclecolor"
)

// VehicleColorCreate is the builder for creating a VehicleColor entity.
type VehicleColorCreate struct {
	config
	mutation *VehicleColorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vcc *VehicleColorCreate) SetCreatedAt(t time.Time) *VehicleColorCreate {
	vcc.mutation.SetCreatedAt(t)
	return vcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableCreatedAt(t *time.Time) *VehicleColorCreate {
	if t != nil {
		vcc.SetCreatedAt(*t)
	}
	return vcc
}

// SetCreatedBy sets the "created_by" field.
func (vcc *VehicleColorCreate) SetCreatedBy(i int) *VehicleColorCreate {
	vcc.mutation.SetCreatedBy(i)
	return vcc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableCreatedBy(i *int) *VehicleColorCreate {
	if i != nil {
		vcc.SetCreatedBy(*i)
	}
	return vcc
}

// SetCreatedWith sets the "created_with" field.
func (vcc *VehicleColorCreate) SetCreatedWith(s string) *VehicleColorCreate {
	vcc.mutation.SetCreatedWith(s)
	return vcc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableCreatedWith(s *string) *VehicleColorCreate {
	if s != nil {
		vcc.SetCreatedWith(*s)
	}
	return vcc
}

// SetUpdatedAt sets the "updated_at" field.
func (vcc *VehicleColorCreate) SetUpdatedAt(t time.Time) *VehicleColorCreate {
	vcc.mutation.SetUpdatedAt(t)
	return vcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableUpdatedAt(t *time.Time) *VehicleColorCreate {
	if t != nil {
		vcc.SetUpdatedAt(*t)
	}
	return vcc
}

// SetUpdatedBy sets the "updated_by" field.
func (vcc *VehicleColorCreate) SetUpdatedBy(i int) *VehicleColorCreate {
	vcc.mutation.SetUpdatedBy(i)
	return vcc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableUpdatedBy(i *int) *VehicleColorCreate {
	if i != nil {
		vcc.SetUpdatedBy(*i)
	}
	return vcc
}

// SetUpdatedWith sets the "updated_with" field.
func (vcc *VehicleColorCreate) SetUpdatedWith(s string) *VehicleColorCreate {
	vcc.mutation.SetUpdatedWith(s)
	return vcc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableUpdatedWith(s *string) *VehicleColorCreate {
	if s != nil {
		vcc.SetUpdatedWith(*s)
	}
	return vcc
}

// SetShort sets the "short" field.
func (vcc *VehicleColorCreate) SetShort(s string) *VehicleColorCreate {
	vcc.mutation.SetShort(s)
	return vcc
}

// SetTitle sets the "title" field.
func (vcc *VehicleColorCreate) SetTitle(s string) *VehicleColorCreate {
	vcc.mutation.SetTitle(s)
	return vcc
}

// SetDescription sets the "description" field.
func (vcc *VehicleColorCreate) SetDescription(s string) *VehicleColorCreate {
	vcc.mutation.SetDescription(s)
	return vcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableDescription(s *string) *VehicleColorCreate {
	if s != nil {
		vcc.SetDescription(*s)
	}
	return vcc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (vcc *VehicleColorCreate) SetMetadataID(id int) *VehicleColorCreate {
	vcc.mutation.SetMetadataID(id)
	return vcc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (vcc *VehicleColorCreate) SetNillableMetadataID(id *int) *VehicleColorCreate {
	if id != nil {
		vcc = vcc.SetMetadataID(*id)
	}
	return vcc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (vcc *VehicleColorCreate) SetMetadata(m *Metadata) *VehicleColorCreate {
	return vcc.SetMetadataID(m.ID)
}

// AddVehiclesMajorIDs adds the "vehicles_major" edge to the Vehicle entity by IDs.
func (vcc *VehicleColorCreate) AddVehiclesMajorIDs(ids ...int) *VehicleColorCreate {
	vcc.mutation.AddVehiclesMajorIDs(ids...)
	return vcc
}

// AddVehiclesMajor adds the "vehicles_major" edges to the Vehicle entity.
func (vcc *VehicleColorCreate) AddVehiclesMajor(v ...*Vehicle) *VehicleColorCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcc.AddVehiclesMajorIDs(ids...)
}

// AddVehiclesMinorIDs adds the "vehicles_minor" edge to the Vehicle entity by IDs.
func (vcc *VehicleColorCreate) AddVehiclesMinorIDs(ids ...int) *VehicleColorCreate {
	vcc.mutation.AddVehiclesMinorIDs(ids...)
	return vcc
}

// AddVehiclesMinor adds the "vehicles_minor" edges to the Vehicle entity.
func (vcc *VehicleColorCreate) AddVehiclesMinor(v ...*Vehicle) *VehicleColorCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vcc.AddVehiclesMinorIDs(ids...)
}

// Mutation returns the VehicleColorMutation object of the builder.
func (vcc *VehicleColorCreate) Mutation() *VehicleColorMutation {
	return vcc.mutation
}

// Save creates the VehicleColor in the database.
func (vcc *VehicleColorCreate) Save(ctx context.Context) (*VehicleColor, error) {
	var (
		err  error
		node *VehicleColor
	)
	if err := vcc.defaults(); err != nil {
		return nil, err
	}
	if len(vcc.hooks) == 0 {
		if err = vcc.check(); err != nil {
			return nil, err
		}
		node, err = vcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VehicleColorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vcc.check(); err != nil {
				return nil, err
			}
			vcc.mutation = mutation
			if node, err = vcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vcc.hooks) - 1; i >= 0; i-- {
			if vcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vcc *VehicleColorCreate) SaveX(ctx context.Context) *VehicleColor {
	v, err := vcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcc *VehicleColorCreate) Exec(ctx context.Context) error {
	_, err := vcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcc *VehicleColorCreate) ExecX(ctx context.Context) {
	if err := vcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcc *VehicleColorCreate) defaults() error {
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		if vehiclecolor.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclecolor.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclecolor.DefaultCreatedAt()
		vcc.mutation.SetCreatedAt(v)
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		if vehiclecolor.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized vehiclecolor.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := vehiclecolor.DefaultUpdatedAt()
		vcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vcc *VehicleColorCreate) check() error {
	if _, ok := vcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := vcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := vcc.mutation.Short(); !ok {
		return &ValidationError{Name: "short", err: errors.New(`ent: missing required field "short"`)}
	}
	if v, ok := vcc.mutation.Short(); ok {
		if err := vehiclecolor.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf(`ent: validator failed for field "short": %w`, err)}
		}
	}
	if _, ok := vcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := vcc.mutation.Title(); ok {
		if err := vehiclecolor.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if v, ok := vcc.mutation.Description(); ok {
		if err := vehiclecolor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "description": %w`, err)}
		}
	}
	return nil
}

func (vcc *VehicleColorCreate) sqlSave(ctx context.Context) (*VehicleColor, error) {
	_node, _spec := vcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vcc *VehicleColorCreate) createSpec() (*VehicleColor, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleColor{config: vcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vehiclecolor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vehiclecolor.FieldID,
			},
		}
	)
	_spec.OnConflict = vcc.conflict
	if value, ok := vcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclecolor.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vcc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := vcc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := vcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vcc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := vcc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := vcc.mutation.Short(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldShort,
		})
		_node.Short = value
	}
	if value, ok := vcc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := vcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vehiclecolor.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := vcc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vehiclecolor.MetadataTable,
			Columns: []string{vehiclecolor.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vehicle_color_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vcc.mutation.VehiclesMajorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMajorTable,
			Columns: []string{vehiclecolor.VehiclesMajorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vcc.mutation.VehiclesMinorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vehiclecolor.VehiclesMinorTable,
			Columns: []string{vehiclecolor.VehiclesMinorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleColor.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleColorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vcc *VehicleColorCreate) OnConflict(opts ...sql.ConflictOption) *VehicleColorUpsertOne {
	vcc.conflict = opts
	return &VehicleColorUpsertOne{
		create: vcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vcc *VehicleColorCreate) OnConflictColumns(columns ...string) *VehicleColorUpsertOne {
	vcc.conflict = append(vcc.conflict, sql.ConflictColumns(columns...))
	return &VehicleColorUpsertOne{
		create: vcc,
	}
}

type (
	// VehicleColorUpsertOne is the builder for "upsert"-ing
	//  one VehicleColor node.
	VehicleColorUpsertOne struct {
		create *VehicleColorCreate
	}

	// VehicleColorUpsert is the "OnConflict" setter.
	VehicleColorUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *VehicleColorUpsert) SetCreatedAt(v time.Time) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateCreatedAt() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleColorUpsert) SetCreatedBy(v int) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateCreatedBy() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleColorUpsert) ClearCreatedBy() *VehicleColorUpsert {
	u.SetNull(vehiclecolor.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleColorUpsert) SetCreatedWith(v string) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateCreatedWith() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleColorUpsert) ClearCreatedWith() *VehicleColorUpsert {
	u.SetNull(vehiclecolor.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleColorUpsert) SetUpdatedAt(v time.Time) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateUpdatedAt() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleColorUpsert) SetUpdatedBy(v int) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateUpdatedBy() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleColorUpsert) ClearUpdatedBy() *VehicleColorUpsert {
	u.SetNull(vehiclecolor.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleColorUpsert) SetUpdatedWith(v string) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateUpdatedWith() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleColorUpsert) ClearUpdatedWith() *VehicleColorUpsert {
	u.SetNull(vehiclecolor.FieldUpdatedWith)
	return u
}

// SetShort sets the "short" field.
func (u *VehicleColorUpsert) SetShort(v string) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldShort, v)
	return u
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateShort() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldShort)
	return u
}

// SetTitle sets the "title" field.
func (u *VehicleColorUpsert) SetTitle(v string) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateTitle() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *VehicleColorUpsert) SetDescription(v string) *VehicleColorUpsert {
	u.Set(vehiclecolor.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleColorUpsert) UpdateDescription() *VehicleColorUpsert {
	u.SetExcluded(vehiclecolor.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleColorUpsert) ClearDescription() *VehicleColorUpsert {
	u.SetNull(vehiclecolor.FieldDescription)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.VehicleColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleColorUpsertOne) UpdateNewValues() *VehicleColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.VehicleColor.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VehicleColorUpsertOne) Ignore() *VehicleColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleColorUpsertOne) DoNothing() *VehicleColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleColorCreate.OnConflict
// documentation for more info.
func (u *VehicleColorUpsertOne) Update(set func(*VehicleColorUpsert)) *VehicleColorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleColorUpsertOne) SetCreatedAt(v time.Time) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateCreatedAt() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleColorUpsertOne) SetCreatedBy(v int) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateCreatedBy() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleColorUpsertOne) ClearCreatedBy() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleColorUpsertOne) SetCreatedWith(v string) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateCreatedWith() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleColorUpsertOne) ClearCreatedWith() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleColorUpsertOne) SetUpdatedAt(v time.Time) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateUpdatedAt() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleColorUpsertOne) SetUpdatedBy(v int) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateUpdatedBy() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleColorUpsertOne) ClearUpdatedBy() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleColorUpsertOne) SetUpdatedWith(v string) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateUpdatedWith() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleColorUpsertOne) ClearUpdatedWith() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *VehicleColorUpsertOne) SetShort(v string) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateShort() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *VehicleColorUpsertOne) SetTitle(v string) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateTitle() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VehicleColorUpsertOne) SetDescription(v string) *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleColorUpsertOne) UpdateDescription() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleColorUpsertOne) ClearDescription() *VehicleColorUpsertOne {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VehicleColorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleColorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleColorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VehicleColorUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VehicleColorUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VehicleColorCreateBulk is the builder for creating many VehicleColor entities in bulk.
type VehicleColorCreateBulk struct {
	config
	builders []*VehicleColorCreate
	conflict []sql.ConflictOption
}

// Save creates the VehicleColor entities in the database.
func (vccb *VehicleColorCreateBulk) Save(ctx context.Context) ([]*VehicleColor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vccb.builders))
	nodes := make([]*VehicleColor, len(vccb.builders))
	mutators := make([]Mutator, len(vccb.builders))
	for i := range vccb.builders {
		func(i int, root context.Context) {
			builder := vccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleColorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vccb *VehicleColorCreateBulk) SaveX(ctx context.Context) []*VehicleColor {
	v, err := vccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vccb *VehicleColorCreateBulk) Exec(ctx context.Context) error {
	_, err := vccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vccb *VehicleColorCreateBulk) ExecX(ctx context.Context) {
	if err := vccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VehicleColor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VehicleColorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (vccb *VehicleColorCreateBulk) OnConflict(opts ...sql.ConflictOption) *VehicleColorUpsertBulk {
	vccb.conflict = opts
	return &VehicleColorUpsertBulk{
		create: vccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VehicleColor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vccb *VehicleColorCreateBulk) OnConflictColumns(columns ...string) *VehicleColorUpsertBulk {
	vccb.conflict = append(vccb.conflict, sql.ConflictColumns(columns...))
	return &VehicleColorUpsertBulk{
		create: vccb,
	}
}

// VehicleColorUpsertBulk is the builder for "upsert"-ing
// a bulk of VehicleColor nodes.
type VehicleColorUpsertBulk struct {
	create *VehicleColorCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VehicleColor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *VehicleColorUpsertBulk) UpdateNewValues() *VehicleColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VehicleColor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *VehicleColorUpsertBulk) Ignore() *VehicleColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VehicleColorUpsertBulk) DoNothing() *VehicleColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VehicleColorCreateBulk.OnConflict
// documentation for more info.
func (u *VehicleColorUpsertBulk) Update(set func(*VehicleColorUpsert)) *VehicleColorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VehicleColorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VehicleColorUpsertBulk) SetCreatedAt(v time.Time) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateCreatedAt() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *VehicleColorUpsertBulk) SetCreatedBy(v int) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateCreatedBy() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *VehicleColorUpsertBulk) ClearCreatedBy() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *VehicleColorUpsertBulk) SetCreatedWith(v string) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateCreatedWith() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *VehicleColorUpsertBulk) ClearCreatedWith() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VehicleColorUpsertBulk) SetUpdatedAt(v time.Time) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateUpdatedAt() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *VehicleColorUpsertBulk) SetUpdatedBy(v int) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateUpdatedBy() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *VehicleColorUpsertBulk) ClearUpdatedBy() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *VehicleColorUpsertBulk) SetUpdatedWith(v string) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateUpdatedWith() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *VehicleColorUpsertBulk) ClearUpdatedWith() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetShort sets the "short" field.
func (u *VehicleColorUpsertBulk) SetShort(v string) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetShort(v)
	})
}

// UpdateShort sets the "short" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateShort() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateShort()
	})
}

// SetTitle sets the "title" field.
func (u *VehicleColorUpsertBulk) SetTitle(v string) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateTitle() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *VehicleColorUpsertBulk) SetDescription(v string) *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *VehicleColorUpsertBulk) UpdateDescription() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *VehicleColorUpsertBulk) ClearDescription() *VehicleColorUpsertBulk {
	return u.Update(func(s *VehicleColorUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *VehicleColorUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VehicleColorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VehicleColorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VehicleColorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
