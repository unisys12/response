// Code generated by entc, DO NOT EDIT.

package vehicle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/responserms/response/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedWith applies equality check predicate on the "created_with" field. It's identical to CreatedWithEQ.
func CreatedWith(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedWith applies equality check predicate on the "updated_with" field. It's identical to UpdatedWithEQ.
func UpdatedWith(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// Vin applies equality check predicate on the "vin" field. It's identical to VinEQ.
func Vin(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVin), v))
	})
}

// Style applies equality check predicate on the "style" field. It's identical to StyleEQ.
func Style(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyle), v))
	})
}

// ExtraFeatures applies equality check predicate on the "extra_features" field. It's identical to ExtraFeaturesEQ.
func ExtraFeatures(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtraFeatures), v))
	})
}

// PrivateNotes applies equality check predicate on the "private_notes" field. It's identical to PrivateNotesEQ.
func PrivateNotes(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateNotes), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedWithEQ applies the EQ predicate on the "created_with" field.
func CreatedWithEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithNEQ applies the NEQ predicate on the "created_with" field.
func CreatedWithNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIn applies the In predicate on the "created_with" field.
func CreatedWithIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithNotIn applies the NotIn predicate on the "created_with" field.
func CreatedWithNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithGT applies the GT predicate on the "created_with" field.
func CreatedWithGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithGTE applies the GTE predicate on the "created_with" field.
func CreatedWithGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLT applies the LT predicate on the "created_with" field.
func CreatedWithLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLTE applies the LTE predicate on the "created_with" field.
func CreatedWithLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContains applies the Contains predicate on the "created_with" field.
func CreatedWithContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasPrefix applies the HasPrefix predicate on the "created_with" field.
func CreatedWithHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasSuffix applies the HasSuffix predicate on the "created_with" field.
func CreatedWithHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIsNil applies the IsNil predicate on the "created_with" field.
func CreatedWithIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithNotNil applies the NotNil predicate on the "created_with" field.
func CreatedWithNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithEqualFold applies the EqualFold predicate on the "created_with" field.
func CreatedWithEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContainsFold applies the ContainsFold predicate on the "created_with" field.
func CreatedWithContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedWithEQ applies the EQ predicate on the "updated_with" field.
func UpdatedWithEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithNEQ applies the NEQ predicate on the "updated_with" field.
func UpdatedWithNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIn applies the In predicate on the "updated_with" field.
func UpdatedWithIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithNotIn applies the NotIn predicate on the "updated_with" field.
func UpdatedWithNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithGT applies the GT predicate on the "updated_with" field.
func UpdatedWithGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithGTE applies the GTE predicate on the "updated_with" field.
func UpdatedWithGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLT applies the LT predicate on the "updated_with" field.
func UpdatedWithLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLTE applies the LTE predicate on the "updated_with" field.
func UpdatedWithLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContains applies the Contains predicate on the "updated_with" field.
func UpdatedWithContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasPrefix applies the HasPrefix predicate on the "updated_with" field.
func UpdatedWithHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasSuffix applies the HasSuffix predicate on the "updated_with" field.
func UpdatedWithHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIsNil applies the IsNil predicate on the "updated_with" field.
func UpdatedWithIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithNotNil applies the NotNil predicate on the "updated_with" field.
func UpdatedWithNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithEqualFold applies the EqualFold predicate on the "updated_with" field.
func UpdatedWithEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContainsFold applies the ContainsFold predicate on the "updated_with" field.
func UpdatedWithContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedWith), v))
	})
}

// VinEQ applies the EQ predicate on the "vin" field.
func VinEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVin), v))
	})
}

// VinNEQ applies the NEQ predicate on the "vin" field.
func VinNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVin), v))
	})
}

// VinIn applies the In predicate on the "vin" field.
func VinIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVin), v...))
	})
}

// VinNotIn applies the NotIn predicate on the "vin" field.
func VinNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVin), v...))
	})
}

// VinGT applies the GT predicate on the "vin" field.
func VinGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVin), v))
	})
}

// VinGTE applies the GTE predicate on the "vin" field.
func VinGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVin), v))
	})
}

// VinLT applies the LT predicate on the "vin" field.
func VinLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVin), v))
	})
}

// VinLTE applies the LTE predicate on the "vin" field.
func VinLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVin), v))
	})
}

// VinContains applies the Contains predicate on the "vin" field.
func VinContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVin), v))
	})
}

// VinHasPrefix applies the HasPrefix predicate on the "vin" field.
func VinHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVin), v))
	})
}

// VinHasSuffix applies the HasSuffix predicate on the "vin" field.
func VinHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVin), v))
	})
}

// VinIsNil applies the IsNil predicate on the "vin" field.
func VinIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVin)))
	})
}

// VinNotNil applies the NotNil predicate on the "vin" field.
func VinNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVin)))
	})
}

// VinEqualFold applies the EqualFold predicate on the "vin" field.
func VinEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVin), v))
	})
}

// VinContainsFold applies the ContainsFold predicate on the "vin" field.
func VinContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVin), v))
	})
}

// StyleEQ applies the EQ predicate on the "style" field.
func StyleEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStyle), v))
	})
}

// StyleNEQ applies the NEQ predicate on the "style" field.
func StyleNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStyle), v))
	})
}

// StyleIn applies the In predicate on the "style" field.
func StyleIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStyle), v...))
	})
}

// StyleNotIn applies the NotIn predicate on the "style" field.
func StyleNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStyle), v...))
	})
}

// StyleGT applies the GT predicate on the "style" field.
func StyleGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStyle), v))
	})
}

// StyleGTE applies the GTE predicate on the "style" field.
func StyleGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStyle), v))
	})
}

// StyleLT applies the LT predicate on the "style" field.
func StyleLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStyle), v))
	})
}

// StyleLTE applies the LTE predicate on the "style" field.
func StyleLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStyle), v))
	})
}

// StyleContains applies the Contains predicate on the "style" field.
func StyleContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStyle), v))
	})
}

// StyleHasPrefix applies the HasPrefix predicate on the "style" field.
func StyleHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStyle), v))
	})
}

// StyleHasSuffix applies the HasSuffix predicate on the "style" field.
func StyleHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStyle), v))
	})
}

// StyleIsNil applies the IsNil predicate on the "style" field.
func StyleIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStyle)))
	})
}

// StyleNotNil applies the NotNil predicate on the "style" field.
func StyleNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStyle)))
	})
}

// StyleEqualFold applies the EqualFold predicate on the "style" field.
func StyleEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStyle), v))
	})
}

// StyleContainsFold applies the ContainsFold predicate on the "style" field.
func StyleContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStyle), v))
	})
}

// ExtraFeaturesEQ applies the EQ predicate on the "extra_features" field.
func ExtraFeaturesEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesNEQ applies the NEQ predicate on the "extra_features" field.
func ExtraFeaturesNEQ(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesIn applies the In predicate on the "extra_features" field.
func ExtraFeaturesIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExtraFeatures), v...))
	})
}

// ExtraFeaturesNotIn applies the NotIn predicate on the "extra_features" field.
func ExtraFeaturesNotIn(vs ...time.Time) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExtraFeatures), v...))
	})
}

// ExtraFeaturesGT applies the GT predicate on the "extra_features" field.
func ExtraFeaturesGT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesGTE applies the GTE predicate on the "extra_features" field.
func ExtraFeaturesGTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesLT applies the LT predicate on the "extra_features" field.
func ExtraFeaturesLT(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesLTE applies the LTE predicate on the "extra_features" field.
func ExtraFeaturesLTE(v time.Time) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtraFeatures), v))
	})
}

// ExtraFeaturesIsNil applies the IsNil predicate on the "extra_features" field.
func ExtraFeaturesIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtraFeatures)))
	})
}

// ExtraFeaturesNotNil applies the NotNil predicate on the "extra_features" field.
func ExtraFeaturesNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtraFeatures)))
	})
}

// PrivateNotesEQ applies the EQ predicate on the "private_notes" field.
func PrivateNotesEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesNEQ applies the NEQ predicate on the "private_notes" field.
func PrivateNotesNEQ(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesIn applies the In predicate on the "private_notes" field.
func PrivateNotesIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivateNotes), v...))
	})
}

// PrivateNotesNotIn applies the NotIn predicate on the "private_notes" field.
func PrivateNotesNotIn(vs ...string) predicate.Vehicle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vehicle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivateNotes), v...))
	})
}

// PrivateNotesGT applies the GT predicate on the "private_notes" field.
func PrivateNotesGT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesGTE applies the GTE predicate on the "private_notes" field.
func PrivateNotesGTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesLT applies the LT predicate on the "private_notes" field.
func PrivateNotesLT(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesLTE applies the LTE predicate on the "private_notes" field.
func PrivateNotesLTE(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesContains applies the Contains predicate on the "private_notes" field.
func PrivateNotesContains(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesHasPrefix applies the HasPrefix predicate on the "private_notes" field.
func PrivateNotesHasPrefix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesHasSuffix applies the HasSuffix predicate on the "private_notes" field.
func PrivateNotesHasSuffix(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesIsNil applies the IsNil predicate on the "private_notes" field.
func PrivateNotesIsNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrivateNotes)))
	})
}

// PrivateNotesNotNil applies the NotNil predicate on the "private_notes" field.
func PrivateNotesNotNil() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrivateNotes)))
	})
}

// PrivateNotesEqualFold applies the EqualFold predicate on the "private_notes" field.
func PrivateNotesEqualFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateNotes), v))
	})
}

// PrivateNotesContainsFold applies the ContainsFold predicate on the "private_notes" field.
func PrivateNotesContainsFold(v string) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateNotes), v))
	})
}

// HasMetadata applies the HasEdge predicate on the "metadata" edge.
func HasMetadata() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMetadataWith applies the HasEdge predicate on the "metadata" edge with a given conditions (other predicates).
func HasMetadataWith(preds ...predicate.Metadata) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MetadataInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MetadataTable, MetadataColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegistrations applies the HasEdge predicate on the "registrations" edge.
func HasRegistrations() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegistrationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistrationsTable, RegistrationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistrationsWith applies the HasEdge predicate on the "registrations" edge with a given conditions (other predicates).
func HasRegistrationsWith(preds ...predicate.VehicleRegistration) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegistrationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistrationsTable, RegistrationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMake applies the HasEdge predicate on the "make" edge.
func HasMake() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MakeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MakeTable, MakeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMakeWith applies the HasEdge predicate on the "make" edge with a given conditions (other predicates).
func HasMakeWith(preds ...predicate.VehicleMake) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MakeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MakeTable, MakeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.VehicleModel) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMajorColor applies the HasEdge predicate on the "major_color" edge.
func HasMajorColor() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorColorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MajorColorTable, MajorColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMajorColorWith applies the HasEdge predicate on the "major_color" edge with a given conditions (other predicates).
func HasMajorColorWith(preds ...predicate.VehicleColor) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MajorColorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MajorColorTable, MajorColorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMinorColor applies the HasEdge predicate on the "minor_color" edge.
func HasMinorColor() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MinorColorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MinorColorTable, MinorColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMinorColorWith applies the HasEdge predicate on the "minor_color" edge with a given conditions (other predicates).
func HasMinorColorWith(preds ...predicate.VehicleColor) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MinorColorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MinorColorTable, MinorColorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.VehicleClass) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(func(s *sql.Selector) {
		p(s.Not())
	})
}
