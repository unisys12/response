// Code generated by entc, DO NOT EDIT.

package vehicle

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the vehicle type in the database.
	Label = "vehicle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedWith holds the string denoting the created_with field in the database.
	FieldCreatedWith = "created_with"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedWith holds the string denoting the updated_with field in the database.
	FieldUpdatedWith = "updated_with"
	// FieldVin holds the string denoting the vin field in the database.
	FieldVin = "vin"
	// FieldStyle holds the string denoting the style field in the database.
	FieldStyle = "style"
	// FieldExtraFeatures holds the string denoting the extra_features field in the database.
	FieldExtraFeatures = "extra_features"
	// FieldPrivateNotes holds the string denoting the private_notes field in the database.
	FieldPrivateNotes = "private_notes"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeRegistrations holds the string denoting the registrations edge name in mutations.
	EdgeRegistrations = "registrations"
	// EdgeMake holds the string denoting the make edge name in mutations.
	EdgeMake = "make"
	// EdgeModel holds the string denoting the model edge name in mutations.
	EdgeModel = "model"
	// EdgeMajorColor holds the string denoting the major_color edge name in mutations.
	EdgeMajorColor = "major_color"
	// EdgeMinorColor holds the string denoting the minor_color edge name in mutations.
	EdgeMinorColor = "minor_color"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// Table holds the table name of the vehicle in the database.
	Table = "vehicles"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "vehicles"
	// MetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	MetadataInverseTable = "metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "vehicle_metadata"
	// RegistrationsTable is the table that holds the registrations relation/edge.
	RegistrationsTable = "vehicle_registrations"
	// RegistrationsInverseTable is the table name for the VehicleRegistration entity.
	// It exists in this package in order to avoid circular dependency with the "vehicleregistration" package.
	RegistrationsInverseTable = "vehicle_registrations"
	// RegistrationsColumn is the table column denoting the registrations relation/edge.
	RegistrationsColumn = "vehicle_registrations"
	// MakeTable is the table that holds the make relation/edge.
	MakeTable = "vehicles"
	// MakeInverseTable is the table name for the VehicleMake entity.
	// It exists in this package in order to avoid circular dependency with the "vehiclemake" package.
	MakeInverseTable = "vehicle_makes"
	// MakeColumn is the table column denoting the make relation/edge.
	MakeColumn = "vehicle_make_vehicles"
	// ModelTable is the table that holds the model relation/edge.
	ModelTable = "vehicles"
	// ModelInverseTable is the table name for the VehicleModel entity.
	// It exists in this package in order to avoid circular dependency with the "vehiclemodel" package.
	ModelInverseTable = "vehicle_models"
	// ModelColumn is the table column denoting the model relation/edge.
	ModelColumn = "vehicle_model_vehicles"
	// MajorColorTable is the table that holds the major_color relation/edge.
	MajorColorTable = "vehicles"
	// MajorColorInverseTable is the table name for the VehicleColor entity.
	// It exists in this package in order to avoid circular dependency with the "vehiclecolor" package.
	MajorColorInverseTable = "vehicle_colors"
	// MajorColorColumn is the table column denoting the major_color relation/edge.
	MajorColorColumn = "vehicle_color_vehicles_major"
	// MinorColorTable is the table that holds the minor_color relation/edge.
	MinorColorTable = "vehicles"
	// MinorColorInverseTable is the table name for the VehicleColor entity.
	// It exists in this package in order to avoid circular dependency with the "vehiclecolor" package.
	MinorColorInverseTable = "vehicle_colors"
	// MinorColorColumn is the table column denoting the minor_color relation/edge.
	MinorColorColumn = "vehicle_color_vehicles_minor"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "vehicles"
	// ClassInverseTable is the table name for the VehicleClass entity.
	// It exists in this package in order to avoid circular dependency with the "vehicleclass" package.
	ClassInverseTable = "vehicle_classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "vehicle_class_vehicles"
)

// Columns holds all SQL columns for vehicle fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldCreatedWith,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldUpdatedWith,
	FieldVin,
	FieldStyle,
	FieldExtraFeatures,
	FieldPrivateNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vehicles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"vehicle_metadata",
	"vehicle_class_vehicles",
	"vehicle_color_vehicles_major",
	"vehicle_color_vehicles_minor",
	"vehicle_make_vehicles",
	"vehicle_model_vehicles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/responserms/response/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
