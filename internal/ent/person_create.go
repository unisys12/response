// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/deathcertificate"
	"github.com/responserms/response/internal/ent/ethnicity"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/person"
	"github.com/responserms/response/internal/ent/race"
	"github.com/responserms/response/internal/ent/sex"
	"github.com/responserms/response/internal/ent/user"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PersonCreate) SetCreatedBy(i int) *PersonCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedBy(i *int) *PersonCreate {
	if i != nil {
		pc.SetCreatedBy(*i)
	}
	return pc
}

// SetCreatedWith sets the "created_with" field.
func (pc *PersonCreate) SetCreatedWith(s string) *PersonCreate {
	pc.mutation.SetCreatedWith(s)
	return pc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedWith(s *string) *PersonCreate {
	if s != nil {
		pc.SetCreatedWith(*s)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PersonCreate) SetUpdatedBy(i int) *PersonCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedBy(i *int) *PersonCreate {
	if i != nil {
		pc.SetUpdatedBy(*i)
	}
	return pc
}

// SetUpdatedWith sets the "updated_with" field.
func (pc *PersonCreate) SetUpdatedWith(s string) *PersonCreate {
	pc.mutation.SetUpdatedWith(s)
	return pc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedWith(s *string) *PersonCreate {
	if s != nil {
		pc.SetUpdatedWith(*s)
	}
	return pc
}

// SetFirstName sets the "first_name" field.
func (pc *PersonCreate) SetFirstName(s string) *PersonCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableFirstName(s *string) *PersonCreate {
	if s != nil {
		pc.SetFirstName(*s)
	}
	return pc
}

// SetMiddleName sets the "middle_name" field.
func (pc *PersonCreate) SetMiddleName(s string) *PersonCreate {
	pc.mutation.SetMiddleName(s)
	return pc
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableMiddleName(s *string) *PersonCreate {
	if s != nil {
		pc.SetMiddleName(*s)
	}
	return pc
}

// SetLastName sets the "last_name" field.
func (pc *PersonCreate) SetLastName(s string) *PersonCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastName(s *string) *PersonCreate {
	if s != nil {
		pc.SetLastName(*s)
	}
	return pc
}

// SetSuffix sets the "suffix" field.
func (pc *PersonCreate) SetSuffix(s string) *PersonCreate {
	pc.mutation.SetSuffix(s)
	return pc
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (pc *PersonCreate) SetNillableSuffix(s *string) *PersonCreate {
	if s != nil {
		pc.SetSuffix(*s)
	}
	return pc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pc *PersonCreate) SetDateOfBirth(t time.Time) *PersonCreate {
	pc.mutation.SetDateOfBirth(t)
	return pc
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDateOfBirth(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDateOfBirth(*t)
	}
	return pc
}

// SetBirthplace sets the "birthplace" field.
func (pc *PersonCreate) SetBirthplace(s string) *PersonCreate {
	pc.mutation.SetBirthplace(s)
	return pc
}

// SetNillableBirthplace sets the "birthplace" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBirthplace(s *string) *PersonCreate {
	if s != nil {
		pc.SetBirthplace(*s)
	}
	return pc
}

// SetDeceasedAt sets the "deceased_at" field.
func (pc *PersonCreate) SetDeceasedAt(t time.Time) *PersonCreate {
	pc.mutation.SetDeceasedAt(t)
	return pc
}

// SetNillableDeceasedAt sets the "deceased_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDeceasedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDeceasedAt(*t)
	}
	return pc
}

// SetArchivedAt sets the "archived_at" field.
func (pc *PersonCreate) SetArchivedAt(t time.Time) *PersonCreate {
	pc.mutation.SetArchivedAt(t)
	return pc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableArchivedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetArchivedAt(*t)
	}
	return pc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (pc *PersonCreate) SetMetadataID(id int) *PersonCreate {
	pc.mutation.SetMetadataID(id)
	return pc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableMetadataID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetMetadataID(*id)
	}
	return pc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (pc *PersonCreate) SetMetadata(m *Metadata) *PersonCreate {
	return pc.SetMetadataID(m.ID)
}

// AddVehicleRegistrationIDs adds the "vehicle_registrations" edge to the VehicleRegistration entity by IDs.
func (pc *PersonCreate) AddVehicleRegistrationIDs(ids ...int) *PersonCreate {
	pc.mutation.AddVehicleRegistrationIDs(ids...)
	return pc
}

// AddVehicleRegistrations adds the "vehicle_registrations" edges to the VehicleRegistration entity.
func (pc *PersonCreate) AddVehicleRegistrations(v ...*VehicleRegistration) *PersonCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pc.AddVehicleRegistrationIDs(ids...)
}

// SetRaceID sets the "race" edge to the Race entity by ID.
func (pc *PersonCreate) SetRaceID(id int) *PersonCreate {
	pc.mutation.SetRaceID(id)
	return pc
}

// SetNillableRaceID sets the "race" edge to the Race entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableRaceID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetRaceID(*id)
	}
	return pc
}

// SetRace sets the "race" edge to the Race entity.
func (pc *PersonCreate) SetRace(r *Race) *PersonCreate {
	return pc.SetRaceID(r.ID)
}

// SetEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID.
func (pc *PersonCreate) SetEthnicityID(id int) *PersonCreate {
	pc.mutation.SetEthnicityID(id)
	return pc
}

// SetNillableEthnicityID sets the "ethnicity" edge to the Ethnicity entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableEthnicityID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetEthnicityID(*id)
	}
	return pc
}

// SetEthnicity sets the "ethnicity" edge to the Ethnicity entity.
func (pc *PersonCreate) SetEthnicity(e *Ethnicity) *PersonCreate {
	return pc.SetEthnicityID(e.ID)
}

// SetSexID sets the "sex" edge to the Sex entity by ID.
func (pc *PersonCreate) SetSexID(id int) *PersonCreate {
	pc.mutation.SetSexID(id)
	return pc
}

// SetNillableSexID sets the "sex" edge to the Sex entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableSexID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetSexID(*id)
	}
	return pc
}

// SetSex sets the "sex" edge to the Sex entity.
func (pc *PersonCreate) SetSex(s *Sex) *PersonCreate {
	return pc.SetSexID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *PersonCreate) SetUserID(id int) *PersonCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableUserID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PersonCreate) SetUser(u *User) *PersonCreate {
	return pc.SetUserID(u.ID)
}

// SetDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID.
func (pc *PersonCreate) SetDeathCertificateID(id int) *PersonCreate {
	pc.mutation.SetDeathCertificateID(id)
	return pc
}

// SetNillableDeathCertificateID sets the "death_certificate" edge to the DeathCertificate entity by ID if the given value is not nil.
func (pc *PersonCreate) SetNillableDeathCertificateID(id *int) *PersonCreate {
	if id != nil {
		pc = pc.SetDeathCertificateID(*id)
	}
	return pc
}

// SetDeathCertificate sets the "death_certificate" edge to the DeathCertificate entity.
func (pc *PersonCreate) SetDeathCertificate(d *DeathCertificate) *PersonCreate {
	return pc.SetDeathCertificateID(d.ID)
}

// AddCertifiedDeathIDs adds the "certified_deaths" edge to the DeathCertificate entity by IDs.
func (pc *PersonCreate) AddCertifiedDeathIDs(ids ...int) *PersonCreate {
	pc.mutation.AddCertifiedDeathIDs(ids...)
	return pc
}

// AddCertifiedDeaths adds the "certified_deaths" edges to the DeathCertificate entity.
func (pc *PersonCreate) AddCertifiedDeaths(d ...*DeathCertificate) *PersonCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddCertifiedDeathIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if person.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if person.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := pc.mutation.MiddleName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldMiddleName,
		})
		_node.MiddleName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := pc.mutation.Suffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSuffix,
		})
		_node.Suffix = value
	}
	if value, ok := pc.mutation.DateOfBirth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDateOfBirth,
		})
		_node.DateOfBirth = value
	}
	if value, ok := pc.mutation.Birthplace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBirthplace,
		})
		_node.Birthplace = value
	}
	if value, ok := pc.mutation.DeceasedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeceasedAt,
		})
		_node.DeceasedAt = &value
	}
	if value, ok := pc.mutation.ArchivedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldArchivedAt,
		})
		_node.ArchivedAt = &value
	}
	if nodes := pc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.MetadataTable,
			Columns: []string{person.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.person_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.VehicleRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.VehicleRegistrationsTable,
			Columns: []string{person.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.RaceTable,
			Columns: []string{person.RaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: race.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.race_people = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EthnicityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.EthnicityTable,
			Columns: []string{person.EthnicityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ethnicity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ethnicity_people = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.SexTable,
			Columns: []string{person.SexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sex.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sex_people = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   person.UserTable,
			Columns: []string{person.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_people = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeathCertificateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   person.DeathCertificateTable,
			Columns: []string{person.DeathCertificateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CertifiedDeathsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.CertifiedDeathsTable,
			Columns: []string{person.CertifiedDeathsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deathcertificate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflict(opts ...sql.ConflictOption) *PersonUpsertOne {
	pc.conflict = opts
	return &PersonUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflictColumns(columns ...string) *PersonUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertOne{
		create: pc,
	}
}

type (
	// PersonUpsertOne is the builder for "upsert"-ing
	//  one Person node.
	PersonUpsertOne struct {
		create *PersonCreate
	}

	// PersonUpsert is the "OnConflict" setter.
	PersonUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsert) SetCreatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PersonUpsert) SetCreatedBy(v int) *PersonUpsert {
	u.Set(person.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreatedBy() *PersonUpsert {
	u.SetExcluded(person.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PersonUpsert) ClearCreatedBy() *PersonUpsert {
	u.SetNull(person.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *PersonUpsert) SetCreatedWith(v string) *PersonUpsert {
	u.Set(person.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreatedWith() *PersonUpsert {
	u.SetExcluded(person.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PersonUpsert) ClearCreatedWith() *PersonUpsert {
	u.SetNull(person.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsert) SetUpdatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateUpdatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PersonUpsert) SetUpdatedBy(v int) *PersonUpsert {
	u.Set(person.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PersonUpsert) UpdateUpdatedBy() *PersonUpsert {
	u.SetExcluded(person.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PersonUpsert) ClearUpdatedBy() *PersonUpsert {
	u.SetNull(person.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PersonUpsert) SetUpdatedWith(v string) *PersonUpsert {
	u.Set(person.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PersonUpsert) UpdateUpdatedWith() *PersonUpsert {
	u.SetExcluded(person.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PersonUpsert) ClearUpdatedWith() *PersonUpsert {
	u.SetNull(person.FieldUpdatedWith)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *PersonUpsert) SetFirstName(v string) *PersonUpsert {
	u.Set(person.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateFirstName() *PersonUpsert {
	u.SetExcluded(person.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *PersonUpsert) ClearFirstName() *PersonUpsert {
	u.SetNull(person.FieldFirstName)
	return u
}

// SetMiddleName sets the "middle_name" field.
func (u *PersonUpsert) SetMiddleName(v string) *PersonUpsert {
	u.Set(person.FieldMiddleName, v)
	return u
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateMiddleName() *PersonUpsert {
	u.SetExcluded(person.FieldMiddleName)
	return u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *PersonUpsert) ClearMiddleName() *PersonUpsert {
	u.SetNull(person.FieldMiddleName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *PersonUpsert) SetLastName(v string) *PersonUpsert {
	u.Set(person.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateLastName() *PersonUpsert {
	u.SetExcluded(person.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *PersonUpsert) ClearLastName() *PersonUpsert {
	u.SetNull(person.FieldLastName)
	return u
}

// SetSuffix sets the "suffix" field.
func (u *PersonUpsert) SetSuffix(v string) *PersonUpsert {
	u.Set(person.FieldSuffix, v)
	return u
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *PersonUpsert) UpdateSuffix() *PersonUpsert {
	u.SetExcluded(person.FieldSuffix)
	return u
}

// ClearSuffix clears the value of the "suffix" field.
func (u *PersonUpsert) ClearSuffix() *PersonUpsert {
	u.SetNull(person.FieldSuffix)
	return u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PersonUpsert) SetDateOfBirth(v time.Time) *PersonUpsert {
	u.Set(person.FieldDateOfBirth, v)
	return u
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PersonUpsert) UpdateDateOfBirth() *PersonUpsert {
	u.SetExcluded(person.FieldDateOfBirth)
	return u
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (u *PersonUpsert) ClearDateOfBirth() *PersonUpsert {
	u.SetNull(person.FieldDateOfBirth)
	return u
}

// SetBirthplace sets the "birthplace" field.
func (u *PersonUpsert) SetBirthplace(v string) *PersonUpsert {
	u.Set(person.FieldBirthplace, v)
	return u
}

// UpdateBirthplace sets the "birthplace" field to the value that was provided on create.
func (u *PersonUpsert) UpdateBirthplace() *PersonUpsert {
	u.SetExcluded(person.FieldBirthplace)
	return u
}

// ClearBirthplace clears the value of the "birthplace" field.
func (u *PersonUpsert) ClearBirthplace() *PersonUpsert {
	u.SetNull(person.FieldBirthplace)
	return u
}

// SetDeceasedAt sets the "deceased_at" field.
func (u *PersonUpsert) SetDeceasedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldDeceasedAt, v)
	return u
}

// UpdateDeceasedAt sets the "deceased_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateDeceasedAt() *PersonUpsert {
	u.SetExcluded(person.FieldDeceasedAt)
	return u
}

// ClearDeceasedAt clears the value of the "deceased_at" field.
func (u *PersonUpsert) ClearDeceasedAt() *PersonUpsert {
	u.SetNull(person.FieldDeceasedAt)
	return u
}

// SetArchivedAt sets the "archived_at" field.
func (u *PersonUpsert) SetArchivedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldArchivedAt, v)
	return u
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateArchivedAt() *PersonUpsert {
	u.SetExcluded(person.FieldArchivedAt)
	return u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PersonUpsert) ClearArchivedAt() *PersonUpsert {
	u.SetNull(person.FieldArchivedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertOne) UpdateNewValues() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Person.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PersonUpsertOne) Ignore() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertOne) DoNothing() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreate.OnConflict
// documentation for more info.
func (u *PersonUpsertOne) Update(set func(*PersonUpsert)) *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertOne) SetCreatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PersonUpsertOne) SetCreatedBy(v int) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreatedBy() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PersonUpsertOne) ClearCreatedBy() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *PersonUpsertOne) SetCreatedWith(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreatedWith() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PersonUpsertOne) ClearCreatedWith() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertOne) SetUpdatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateUpdatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PersonUpsertOne) SetUpdatedBy(v int) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateUpdatedBy() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PersonUpsertOne) ClearUpdatedBy() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PersonUpsertOne) SetUpdatedWith(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateUpdatedWith() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PersonUpsertOne) ClearUpdatedWith() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetFirstName sets the "first_name" field.
func (u *PersonUpsertOne) SetFirstName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateFirstName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *PersonUpsertOne) ClearFirstName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFirstName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *PersonUpsertOne) SetMiddleName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateMiddleName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *PersonUpsertOne) ClearMiddleName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearMiddleName()
	})
}

// SetLastName sets the "last_name" field.
func (u *PersonUpsertOne) SetLastName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateLastName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *PersonUpsertOne) ClearLastName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastName()
	})
}

// SetSuffix sets the "suffix" field.
func (u *PersonUpsertOne) SetSuffix(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateSuffix() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *PersonUpsertOne) ClearSuffix() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearSuffix()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PersonUpsertOne) SetDateOfBirth(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateDateOfBirth() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDateOfBirth()
	})
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (u *PersonUpsertOne) ClearDateOfBirth() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDateOfBirth()
	})
}

// SetBirthplace sets the "birthplace" field.
func (u *PersonUpsertOne) SetBirthplace(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetBirthplace(v)
	})
}

// UpdateBirthplace sets the "birthplace" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateBirthplace() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBirthplace()
	})
}

// ClearBirthplace clears the value of the "birthplace" field.
func (u *PersonUpsertOne) ClearBirthplace() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearBirthplace()
	})
}

// SetDeceasedAt sets the "deceased_at" field.
func (u *PersonUpsertOne) SetDeceasedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeceasedAt(v)
	})
}

// UpdateDeceasedAt sets the "deceased_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateDeceasedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeceasedAt()
	})
}

// ClearDeceasedAt clears the value of the "deceased_at" field.
func (u *PersonUpsertOne) ClearDeceasedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeceasedAt()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *PersonUpsertOne) SetArchivedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateArchivedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PersonUpsertOne) ClearArchivedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearArchivedAt()
	})
}

// Exec executes the query.
func (u *PersonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PersonUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PersonUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
	conflict []sql.ConflictOption
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflict(opts ...sql.ConflictOption) *PersonUpsertBulk {
	pcb.conflict = opts
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflictColumns(columns ...string) *PersonUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// PersonUpsertBulk is the builder for "upsert"-ing
// a bulk of Person nodes.
type PersonUpsertBulk struct {
	create *PersonCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) UpdateNewValues() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) Ignore() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertBulk) DoNothing() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreateBulk.OnConflict
// documentation for more info.
func (u *PersonUpsertBulk) Update(set func(*PersonUpsert)) *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertBulk) SetCreatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PersonUpsertBulk) SetCreatedBy(v int) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreatedBy() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PersonUpsertBulk) ClearCreatedBy() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *PersonUpsertBulk) SetCreatedWith(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreatedWith() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PersonUpsertBulk) ClearCreatedWith() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertBulk) SetUpdatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateUpdatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PersonUpsertBulk) SetUpdatedBy(v int) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateUpdatedBy() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PersonUpsertBulk) ClearUpdatedBy() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PersonUpsertBulk) SetUpdatedWith(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateUpdatedWith() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PersonUpsertBulk) ClearUpdatedWith() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetFirstName sets the "first_name" field.
func (u *PersonUpsertBulk) SetFirstName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateFirstName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *PersonUpsertBulk) ClearFirstName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFirstName()
	})
}

// SetMiddleName sets the "middle_name" field.
func (u *PersonUpsertBulk) SetMiddleName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetMiddleName(v)
	})
}

// UpdateMiddleName sets the "middle_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateMiddleName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateMiddleName()
	})
}

// ClearMiddleName clears the value of the "middle_name" field.
func (u *PersonUpsertBulk) ClearMiddleName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearMiddleName()
	})
}

// SetLastName sets the "last_name" field.
func (u *PersonUpsertBulk) SetLastName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateLastName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *PersonUpsertBulk) ClearLastName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastName()
	})
}

// SetSuffix sets the "suffix" field.
func (u *PersonUpsertBulk) SetSuffix(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateSuffix() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *PersonUpsertBulk) ClearSuffix() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearSuffix()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *PersonUpsertBulk) SetDateOfBirth(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateDateOfBirth() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDateOfBirth()
	})
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (u *PersonUpsertBulk) ClearDateOfBirth() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDateOfBirth()
	})
}

// SetBirthplace sets the "birthplace" field.
func (u *PersonUpsertBulk) SetBirthplace(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetBirthplace(v)
	})
}

// UpdateBirthplace sets the "birthplace" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateBirthplace() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBirthplace()
	})
}

// ClearBirthplace clears the value of the "birthplace" field.
func (u *PersonUpsertBulk) ClearBirthplace() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearBirthplace()
	})
}

// SetDeceasedAt sets the "deceased_at" field.
func (u *PersonUpsertBulk) SetDeceasedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeceasedAt(v)
	})
}

// UpdateDeceasedAt sets the "deceased_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateDeceasedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeceasedAt()
	})
}

// ClearDeceasedAt clears the value of the "deceased_at" field.
func (u *PersonUpsertBulk) ClearDeceasedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeceasedAt()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *PersonUpsertBulk) SetArchivedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateArchivedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PersonUpsertBulk) ClearArchivedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearArchivedAt()
	})
}

// Exec executes the query.
func (u *PersonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PersonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
