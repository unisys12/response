// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/state"
	"github.com/responserms/response/internal/ent/vehicleregistration"
)

// StateUpdate is the builder for updating State entities.
type StateUpdate struct {
	config
	hooks    []Hook
	mutation *StateMutation
}

// Where appends a list predicates to the StateUpdate builder.
func (su *StateUpdate) Where(ps ...predicate.State) *StateUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *StateUpdate) SetCreatedBy(i int) *StateUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *StateUpdate) SetNillableCreatedBy(i *int) *StateUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *StateUpdate) AddCreatedBy(i int) *StateUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// ClearCreatedBy clears the value of the "created_by" field.
func (su *StateUpdate) ClearCreatedBy() *StateUpdate {
	su.mutation.ClearCreatedBy()
	return su
}

// SetCreatedWith sets the "created_with" field.
func (su *StateUpdate) SetCreatedWith(s string) *StateUpdate {
	su.mutation.SetCreatedWith(s)
	return su
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (su *StateUpdate) SetNillableCreatedWith(s *string) *StateUpdate {
	if s != nil {
		su.SetCreatedWith(*s)
	}
	return su
}

// ClearCreatedWith clears the value of the "created_with" field.
func (su *StateUpdate) ClearCreatedWith() *StateUpdate {
	su.mutation.ClearCreatedWith()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StateUpdate) SetUpdatedAt(t time.Time) *StateUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *StateUpdate) SetUpdatedBy(i int) *StateUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *StateUpdate) SetNillableUpdatedBy(i *int) *StateUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *StateUpdate) AddUpdatedBy(i int) *StateUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *StateUpdate) ClearUpdatedBy() *StateUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetUpdatedWith sets the "updated_with" field.
func (su *StateUpdate) SetUpdatedWith(s string) *StateUpdate {
	su.mutation.SetUpdatedWith(s)
	return su
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (su *StateUpdate) SetNillableUpdatedWith(s *string) *StateUpdate {
	if s != nil {
		su.SetUpdatedWith(*s)
	}
	return su
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (su *StateUpdate) ClearUpdatedWith() *StateUpdate {
	su.mutation.ClearUpdatedWith()
	return su
}

// SetShort sets the "short" field.
func (su *StateUpdate) SetShort(s string) *StateUpdate {
	su.mutation.SetShort(s)
	return su
}

// SetTitle sets the "title" field.
func (su *StateUpdate) SetTitle(s string) *StateUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetDescription sets the "description" field.
func (su *StateUpdate) SetDescription(s string) *StateUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StateUpdate) SetNillableDescription(s *string) *StateUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StateUpdate) ClearDescription() *StateUpdate {
	su.mutation.ClearDescription()
	return su
}

// AddVehicleRegistrationIDs adds the "vehicle_registrations" edge to the VehicleRegistration entity by IDs.
func (su *StateUpdate) AddVehicleRegistrationIDs(ids ...int) *StateUpdate {
	su.mutation.AddVehicleRegistrationIDs(ids...)
	return su
}

// AddVehicleRegistrations adds the "vehicle_registrations" edges to the VehicleRegistration entity.
func (su *StateUpdate) AddVehicleRegistrations(v ...*VehicleRegistration) *StateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return su.AddVehicleRegistrationIDs(ids...)
}

// Mutation returns the StateMutation object of the builder.
func (su *StateUpdate) Mutation() *StateMutation {
	return su.mutation
}

// ClearVehicleRegistrations clears all "vehicle_registrations" edges to the VehicleRegistration entity.
func (su *StateUpdate) ClearVehicleRegistrations() *StateUpdate {
	su.mutation.ClearVehicleRegistrations()
	return su
}

// RemoveVehicleRegistrationIDs removes the "vehicle_registrations" edge to VehicleRegistration entities by IDs.
func (su *StateUpdate) RemoveVehicleRegistrationIDs(ids ...int) *StateUpdate {
	su.mutation.RemoveVehicleRegistrationIDs(ids...)
	return su
}

// RemoveVehicleRegistrations removes "vehicle_registrations" edges to VehicleRegistration entities.
func (su *StateUpdate) RemoveVehicleRegistrations(v ...*VehicleRegistration) *StateUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return su.RemoveVehicleRegistrationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StateUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StateUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StateUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StateUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if state.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized state.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := state.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StateUpdate) check() error {
	if v, ok := su.mutation.Short(); ok {
		if err := state.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := state.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := state.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (su *StateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   state.Table,
			Columns: state.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: state.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldCreatedBy,
		})
	}
	if su.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: state.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldCreatedWith,
		})
	}
	if su.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldCreatedWith,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: state.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldUpdatedBy,
		})
	}
	if su.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: state.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldUpdatedWith,
		})
	}
	if su.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldUpdatedWith,
		})
	}
	if value, ok := su.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldShort,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldTitle,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldDescription,
		})
	}
	if su.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedVehicleRegistrationsIDs(); len(nodes) > 0 && !su.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.VehicleRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StateUpdateOne is the builder for updating a single State entity.
type StateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StateMutation
}

// SetCreatedBy sets the "created_by" field.
func (suo *StateUpdateOne) SetCreatedBy(i int) *StateUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableCreatedBy(i *int) *StateUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *StateUpdateOne) AddCreatedBy(i int) *StateUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (suo *StateUpdateOne) ClearCreatedBy() *StateUpdateOne {
	suo.mutation.ClearCreatedBy()
	return suo
}

// SetCreatedWith sets the "created_with" field.
func (suo *StateUpdateOne) SetCreatedWith(s string) *StateUpdateOne {
	suo.mutation.SetCreatedWith(s)
	return suo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableCreatedWith(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetCreatedWith(*s)
	}
	return suo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (suo *StateUpdateOne) ClearCreatedWith() *StateUpdateOne {
	suo.mutation.ClearCreatedWith()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StateUpdateOne) SetUpdatedAt(t time.Time) *StateUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *StateUpdateOne) SetUpdatedBy(i int) *StateUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableUpdatedBy(i *int) *StateUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *StateUpdateOne) AddUpdatedBy(i int) *StateUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *StateUpdateOne) ClearUpdatedBy() *StateUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetUpdatedWith sets the "updated_with" field.
func (suo *StateUpdateOne) SetUpdatedWith(s string) *StateUpdateOne {
	suo.mutation.SetUpdatedWith(s)
	return suo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableUpdatedWith(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetUpdatedWith(*s)
	}
	return suo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (suo *StateUpdateOne) ClearUpdatedWith() *StateUpdateOne {
	suo.mutation.ClearUpdatedWith()
	return suo
}

// SetShort sets the "short" field.
func (suo *StateUpdateOne) SetShort(s string) *StateUpdateOne {
	suo.mutation.SetShort(s)
	return suo
}

// SetTitle sets the "title" field.
func (suo *StateUpdateOne) SetTitle(s string) *StateUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *StateUpdateOne) SetDescription(s string) *StateUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StateUpdateOne) SetNillableDescription(s *string) *StateUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StateUpdateOne) ClearDescription() *StateUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// AddVehicleRegistrationIDs adds the "vehicle_registrations" edge to the VehicleRegistration entity by IDs.
func (suo *StateUpdateOne) AddVehicleRegistrationIDs(ids ...int) *StateUpdateOne {
	suo.mutation.AddVehicleRegistrationIDs(ids...)
	return suo
}

// AddVehicleRegistrations adds the "vehicle_registrations" edges to the VehicleRegistration entity.
func (suo *StateUpdateOne) AddVehicleRegistrations(v ...*VehicleRegistration) *StateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suo.AddVehicleRegistrationIDs(ids...)
}

// Mutation returns the StateMutation object of the builder.
func (suo *StateUpdateOne) Mutation() *StateMutation {
	return suo.mutation
}

// ClearVehicleRegistrations clears all "vehicle_registrations" edges to the VehicleRegistration entity.
func (suo *StateUpdateOne) ClearVehicleRegistrations() *StateUpdateOne {
	suo.mutation.ClearVehicleRegistrations()
	return suo
}

// RemoveVehicleRegistrationIDs removes the "vehicle_registrations" edge to VehicleRegistration entities by IDs.
func (suo *StateUpdateOne) RemoveVehicleRegistrationIDs(ids ...int) *StateUpdateOne {
	suo.mutation.RemoveVehicleRegistrationIDs(ids...)
	return suo
}

// RemoveVehicleRegistrations removes "vehicle_registrations" edges to VehicleRegistration entities.
func (suo *StateUpdateOne) RemoveVehicleRegistrations(v ...*VehicleRegistration) *StateUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suo.RemoveVehicleRegistrationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StateUpdateOne) Select(field string, fields ...string) *StateUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated State entity.
func (suo *StateUpdateOne) Save(ctx context.Context) (*State, error) {
	var (
		err  error
		node *State
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StateUpdateOne) SaveX(ctx context.Context) *State {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StateUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StateUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StateUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if state.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized state.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := state.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StateUpdateOne) check() error {
	if v, ok := suo.mutation.Short(); ok {
		if err := state.ShortValidator(v); err != nil {
			return &ValidationError{Name: "short", err: fmt.Errorf("ent: validator failed for field \"short\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := state.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := state.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (suo *StateUpdateOne) sqlSave(ctx context.Context) (_node *State, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   state.Table,
			Columns: state.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: state.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing State.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, state.FieldID)
		for _, f := range fields {
			if !state.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != state.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldCreatedBy,
		})
	}
	if suo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: state.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldCreatedWith,
		})
	}
	if suo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldCreatedWith,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: state.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: state.FieldUpdatedBy,
		})
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: state.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldUpdatedWith,
		})
	}
	if suo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldUpdatedWith,
		})
	}
	if value, ok := suo.mutation.Short(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldShort,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: state.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: state.FieldDescription,
		})
	}
	if suo.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedVehicleRegistrationsIDs(); len(nodes) > 0 && !suo.mutation.VehicleRegistrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.VehicleRegistrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   state.VehicleRegistrationsTable,
			Columns: []string{state.VehicleRegistrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vehicleregistration.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &State{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{state.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
