// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/vehiclecolor"
)

// VehicleColor is the model entity for the VehicleColor schema.
type VehicleColor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedWith holds the value of the "created_with" field.
	CreatedWith string `json:"created_with,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedWith holds the value of the "updated_with" field.
	UpdatedWith string `json:"updated_with,omitempty"`
	// Short holds the value of the "short" field.
	Short string `json:"short,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VehicleColorQuery when eager-loading is set.
	Edges                  VehicleColorEdges `json:"edges"`
	vehicle_color_metadata *int
}

// VehicleColorEdges holds the relations/edges for other nodes in the graph.
type VehicleColorEdges struct {
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// VehiclesMajor holds the value of the vehicles_major edge.
	VehiclesMajor []*Vehicle `json:"vehicles_major,omitempty"`
	// VehiclesMinor holds the value of the vehicles_minor edge.
	VehiclesMinor []*Vehicle `json:"vehicles_minor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VehicleColorEdges) MetadataOrErr() (*Metadata, error) {
	if e.loadedTypes[0] {
		if e.Metadata == nil {
			// The edge metadata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: metadata.Label}
		}
		return e.Metadata, nil
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// VehiclesMajorOrErr returns the VehiclesMajor value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleColorEdges) VehiclesMajorOrErr() ([]*Vehicle, error) {
	if e.loadedTypes[1] {
		return e.VehiclesMajor, nil
	}
	return nil, &NotLoadedError{edge: "vehicles_major"}
}

// VehiclesMinorOrErr returns the VehiclesMinor value or an error if the edge
// was not loaded in eager-loading.
func (e VehicleColorEdges) VehiclesMinorOrErr() ([]*Vehicle, error) {
	if e.loadedTypes[2] {
		return e.VehiclesMinor, nil
	}
	return nil, &NotLoadedError{edge: "vehicles_minor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VehicleColor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vehiclecolor.FieldID, vehiclecolor.FieldCreatedBy, vehiclecolor.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case vehiclecolor.FieldCreatedWith, vehiclecolor.FieldUpdatedWith, vehiclecolor.FieldShort, vehiclecolor.FieldTitle, vehiclecolor.FieldDescription:
			values[i] = new(sql.NullString)
		case vehiclecolor.FieldCreatedAt, vehiclecolor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case vehiclecolor.ForeignKeys[0]: // vehicle_color_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VehicleColor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VehicleColor fields.
func (vc *VehicleColor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vehiclecolor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vc.ID = int(value.Int64)
		case vehiclecolor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vc.CreatedAt = value.Time
			}
		case vehiclecolor.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vc.CreatedBy = int(value.Int64)
			}
		case vehiclecolor.FieldCreatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_with", values[i])
			} else if value.Valid {
				vc.CreatedWith = value.String
			}
		case vehiclecolor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vc.UpdatedAt = value.Time
			}
		case vehiclecolor.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vc.UpdatedBy = int(value.Int64)
			}
		case vehiclecolor.FieldUpdatedWith:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_with", values[i])
			} else if value.Valid {
				vc.UpdatedWith = value.String
			}
		case vehiclecolor.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short", values[i])
			} else if value.Valid {
				vc.Short = value.String
			}
		case vehiclecolor.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				vc.Title = value.String
			}
		case vehiclecolor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				vc.Description = value.String
			}
		case vehiclecolor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vehicle_color_metadata", value)
			} else if value.Valid {
				vc.vehicle_color_metadata = new(int)
				*vc.vehicle_color_metadata = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMetadata queries the "metadata" edge of the VehicleColor entity.
func (vc *VehicleColor) QueryMetadata() *MetadataQuery {
	return (&VehicleColorClient{config: vc.config}).QueryMetadata(vc)
}

// QueryVehiclesMajor queries the "vehicles_major" edge of the VehicleColor entity.
func (vc *VehicleColor) QueryVehiclesMajor() *VehicleQuery {
	return (&VehicleColorClient{config: vc.config}).QueryVehiclesMajor(vc)
}

// QueryVehiclesMinor queries the "vehicles_minor" edge of the VehicleColor entity.
func (vc *VehicleColor) QueryVehiclesMinor() *VehicleQuery {
	return (&VehicleColorClient{config: vc.config}).QueryVehiclesMinor(vc)
}

// Update returns a builder for updating this VehicleColor.
// Note that you need to call VehicleColor.Unwrap() before calling this method if this VehicleColor
// was returned from a transaction, and the transaction was committed or rolled back.
func (vc *VehicleColor) Update() *VehicleColorUpdateOne {
	return (&VehicleColorClient{config: vc.config}).UpdateOne(vc)
}

// Unwrap unwraps the VehicleColor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vc *VehicleColor) Unwrap() *VehicleColor {
	tx, ok := vc.config.driver.(*txDriver)
	if !ok {
		panic("ent: VehicleColor is not a transactional entity")
	}
	vc.config.driver = tx.drv
	return vc
}

// String implements the fmt.Stringer.
func (vc *VehicleColor) String() string {
	var builder strings.Builder
	builder.WriteString("VehicleColor(")
	builder.WriteString(fmt.Sprintf("id=%v", vc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(vc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", vc.CreatedBy))
	builder.WriteString(", created_with=")
	builder.WriteString(vc.CreatedWith)
	builder.WriteString(", updated_at=")
	builder.WriteString(vc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", vc.UpdatedBy))
	builder.WriteString(", updated_with=")
	builder.WriteString(vc.UpdatedWith)
	builder.WriteString(", short=")
	builder.WriteString(vc.Short)
	builder.WriteString(", title=")
	builder.WriteString(vc.Title)
	builder.WriteString(", description=")
	builder.WriteString(vc.Description)
	builder.WriteByte(')')
	return builder.String()
}

// VehicleColors is a parsable slice of VehicleColor.
type VehicleColors []*VehicleColor

func (vc VehicleColors) config(cfg config) {
	for _i := range vc {
		vc[_i].config = cfg
	}
}
