// Code generated by entc, DO NOT EDIT.

package vehiclemake

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/responserms/response/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedWith applies equality check predicate on the "created_with" field. It's identical to CreatedWithEQ.
func CreatedWith(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedWith applies equality check predicate on the "updated_with" field. It's identical to UpdatedWithEQ.
func UpdatedWith(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// Short applies equality check predicate on the "short" field. It's identical to ShortEQ.
func Short(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShort), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedWithEQ applies the EQ predicate on the "created_with" field.
func CreatedWithEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithNEQ applies the NEQ predicate on the "created_with" field.
func CreatedWithNEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIn applies the In predicate on the "created_with" field.
func CreatedWithIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithNotIn applies the NotIn predicate on the "created_with" field.
func CreatedWithNotIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedWith), v...))
	})
}

// CreatedWithGT applies the GT predicate on the "created_with" field.
func CreatedWithGT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithGTE applies the GTE predicate on the "created_with" field.
func CreatedWithGTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLT applies the LT predicate on the "created_with" field.
func CreatedWithLT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithLTE applies the LTE predicate on the "created_with" field.
func CreatedWithLTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContains applies the Contains predicate on the "created_with" field.
func CreatedWithContains(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasPrefix applies the HasPrefix predicate on the "created_with" field.
func CreatedWithHasPrefix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithHasSuffix applies the HasSuffix predicate on the "created_with" field.
func CreatedWithHasSuffix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithIsNil applies the IsNil predicate on the "created_with" field.
func CreatedWithIsNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithNotNil applies the NotNil predicate on the "created_with" field.
func CreatedWithNotNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedWith)))
	})
}

// CreatedWithEqualFold applies the EqualFold predicate on the "created_with" field.
func CreatedWithEqualFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedWith), v))
	})
}

// CreatedWithContainsFold applies the ContainsFold predicate on the "created_with" field.
func CreatedWithContainsFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedWith), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedWithEQ applies the EQ predicate on the "updated_with" field.
func UpdatedWithEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithNEQ applies the NEQ predicate on the "updated_with" field.
func UpdatedWithNEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIn applies the In predicate on the "updated_with" field.
func UpdatedWithIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithNotIn applies the NotIn predicate on the "updated_with" field.
func UpdatedWithNotIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedWith), v...))
	})
}

// UpdatedWithGT applies the GT predicate on the "updated_with" field.
func UpdatedWithGT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithGTE applies the GTE predicate on the "updated_with" field.
func UpdatedWithGTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLT applies the LT predicate on the "updated_with" field.
func UpdatedWithLT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithLTE applies the LTE predicate on the "updated_with" field.
func UpdatedWithLTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContains applies the Contains predicate on the "updated_with" field.
func UpdatedWithContains(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasPrefix applies the HasPrefix predicate on the "updated_with" field.
func UpdatedWithHasPrefix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithHasSuffix applies the HasSuffix predicate on the "updated_with" field.
func UpdatedWithHasSuffix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithIsNil applies the IsNil predicate on the "updated_with" field.
func UpdatedWithIsNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithNotNil applies the NotNil predicate on the "updated_with" field.
func UpdatedWithNotNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedWith)))
	})
}

// UpdatedWithEqualFold applies the EqualFold predicate on the "updated_with" field.
func UpdatedWithEqualFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedWith), v))
	})
}

// UpdatedWithContainsFold applies the ContainsFold predicate on the "updated_with" field.
func UpdatedWithContainsFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedWith), v))
	})
}

// ShortEQ applies the EQ predicate on the "short" field.
func ShortEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShort), v))
	})
}

// ShortNEQ applies the NEQ predicate on the "short" field.
func ShortNEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShort), v))
	})
}

// ShortIn applies the In predicate on the "short" field.
func ShortIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShort), v...))
	})
}

// ShortNotIn applies the NotIn predicate on the "short" field.
func ShortNotIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShort), v...))
	})
}

// ShortGT applies the GT predicate on the "short" field.
func ShortGT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShort), v))
	})
}

// ShortGTE applies the GTE predicate on the "short" field.
func ShortGTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShort), v))
	})
}

// ShortLT applies the LT predicate on the "short" field.
func ShortLT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShort), v))
	})
}

// ShortLTE applies the LTE predicate on the "short" field.
func ShortLTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShort), v))
	})
}

// ShortContains applies the Contains predicate on the "short" field.
func ShortContains(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShort), v))
	})
}

// ShortHasPrefix applies the HasPrefix predicate on the "short" field.
func ShortHasPrefix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShort), v))
	})
}

// ShortHasSuffix applies the HasSuffix predicate on the "short" field.
func ShortHasSuffix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShort), v))
	})
}

// ShortEqualFold applies the EqualFold predicate on the "short" field.
func ShortEqualFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShort), v))
	})
}

// ShortContainsFold applies the ContainsFold predicate on the "short" field.
func ShortContainsFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShort), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.VehicleMake {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VehicleMake(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// HasVehicles applies the HasEdge predicate on the "vehicles" edge.
func HasVehicles() predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehiclesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehiclesTable, VehiclesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVehiclesWith applies the HasEdge predicate on the "vehicles" edge with a given conditions (other predicates).
func HasVehiclesWith(preds ...predicate.Vehicle) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VehiclesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VehiclesTable, VehiclesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VehicleMake) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VehicleMake) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VehicleMake) predicate.VehicleMake {
	return predicate.VehicleMake(func(s *sql.Selector) {
		p(s.Not())
	})
}
