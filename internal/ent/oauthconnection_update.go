// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/oauthconnection"
	"github.com/responserms/response/internal/ent/predicate"
	"github.com/responserms/response/internal/ent/user"
)

// OAuthConnectionUpdate is the builder for updating OAuthConnection entities.
type OAuthConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthConnectionMutation
}

// Where appends a list predicates to the OAuthConnectionUpdate builder.
func (ocu *OAuthConnectionUpdate) Where(ps ...predicate.OAuthConnection) *OAuthConnectionUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetCreatedBy sets the "created_by" field.
func (ocu *OAuthConnectionUpdate) SetCreatedBy(i int) *OAuthConnectionUpdate {
	ocu.mutation.ResetCreatedBy()
	ocu.mutation.SetCreatedBy(i)
	return ocu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ocu *OAuthConnectionUpdate) SetNillableCreatedBy(i *int) *OAuthConnectionUpdate {
	if i != nil {
		ocu.SetCreatedBy(*i)
	}
	return ocu
}

// AddCreatedBy adds i to the "created_by" field.
func (ocu *OAuthConnectionUpdate) AddCreatedBy(i int) *OAuthConnectionUpdate {
	ocu.mutation.AddCreatedBy(i)
	return ocu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ocu *OAuthConnectionUpdate) ClearCreatedBy() *OAuthConnectionUpdate {
	ocu.mutation.ClearCreatedBy()
	return ocu
}

// SetCreatedWith sets the "created_with" field.
func (ocu *OAuthConnectionUpdate) SetCreatedWith(s string) *OAuthConnectionUpdate {
	ocu.mutation.SetCreatedWith(s)
	return ocu
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (ocu *OAuthConnectionUpdate) SetNillableCreatedWith(s *string) *OAuthConnectionUpdate {
	if s != nil {
		ocu.SetCreatedWith(*s)
	}
	return ocu
}

// ClearCreatedWith clears the value of the "created_with" field.
func (ocu *OAuthConnectionUpdate) ClearCreatedWith() *OAuthConnectionUpdate {
	ocu.mutation.ClearCreatedWith()
	return ocu
}

// SetUpdatedAt sets the "updated_at" field.
func (ocu *OAuthConnectionUpdate) SetUpdatedAt(t time.Time) *OAuthConnectionUpdate {
	ocu.mutation.SetUpdatedAt(t)
	return ocu
}

// SetUpdatedBy sets the "updated_by" field.
func (ocu *OAuthConnectionUpdate) SetUpdatedBy(i int) *OAuthConnectionUpdate {
	ocu.mutation.ResetUpdatedBy()
	ocu.mutation.SetUpdatedBy(i)
	return ocu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ocu *OAuthConnectionUpdate) SetNillableUpdatedBy(i *int) *OAuthConnectionUpdate {
	if i != nil {
		ocu.SetUpdatedBy(*i)
	}
	return ocu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ocu *OAuthConnectionUpdate) AddUpdatedBy(i int) *OAuthConnectionUpdate {
	ocu.mutation.AddUpdatedBy(i)
	return ocu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ocu *OAuthConnectionUpdate) ClearUpdatedBy() *OAuthConnectionUpdate {
	ocu.mutation.ClearUpdatedBy()
	return ocu
}

// SetUpdatedWith sets the "updated_with" field.
func (ocu *OAuthConnectionUpdate) SetUpdatedWith(s string) *OAuthConnectionUpdate {
	ocu.mutation.SetUpdatedWith(s)
	return ocu
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (ocu *OAuthConnectionUpdate) SetNillableUpdatedWith(s *string) *OAuthConnectionUpdate {
	if s != nil {
		ocu.SetUpdatedWith(*s)
	}
	return ocu
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (ocu *OAuthConnectionUpdate) ClearUpdatedWith() *OAuthConnectionUpdate {
	ocu.mutation.ClearUpdatedWith()
	return ocu
}

// SetProvider sets the "provider" field.
func (ocu *OAuthConnectionUpdate) SetProvider(s string) *OAuthConnectionUpdate {
	ocu.mutation.SetProvider(s)
	return ocu
}

// SetProviderUserID sets the "provider_user_id" field.
func (ocu *OAuthConnectionUpdate) SetProviderUserID(s string) *OAuthConnectionUpdate {
	ocu.mutation.SetProviderUserID(s)
	return ocu
}

// SetName sets the "name" field.
func (ocu *OAuthConnectionUpdate) SetName(s string) *OAuthConnectionUpdate {
	ocu.mutation.SetName(s)
	return ocu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ocu *OAuthConnectionUpdate) SetUserID(id int) *OAuthConnectionUpdate {
	ocu.mutation.SetUserID(id)
	return ocu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ocu *OAuthConnectionUpdate) SetNillableUserID(id *int) *OAuthConnectionUpdate {
	if id != nil {
		ocu = ocu.SetUserID(*id)
	}
	return ocu
}

// SetUser sets the "user" edge to the User entity.
func (ocu *OAuthConnectionUpdate) SetUser(u *User) *OAuthConnectionUpdate {
	return ocu.SetUserID(u.ID)
}

// Mutation returns the OAuthConnectionMutation object of the builder.
func (ocu *OAuthConnectionUpdate) Mutation() *OAuthConnectionMutation {
	return ocu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ocu *OAuthConnectionUpdate) ClearUser() *OAuthConnectionUpdate {
	ocu.mutation.ClearUser()
	return ocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OAuthConnectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ocu.defaults(); err != nil {
		return 0, err
	}
	if len(ocu.hooks) == 0 {
		affected, err = ocu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthConnectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocu.mutation = mutation
			affected, err = ocu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ocu.hooks) - 1; i >= 0; i-- {
			if ocu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ocu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OAuthConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OAuthConnectionUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OAuthConnectionUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocu *OAuthConnectionUpdate) defaults() error {
	if _, ok := ocu.mutation.UpdatedAt(); !ok {
		if oauthconnection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oauthconnection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oauthconnection.UpdateDefaultUpdatedAt()
		ocu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ocu *OAuthConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauthconnection.Table,
			Columns: oauthconnection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthconnection.FieldID,
			},
		},
	}
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if value, ok := ocu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if ocu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if value, ok := ocu.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldCreatedWith,
		})
	}
	if ocu.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauthconnection.FieldCreatedWith,
		})
	}
	if value, ok := ocu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauthconnection.FieldUpdatedAt,
		})
	}
	if value, ok := ocu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if value, ok := ocu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if ocu.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if value, ok := ocu.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldUpdatedWith,
		})
	}
	if ocu.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauthconnection.FieldUpdatedWith,
		})
	}
	if value, ok := ocu.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldProvider,
		})
	}
	if value, ok := ocu.mutation.ProviderUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldProviderUserID,
		})
	}
	if value, ok := ocu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldName,
		})
	}
	if ocu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthconnection.UserTable,
			Columns: []string{oauthconnection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthconnection.UserTable,
			Columns: []string{oauthconnection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OAuthConnectionUpdateOne is the builder for updating a single OAuthConnection entity.
type OAuthConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthConnectionMutation
}

// SetCreatedBy sets the "created_by" field.
func (ocuo *OAuthConnectionUpdateOne) SetCreatedBy(i int) *OAuthConnectionUpdateOne {
	ocuo.mutation.ResetCreatedBy()
	ocuo.mutation.SetCreatedBy(i)
	return ocuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ocuo *OAuthConnectionUpdateOne) SetNillableCreatedBy(i *int) *OAuthConnectionUpdateOne {
	if i != nil {
		ocuo.SetCreatedBy(*i)
	}
	return ocuo
}

// AddCreatedBy adds i to the "created_by" field.
func (ocuo *OAuthConnectionUpdateOne) AddCreatedBy(i int) *OAuthConnectionUpdateOne {
	ocuo.mutation.AddCreatedBy(i)
	return ocuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ocuo *OAuthConnectionUpdateOne) ClearCreatedBy() *OAuthConnectionUpdateOne {
	ocuo.mutation.ClearCreatedBy()
	return ocuo
}

// SetCreatedWith sets the "created_with" field.
func (ocuo *OAuthConnectionUpdateOne) SetCreatedWith(s string) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetCreatedWith(s)
	return ocuo
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (ocuo *OAuthConnectionUpdateOne) SetNillableCreatedWith(s *string) *OAuthConnectionUpdateOne {
	if s != nil {
		ocuo.SetCreatedWith(*s)
	}
	return ocuo
}

// ClearCreatedWith clears the value of the "created_with" field.
func (ocuo *OAuthConnectionUpdateOne) ClearCreatedWith() *OAuthConnectionUpdateOne {
	ocuo.mutation.ClearCreatedWith()
	return ocuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ocuo *OAuthConnectionUpdateOne) SetUpdatedAt(t time.Time) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetUpdatedAt(t)
	return ocuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ocuo *OAuthConnectionUpdateOne) SetUpdatedBy(i int) *OAuthConnectionUpdateOne {
	ocuo.mutation.ResetUpdatedBy()
	ocuo.mutation.SetUpdatedBy(i)
	return ocuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ocuo *OAuthConnectionUpdateOne) SetNillableUpdatedBy(i *int) *OAuthConnectionUpdateOne {
	if i != nil {
		ocuo.SetUpdatedBy(*i)
	}
	return ocuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ocuo *OAuthConnectionUpdateOne) AddUpdatedBy(i int) *OAuthConnectionUpdateOne {
	ocuo.mutation.AddUpdatedBy(i)
	return ocuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ocuo *OAuthConnectionUpdateOne) ClearUpdatedBy() *OAuthConnectionUpdateOne {
	ocuo.mutation.ClearUpdatedBy()
	return ocuo
}

// SetUpdatedWith sets the "updated_with" field.
func (ocuo *OAuthConnectionUpdateOne) SetUpdatedWith(s string) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetUpdatedWith(s)
	return ocuo
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (ocuo *OAuthConnectionUpdateOne) SetNillableUpdatedWith(s *string) *OAuthConnectionUpdateOne {
	if s != nil {
		ocuo.SetUpdatedWith(*s)
	}
	return ocuo
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (ocuo *OAuthConnectionUpdateOne) ClearUpdatedWith() *OAuthConnectionUpdateOne {
	ocuo.mutation.ClearUpdatedWith()
	return ocuo
}

// SetProvider sets the "provider" field.
func (ocuo *OAuthConnectionUpdateOne) SetProvider(s string) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetProvider(s)
	return ocuo
}

// SetProviderUserID sets the "provider_user_id" field.
func (ocuo *OAuthConnectionUpdateOne) SetProviderUserID(s string) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetProviderUserID(s)
	return ocuo
}

// SetName sets the "name" field.
func (ocuo *OAuthConnectionUpdateOne) SetName(s string) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetName(s)
	return ocuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ocuo *OAuthConnectionUpdateOne) SetUserID(id int) *OAuthConnectionUpdateOne {
	ocuo.mutation.SetUserID(id)
	return ocuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ocuo *OAuthConnectionUpdateOne) SetNillableUserID(id *int) *OAuthConnectionUpdateOne {
	if id != nil {
		ocuo = ocuo.SetUserID(*id)
	}
	return ocuo
}

// SetUser sets the "user" edge to the User entity.
func (ocuo *OAuthConnectionUpdateOne) SetUser(u *User) *OAuthConnectionUpdateOne {
	return ocuo.SetUserID(u.ID)
}

// Mutation returns the OAuthConnectionMutation object of the builder.
func (ocuo *OAuthConnectionUpdateOne) Mutation() *OAuthConnectionMutation {
	return ocuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ocuo *OAuthConnectionUpdateOne) ClearUser() *OAuthConnectionUpdateOne {
	ocuo.mutation.ClearUser()
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OAuthConnectionUpdateOne) Select(field string, fields ...string) *OAuthConnectionUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OAuthConnection entity.
func (ocuo *OAuthConnectionUpdateOne) Save(ctx context.Context) (*OAuthConnection, error) {
	var (
		err  error
		node *OAuthConnection
	)
	if err := ocuo.defaults(); err != nil {
		return nil, err
	}
	if len(ocuo.hooks) == 0 {
		node, err = ocuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthConnectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocuo.mutation = mutation
			node, err = ocuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ocuo.hooks) - 1; i >= 0; i-- {
			if ocuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ocuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OAuthConnectionUpdateOne) SaveX(ctx context.Context) *OAuthConnection {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OAuthConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OAuthConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocuo *OAuthConnectionUpdateOne) defaults() error {
	if _, ok := ocuo.mutation.UpdatedAt(); !ok {
		if oauthconnection.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized oauthconnection.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := oauthconnection.UpdateDefaultUpdatedAt()
		ocuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ocuo *OAuthConnectionUpdateOne) sqlSave(ctx context.Context) (_node *OAuthConnection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oauthconnection.Table,
			Columns: oauthconnection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthconnection.FieldID,
			},
		},
	}
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OAuthConnection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthconnection.FieldID)
		for _, f := range fields {
			if !oauthconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if value, ok := ocuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if ocuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: oauthconnection.FieldCreatedBy,
		})
	}
	if value, ok := ocuo.mutation.CreatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldCreatedWith,
		})
	}
	if ocuo.mutation.CreatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauthconnection.FieldCreatedWith,
		})
	}
	if value, ok := ocuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauthconnection.FieldUpdatedAt,
		})
	}
	if value, ok := ocuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if value, ok := ocuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if ocuo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: oauthconnection.FieldUpdatedBy,
		})
	}
	if value, ok := ocuo.mutation.UpdatedWith(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldUpdatedWith,
		})
	}
	if ocuo.mutation.UpdatedWithCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: oauthconnection.FieldUpdatedWith,
		})
	}
	if value, ok := ocuo.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldProvider,
		})
	}
	if value, ok := ocuo.mutation.ProviderUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldProviderUserID,
		})
	}
	if value, ok := ocuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauthconnection.FieldName,
		})
	}
	if ocuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthconnection.UserTable,
			Columns: []string{oauthconnection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthconnection.UserTable,
			Columns: []string{oauthconnection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthConnection{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
