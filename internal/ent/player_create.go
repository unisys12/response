// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/responserms/response/internal/ent/gameserver"
	"github.com/responserms/response/internal/ent/metadata"
	"github.com/responserms/response/internal/ent/player"
	"github.com/responserms/response/internal/ent/playeridentifier"
)

// PlayerCreate is the builder for creating a Player entity.
type PlayerCreate struct {
	config
	mutation *PlayerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlayerCreate) SetCreatedAt(t time.Time) *PlayerCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableCreatedAt(t *time.Time) *PlayerCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PlayerCreate) SetCreatedBy(i int) *PlayerCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableCreatedBy(i *int) *PlayerCreate {
	if i != nil {
		pc.SetCreatedBy(*i)
	}
	return pc
}

// SetCreatedWith sets the "created_with" field.
func (pc *PlayerCreate) SetCreatedWith(s string) *PlayerCreate {
	pc.mutation.SetCreatedWith(s)
	return pc
}

// SetNillableCreatedWith sets the "created_with" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableCreatedWith(s *string) *PlayerCreate {
	if s != nil {
		pc.SetCreatedWith(*s)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlayerCreate) SetUpdatedAt(t time.Time) *PlayerCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableUpdatedAt(t *time.Time) *PlayerCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PlayerCreate) SetUpdatedBy(i int) *PlayerCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableUpdatedBy(i *int) *PlayerCreate {
	if i != nil {
		pc.SetUpdatedBy(*i)
	}
	return pc
}

// SetUpdatedWith sets the "updated_with" field.
func (pc *PlayerCreate) SetUpdatedWith(s string) *PlayerCreate {
	pc.mutation.SetUpdatedWith(s)
	return pc
}

// SetNillableUpdatedWith sets the "updated_with" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableUpdatedWith(s *string) *PlayerCreate {
	if s != nil {
		pc.SetUpdatedWith(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlayerCreate) SetName(s string) *PlayerCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetMetadataID sets the "metadata" edge to the Metadata entity by ID.
func (pc *PlayerCreate) SetMetadataID(id int) *PlayerCreate {
	pc.mutation.SetMetadataID(id)
	return pc
}

// SetNillableMetadataID sets the "metadata" edge to the Metadata entity by ID if the given value is not nil.
func (pc *PlayerCreate) SetNillableMetadataID(id *int) *PlayerCreate {
	if id != nil {
		pc = pc.SetMetadataID(*id)
	}
	return pc
}

// SetMetadata sets the "metadata" edge to the Metadata entity.
func (pc *PlayerCreate) SetMetadata(m *Metadata) *PlayerCreate {
	return pc.SetMetadataID(m.ID)
}

// AddServerIDs adds the "servers" edge to the GameServer entity by IDs.
func (pc *PlayerCreate) AddServerIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddServerIDs(ids...)
	return pc
}

// AddServers adds the "servers" edges to the GameServer entity.
func (pc *PlayerCreate) AddServers(g ...*GameServer) *PlayerCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddServerIDs(ids...)
}

// AddIdentifierIDs adds the "identifiers" edge to the PlayerIdentifier entity by IDs.
func (pc *PlayerCreate) AddIdentifierIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddIdentifierIDs(ids...)
	return pc
}

// AddIdentifiers adds the "identifiers" edges to the PlayerIdentifier entity.
func (pc *PlayerCreate) AddIdentifiers(p ...*PlayerIdentifier) *PlayerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddIdentifierIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pc *PlayerCreate) Mutation() *PlayerMutation {
	return pc.mutation
}

// Save creates the Player in the database.
func (pc *PlayerCreate) Save(ctx context.Context) (*Player, error) {
	var (
		err  error
		node *Player
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlayerCreate) SaveX(ctx context.Context) *Player {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlayerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlayerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlayerCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if player.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized player.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := player.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if player.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized player.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := player.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlayerCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (pc *PlayerCreate) sqlSave(ctx context.Context) (*Player, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PlayerCreate) createSpec() (*Player, *sqlgraph.CreateSpec) {
	var (
		_node = &Player{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: player.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: player.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: player.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: player.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.CreatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: player.FieldCreatedWith,
		})
		_node.CreatedWith = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: player.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: player.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.UpdatedWith(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: player.FieldUpdatedWith,
		})
		_node.UpdatedWith = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: player.FieldName,
		})
		_node.Name = value
	}
	if nodes := pc.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   player.MetadataTable,
			Columns: []string{player.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   player.ServersTable,
			Columns: player.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gameserver.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.IdentifiersTable,
			Columns: []string{player.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: playeridentifier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Player.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlayerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PlayerCreate) OnConflict(opts ...sql.ConflictOption) *PlayerUpsertOne {
	pc.conflict = opts
	return &PlayerUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Player.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PlayerCreate) OnConflictColumns(columns ...string) *PlayerUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlayerUpsertOne{
		create: pc,
	}
}

type (
	// PlayerUpsertOne is the builder for "upsert"-ing
	//  one Player node.
	PlayerUpsertOne struct {
		create *PlayerCreate
	}

	// PlayerUpsert is the "OnConflict" setter.
	PlayerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PlayerUpsert) SetCreatedAt(v time.Time) *PlayerUpsert {
	u.Set(player.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateCreatedAt() *PlayerUpsert {
	u.SetExcluded(player.FieldCreatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PlayerUpsert) SetCreatedBy(v int) *PlayerUpsert {
	u.Set(player.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateCreatedBy() *PlayerUpsert {
	u.SetExcluded(player.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PlayerUpsert) ClearCreatedBy() *PlayerUpsert {
	u.SetNull(player.FieldCreatedBy)
	return u
}

// SetCreatedWith sets the "created_with" field.
func (u *PlayerUpsert) SetCreatedWith(v string) *PlayerUpsert {
	u.Set(player.FieldCreatedWith, v)
	return u
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateCreatedWith() *PlayerUpsert {
	u.SetExcluded(player.FieldCreatedWith)
	return u
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PlayerUpsert) ClearCreatedWith() *PlayerUpsert {
	u.SetNull(player.FieldCreatedWith)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlayerUpsert) SetUpdatedAt(v time.Time) *PlayerUpsert {
	u.Set(player.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateUpdatedAt() *PlayerUpsert {
	u.SetExcluded(player.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlayerUpsert) SetUpdatedBy(v int) *PlayerUpsert {
	u.Set(player.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateUpdatedBy() *PlayerUpsert {
	u.SetExcluded(player.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PlayerUpsert) ClearUpdatedBy() *PlayerUpsert {
	u.SetNull(player.FieldUpdatedBy)
	return u
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PlayerUpsert) SetUpdatedWith(v string) *PlayerUpsert {
	u.Set(player.FieldUpdatedWith, v)
	return u
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateUpdatedWith() *PlayerUpsert {
	u.SetExcluded(player.FieldUpdatedWith)
	return u
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PlayerUpsert) ClearUpdatedWith() *PlayerUpsert {
	u.SetNull(player.FieldUpdatedWith)
	return u
}

// SetName sets the "name" field.
func (u *PlayerUpsert) SetName(v string) *PlayerUpsert {
	u.Set(player.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlayerUpsert) UpdateName() *PlayerUpsert {
	u.SetExcluded(player.FieldName)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Player.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PlayerUpsertOne) UpdateNewValues() *PlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Player.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PlayerUpsertOne) Ignore() *PlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlayerUpsertOne) DoNothing() *PlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlayerCreate.OnConflict
// documentation for more info.
func (u *PlayerUpsertOne) Update(set func(*PlayerUpsert)) *PlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlayerUpsertOne) SetCreatedAt(v time.Time) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateCreatedAt() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PlayerUpsertOne) SetCreatedBy(v int) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateCreatedBy() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PlayerUpsertOne) ClearCreatedBy() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *PlayerUpsertOne) SetCreatedWith(v string) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateCreatedWith() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PlayerUpsertOne) ClearCreatedWith() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlayerUpsertOne) SetUpdatedAt(v time.Time) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateUpdatedAt() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlayerUpsertOne) SetUpdatedBy(v int) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateUpdatedBy() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PlayerUpsertOne) ClearUpdatedBy() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PlayerUpsertOne) SetUpdatedWith(v string) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateUpdatedWith() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PlayerUpsertOne) ClearUpdatedWith() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetName sets the "name" field.
func (u *PlayerUpsertOne) SetName(v string) *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlayerUpsertOne) UpdateName() *PlayerUpsertOne {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PlayerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlayerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlayerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlayerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlayerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlayerCreateBulk is the builder for creating many Player entities in bulk.
type PlayerCreateBulk struct {
	config
	builders []*PlayerCreate
	conflict []sql.ConflictOption
}

// Save creates the Player entities in the database.
func (pcb *PlayerCreateBulk) Save(ctx context.Context) ([]*Player, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Player, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlayerCreateBulk) SaveX(ctx context.Context) []*Player {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlayerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Player.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlayerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PlayerCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlayerUpsertBulk {
	pcb.conflict = opts
	return &PlayerUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Player.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PlayerCreateBulk) OnConflictColumns(columns ...string) *PlayerUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlayerUpsertBulk{
		create: pcb,
	}
}

// PlayerUpsertBulk is the builder for "upsert"-ing
// a bulk of Player nodes.
type PlayerUpsertBulk struct {
	create *PlayerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Player.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PlayerUpsertBulk) UpdateNewValues() *PlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Player.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PlayerUpsertBulk) Ignore() *PlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlayerUpsertBulk) DoNothing() *PlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlayerCreateBulk.OnConflict
// documentation for more info.
func (u *PlayerUpsertBulk) Update(set func(*PlayerUpsert)) *PlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlayerUpsertBulk) SetCreatedAt(v time.Time) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateCreatedAt() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PlayerUpsertBulk) SetCreatedBy(v int) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateCreatedBy() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *PlayerUpsertBulk) ClearCreatedBy() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearCreatedBy()
	})
}

// SetCreatedWith sets the "created_with" field.
func (u *PlayerUpsertBulk) SetCreatedWith(v string) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetCreatedWith(v)
	})
}

// UpdateCreatedWith sets the "created_with" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateCreatedWith() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateCreatedWith()
	})
}

// ClearCreatedWith clears the value of the "created_with" field.
func (u *PlayerUpsertBulk) ClearCreatedWith() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearCreatedWith()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlayerUpsertBulk) SetUpdatedAt(v time.Time) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateUpdatedAt() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PlayerUpsertBulk) SetUpdatedBy(v int) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateUpdatedBy() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *PlayerUpsertBulk) ClearUpdatedBy() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedWith sets the "updated_with" field.
func (u *PlayerUpsertBulk) SetUpdatedWith(v string) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetUpdatedWith(v)
	})
}

// UpdateUpdatedWith sets the "updated_with" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateUpdatedWith() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateUpdatedWith()
	})
}

// ClearUpdatedWith clears the value of the "updated_with" field.
func (u *PlayerUpsertBulk) ClearUpdatedWith() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.ClearUpdatedWith()
	})
}

// SetName sets the "name" field.
func (u *PlayerUpsertBulk) SetName(v string) *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlayerUpsertBulk) UpdateName() *PlayerUpsertBulk {
	return u.Update(func(s *PlayerUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *PlayerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlayerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlayerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlayerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
